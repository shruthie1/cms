{"version":3,"file":"server.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACoC;AACZ;AACJ;AACuB;AAC3C;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,oDAAa;AACrB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAa;AAC9C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,YAAY,QAAQ,oDAAa,iBAAiB,2EAA2E;AACjJ;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oDAAa;AAC9C;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oDAAa;AAClD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAY,iBAAiB,KAAK,GAAG,UAAU;AAClE,IAAI,wDAAgB,QAAQ,6BAA6B;AACzD;AACA;AACA;AACA,yBAAyB,oDAAa;AACtC,wBAAwB,uDAAgB,8BAA8B;AACtE,uCAAuC,KAAK,GAAG,WAAW;AAC1D,sBAAsB;AACtB,wBAAwB,oDAAa;AACrC,wBAAwB,uDAAgB,8BAA8B;AACtE,uCAAuC,KAAK,GAAG,WAAW;AAC1D;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd,gEAAgE,IAAI;AACpE;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrKkF;AAClD;AACzB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,uDAAgB,yBAAyB,4DAA4D,qDAAgB,uBAAuB;AAClK;AACA,8BAA8B,0DAAmB;AACjD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,4DAA4D,MAAM;AAClE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,sCAAsC,0BAA0B,IAAI,QAAQ,kKAAkK,IAAI,cAAc;AAChQ;AACA;AACA;AACA,wBAAwB,6BAA6B;AACrD,uBAAuB;AACvB;AACA,8BAA8B,SAAS,4BAA4B,IAAI,YAAY,4BAA4B;AAC/G;AACA,0BAA0B,aAAa;AACvC;AACA;AACA,6CAA6C,eAAe,GAAG;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,sBAAsB,IAAI,eAAe,IAAI,cAAc;AAChG;AACA;AACA;AACA,yBAAyB;AACzB;AACA,+DAA+D,YAAY,IAAI,cAAc;AAC7F,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa,IAAI,cAAc;AAC/B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,SAAS,aAAa,SAAS,gBAAgB,WAAW,GAAG;AACrH;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,QAAQ,WAAW;AACnF;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,gDAAgD,iCAAiC,QAAQ;AACzF;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iDAAiD,QAAQ,WAAW,IAAI,cAAc;AACtF,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,YAAY,cAAc,GAAG;AACjG;AACA;AACA,sBAAsB;AACtB;AACA,oEAAoE,uBAAuB;AAC3F;AACA,kBAAkB;AAClB;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY,WAAW,WAAW,kBAAkB,SAAS,eAAe;AACrH;AACA;AACA;AACA;AACA;AACA,+CAA+C,IAAI,cAAc,oFAAoF,SAAS,gBAAgB;AAC9K;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA,qDAAqD,mBAAmB,+BAA+B,eAAe,YAAY;AAClI,sDAAsD,mBAAmB,+BAA+B,mBAAmB;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,kBAAkB,IAAI,cAAc,oFAAoF;AAC1K;AACA;AACA;AACA;AACA,iDAAiD,SAAS,aAAa;AACvE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,gDAAgD,IAAI,cAAc,gDAAgD;AAClH;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,+CAA+C,IAAI,QAAQ,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI,QAAQ,WAAW,IAAI,cAAc;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,gBAAgB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,QAAQ,WAAW,IAAI,uBAAuB;AACrH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,qBAAqB,IAAI,QAAQ,WAAW,IAAI,cAAc;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,oBAAoB;AACpE;AACA;AACA;AACA;AACA;AACA,+CAA+C,IAAI,QAAQ,WAAW;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB,gBAAgB;AACnD,kBAAkB,iBAAiB;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uDAAuD,eAAe,UAAU;AAChF;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,uBAAuB;AAChE;AACA;AACA,6EAA6E,uBAAuB;AACpG;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,IAAI,QAAQ;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY,aAAa;AAC3C;AACA;AACA,0BAA0B,SAAS,mBAAmB;AACtD,0BAA0B,YAAY;AACtC;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA,iBAAiB;AACjB;AACA,6BAA6B,QAAQ;AACrC,iBAAiB;AACjB;AACA,gCAAgC,QAAQ;AACxC,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,8EAA8E,WAAW,IAAI,cAAc,YAAY;AACvH;AACA,kEAAkE,WAAW,IAAI,mBAAmB,IAAI,cAAc;AACtH;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,eAAe,IAAI,YAAY,IAAI,cAAc;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3lBa;AACe;AAC5B,oDAAa;AACb;AAC8B;AACJ;AACc;AACkB,CAAC;AACd;AASlB;AACU;AACa;AACT;AACQ;AAC7B;AACuB;AACe;AACZ;AACmB;AACjC;AACiB;AACjD;AACA;AACA,WAAW,mBAAO,CAAC,kBAAM;AACzB,YAAY,8CAAO;AACnB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,QAAQ,sDAAc;AACtB,QAAQ,+DAAa;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,yDAAgB;AAChB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA,eAAe,sDAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,sEAAoB;AAC/B;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA,WAAW,sEAAoB;AAC/B;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,qCAAqC,MAAM;AAC3C;AACA,4DAA4D,mBAAmB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,QAAQ,wDAAgB,IAAI,UAAU;AACtC;AACA;AACA;AACA;AACA,+CAA+C,QAAQ,UAAU,sHAAsH;AACvL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,mEAAoB;AACtB;AACA;AACA;AACA;AACA;AACA,gBAAgB,wDAAgB,IAAI,UAAU;AAC9C;AACA,QAAQ;AACR;AACA;AACA,YAAY,6CAAK;AACjB;AACA,UAAU,wDAAgB,IAAI,0BAA0B;AACxD,UAAU,wDAAgB;AAC1B,GAAG;AACH,EAAE,mEAAoB;AACtB,IAAI,yDAAgB,IAAI,0BAA0B;AAClD;AACA,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAe;AACvB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,mBAAmB,sDAAc;AACjC;AACA;AACA;AACA,sBAAsB,8DAAY;AAClC,yBAAyB,2DAAS;AAClC;AACA;AACA;AACA;AACA;AACA,sCAAsC,sIAAsI;AAC5K;AACA,YAAY,8DAAY;AACxB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA,QAAQ,sDAAc;AACtB;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,UAAU,+DAAa;AACvB,UAAU,6CAAK;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAgB,IAAI,UAAU,0CAA0C,SAAS;AAC3F;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,aAAa,sDAAc;AAC3B,cAAc,2DAAS;AACvB,4BAA4B,sEAAoB;AAChD;AACA,IAAI,sEAAoB;AACxB;AACA;AACA,UAAU,8DAAY;AACtB,IAAI;AACJ;AACA;AACA;AACA,UAAU,wDAAgB,IAAI,UAAU,QAAQ,qCAAqC,oBAAoB,cAAc,mBAAmB,SAAS,UAAU,WAAW,gBAAgB,WAAW,gBAAgB,UAAU,gBAAgB,SAAS,mBAAmB,SAAS,cAAc,WAAW,YAAY,IAAI,0BAA0B,iBAAiB,YAAY,GAAG;AACrX;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,+EAA+E,iBAAiB;AAChG;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA;AACA,+EAA+E,iBAAiB;AAChG;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU;AAC1C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC,UAAU,6CAAK;AACf;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,wBAAwB,wDAAgB,IAAI,UAAU;AACtD;AACA,MAAM;AACN;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC,UAAU,6CAAK;AACf;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC,UAAU,6CAAK;AACf;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,UAAU,wDAAgB,IAAI,gBAAgB;AAC9C,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,mBAAmB,aAAa;AAChC,GAAG;AACH;AACA;AACA,mBAAmB,UAAU,EAAE,SAAS;AACxC;AACA,UAAU,6CAAK;AACf,UAAU,wDAAgB;AAC1B;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,aAAa,sDAAc;AAC3B;AACA,+CAA+C;AAC/C;AACA;AACA,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA,CAAC;AACD;AACA;AACA;AACA,UAAU,wDAAgB,IAAI,UAAU,kBAAkB,qBAAqB;AAC/E,UAAU,wDAAgB,IAAI,UAAU;AACxC,GAAG;AACH,aAAa,sDAAc;AAC3B;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wDAAgB,IAAI,UAAU,iBAAiB,qBAAqB;AAC9E,GAAG;AACH,aAAa,sDAAc;AAC3B;AACA,kCAAkC,IAAI;AACtC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU;AAC1C,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU,aAAa,sBAAsB;AAC7E,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,UAAU,wDAAgB,IAAI,UAAU,kBAAkB,IAAI;AAC9D,GAAG;AACH,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA,aAAa,qCAAqC;AAClD,CAAC;AACD;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC;AACA,CAAC;AACD;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA,kBAAkB,uBAAuB;AACzC;AACA,qBAAqB,iBAAiB,KAAK,+DAA+D;AAC1G;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA,qBAAqB,WAAW,KAAK,4DAA4D;AACjG;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU;AAC1C;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU;AAC1C;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU;AAC1C;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,kCAAkC,gBAAgB;AAClD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC;AACA,6BAA6B,2DAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,iBAAiB;AACtG;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA,cAAc,0DAAiB;AAC/B,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,kCAAkC,gBAAgB;AAClD;AACA,2CAA2C,YAAY,OAAO,GAAG;AACjE;AACA;AACA;AACA,iBAAiB,2DAAS;AAC1B,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA;AACA;AACA,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB;AACA,cAAc,6CAAK;AACnB,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,oCAAoC,gBAAgB;AACpD;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC,2BAA2B,2DAAS;AACpC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,eAAe,sDAAc;AAC7B,kCAAkC,gBAAgB;AAClD,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,kCAAkC,gBAAgB;AAClD,OAAO,2DAAS;AAChB,sBAAsB,8DAAY;AAClC,yBAAyB,2DAAS;AAClC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAQ;AACjC,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,kCAAkC,gBAAgB;AAClD,OAAO,2DAAS;AAChB,sBAAsB,8DAAY;AAClC,yBAAyB,2DAAS;AAClC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,kCAAkC,gBAAgB;AAClD,OAAO,2DAAS;AAChB,sBAAsB,8DAAY;AAClC,yBAAyB,2DAAS;AAClC;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,kCAAkC,gBAAgB;AAClD,OAAO,2DAAS;AAChB,sBAAsB,8DAAY;AAClC,yBAAyB,2DAAS;AAClC;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA,SAAS,2DAAS;AAClB,wBAAwB,8DAAY;AACpC;AACA,mBAAmB,aAAa;AAChC,QAAQ;AACR,mBAAmB,aAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD,QAAQ,+DAAa;AACrB,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,QAAQ,8DAAY;AACpB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAS;AAC7B;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB,uBAAuB;AACzC;AACA,UAAU,wDAAgB,IAAI,UAAU;AACxC,UAAU,6CAAK;AACf;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,SAAS,gBAAgB,IAAI,KAAK,eAAe;AACjF;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,wDAAgB,IAAI,IAAI,iBAAiB,gBAAgB;AAC3F;AACA,gDAAgD,uEAAuE;AACvH;AACA,UAAU;AACV,gDAAgD,IAAI;AACpD;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,uFAAuF,UAAU;AACjG;AACA,MAAM;AACN;AACA;AACA;AACA,gBAAgB,6CAAK;AACrB,UAAU;AACV;AACA;AACA,OAAO;AACP;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,iCAAiC,UAAU,8BAA8B,UAAU,IAAI,OAAO;AAC9F,yCAAyC,UAAU,IAAI,OAAO;AAC9D;AACA;AACA;AACA,6BAA6B,wDAAgB,IAAI,SAAS,cAAc,OAAO,KAAK,eAAe;AACnG;AACA,8CAA8C,UAAU,IAAI,OAAO;AACnE;AACA;AACA,mCAAmC,wDAAgB,IAAI,SAAS,cAAc,OAAO,KAAK,eAAe;AACzG;AACA,wBAAwB,wDAAgB,IAAI,SAAS,cAAc,OAAO,6EAA6E,eAAe;AACtK,iBAAiB;AACjB,gBAAgB;AAChB;AACA;AACA,aAAa;AACb,YAAY;AACZ,yDAAyD,UAAU,IAAI,OAAO;AAC9E;AACA,UAAU;AACV;AACA;AACA;AACA,OAAO;AACP,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;AACD,sBAAsB,sDAAW,QAAQ,wDAAS,MAAM,qEAAc;AACtE;AACA,mBAAmB,6DAAe;AAClC;AACA;AACA;AACA;AACA,iBAAiB,2DAAa;AAC9B;AACA,2DAAa;AACb,oDAAY;AACZ;AACA;AACA;AACA,2DAA2D,KAAK;AAChE,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,gCAAgC;AAC9D;AACA,qCAAqC,WAAW,UAAU,WAAW,cAAc,gBAAgB;AACnG,qCAAqC,MAAM,KAAK,gBAAgB;AAChE;AACA;AACA,6BAA6B,wDAAgB,IAAI,KAAK,gBAAgB,gBAAgB;AACtF;AACA;AACA;AACA,cAAc;AACd;AACA,oBAAoB,wDAAgB,IAAI,UAAU,QAAQ,mCAAmC,oBAAoB,iBAAiB;AAClI;AACA,0CAA0C,wDAAgB,IAAI,IAAI,eAAe,UAAU,KAAK,gBAAgB;AAChH;AACA,sBAAsB,wDAAgB,IAAI,UAAU,QAAQ,0CAA0C,iBAAiB,wBAAwB;AAC/I,gBAAgB;AAChB;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wDAAgB,IAAI,UAAU,gBAAgB,iBAAiB;AACpF,UAAU,wDAAgB,IAAI,YAAY,gCAAgC,eAAe,IAAI,2BAA2B;AACxH;AACA,YAAY,wDAAgB,IAAI,UAAU,kCAAkC,eAAe;AAC3F;AACA,iBAAiB,sDAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU,uBAAuB,SAAS;AAC1E,kBAAkB,6CAAK;AACvB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,eAAe,2BAA2B,IAAI,iBAAiB,EAAE,4BAA4B,0EAA0E,OAAO;AAC9K;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B;AACA;AACA,eAAe,2BAA2B,OAAO,gBAAgB,MAAM,4BAA4B,0EAA0E,OAAO;AACpL;AACA;AACA;AACA;AACA;AACA,uCAAuC,kBAAkB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAc;AACjC;AACA;AACA;AACA,YAAY,0FAA0F;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,MAAM;AACpD;AACA;AACA;AACA;AACA,8DAA8D,MAAM;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB,OAAO,2BAA2B,SAAS,eAAe;AACjG;AACA;AACA;AACA;AACA;AACA,iBAAiB,uBAAuB,OAAO,qBAAqB,QAAQ,uBAAuB;AACnG;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,4BAA4B,IAAI,MAAM;AACtC,6BAA6B,IAAI,OAAO;AACxC;AACA,gCAAgC;AAChC,6BAA6B,KAAK,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAc;AACjC,QAAQ,+DAAa;AACrB,QAAQ,6CAAK;AACb,+CAA+C;AAC/C;AACA;AACA;AACA,oBAAoB,yBAAyB;AAC7C;AACA;AACA;AACA;AACA;AACA,sBAAsB,8DAAY;AAClC;AACA,2BAA2B,2DAAS;AACpC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,yCAAyC,wDAAwD;AACjG;AACA;AACA;AACA;AACA,YAAY,8DAAY;AACxB,YAAY,6CAAK;AACjB,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAc;AACjC,QAAQ,+DAAa;AACrB,QAAQ,6CAAK;AACb,iDAAiD;AACjD;AACA;AACA,sBAAsB,8DAAY;AAClC;AACA;AACA;AACA,wCAAwC,yBAAyB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAc;AACjC;AACA;AACA;AACA;AACA;AACA,0BAA0B,8DAAY;AACtC;AACA,+BAA+B,2DAAS;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA;AACA,kBAAkB,8DAAY;AAC9B;AACA,YAAY;AACZ,4CAA4C,aAAa;AACzD;AACA,kBAAkB,8DAAY;AAC9B;AACA,UAAU;AACV;AACA;AACA,QAAQ;AACR;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAc;AACnC,UAAU,+DAAa;AACvB,UAAU,6CAAK;AACf,+CAA+C,UAAU;AACzD;AACA;AACA,iDAAiD,yDAAyD;AAC1G;AACA,4BAA4B,8DAAY;AACxC;AACA,iCAAiC,2DAAS;AAC1C,kBAAkB,0DAAiB;AACnC;AACA,8CAA8C,SAAS;AACvD,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAc;AACnC,+CAA+C,UAAU;AACzD;AACA;AACA;AACA,iDAAiD,yDAAyD;AAC1G;AACA,4BAA4B,8DAAY;AACxC;AACA,gCAAgC,2DAAS;AACzC,qFAAqF,eAAe;AACpG;AACA;AACA,kBAAkB,6CAAK;AACvB;AACA,kBAAkB,6CAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kBAAkB;AAC7D;AACA,QAAQ;AACR;AACA,cAAc,wDAAgB,IAAI,UAAU,iDAAiD,SAAS;AACtG;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU,4BAA4B,SAAS;AAC/E;AACA;AACA;AACA;AACA;AACA,UAAU,8DAAY;AACtB,UAAU,6CAAK;AACf;AACA,wBAAwB,8DAAY;AACpC;AACA,6BAA6B,2DAAS;AACtC;AACA,QAAQ,uEAAoB,GAAG,yCAAyC;AACxE;AACA;AACA;AACA,uDAAuD,SAAS;AAChE;AACA,uEAAuE,YAAY;AACnF;AACA;AACA,cAAc,6CAAK;AACnB,2DAA2D,YAAY,iBAAiB,GAAG;AAC3F;AACA,gBAAgB,wDAAgB,IAAI,UAAU,mCAAmC,SAAS,GAAG,YAAY,GAAG,iBAAiB;AAC7H;AACA,+BAA+B,wCAAwC,IAAI,UAAU;AACrF,4CAA4C,YAAY,iBAAiB,GAAG;AAC5E,UAAU;AACV,gBAAgB,wDAAgB,IAAI,UAAU,kCAAkC,SAAS,GAAG,YAAY,GAAG,iBAAiB;AAC5H;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gBAAgB;AAC/D;AACA,WAAW;AACX;AACA;AACA,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,6CAAK;AACf,2BAA2B,wDAAgB,8CAA8C,uBAAuB,SAAS,KAAK,KAAK,gBAAgB;AACnJ;AACA;AACA,YAAY,wDAAgB,IAAI,UAAU,QAAQ,6CAA6C,SAAS,GAAG,YAAY,GAAG;AAC1H,MAAM;AACN,yCAAyC,yBAAyB;AAClE,YAAY,6CAAK;AACjB;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAc;AACnC;AACA,QAAQ,8DAAsB;AAC9B,gDAAgD,sCAAsC;AACtF;AACA,MAAM;AACN;AACA,+CAA+C,mBAAmB,IAAI,0BAA0B;AAChG;AACA;AACA,+BAA+B,QAAQ,sBAAsB,YAAY;AACzE;AACA;AACA,yCAAyC,0BAA0B,2BAA2B,cAAc;AAC5G,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,sDAAsD,sCAAsC,IAAI,+DAA+D,YAAY,wEAAwE;AACnP;AACA,kCAAkC,uCAAuC;AACzE,UAAU,wDAAgB,IAAI,0BAA0B,wBAAwB,SAAS;AACzF,UAAU,wDAAgB,IAAI,UAAU,sBAAsB,cAAc,GAAG,cAAc,GAAG,YAAY,GAAG,UAAU;AACzH;AACA;AACA;AACA,cAAc,wDAAgB,IAAI,0BAA0B,2BAA2B,uBAAuB;AAC9G,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,YAAY,wDAAgB,IAAI,0BAA0B;AAC1D,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,sDAAc;AAC3B,QAAQ,+DAAa;AACrB,QAAQ,6CAAK;AACb,+CAA+C,YAAY,cAAc;AACzE;AACA,sBAAsB,8DAAY;AAClC;AACA,2BAA2B,2DAAS;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,iBAAiB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,0BAA0B,qBAAqB;AAC/C;AACA;;;;;;;;;;;;;;;;;;;;;;;AC11DwB;AACyB;AACjD;AACA;AACA;AACO;AACP;AACA;AACA;AACA,iBAAiB,6CAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,CAAC;AACD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB;AACA;AACA,8CAA8C,MAAM,UAAU,4BAA4B;AAC1F;AACA;AACA,iCAAiC,8DAAsB;AACvD,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtGA,wEAAwB;AACxB,qEAAiE;AAEjE,MAAa,UAAU;IAMnB;QAHQ,YAAO,GAAY,KAAK,CAAC;QACzB,WAAM,GAAW,EAAE,CAAC;QAGxB,IAAI,CAAC,IAAI,GAAG,IAAI,cAAI,CAAC;YACjB,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,SAAS;YAC3B,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;YAChC,IAAI,EAAE,gBAAgB;YACtB,IAAI,EAAE,GAAG;YACT,GAAG,EAAE,IAAI;YACT,UAAU,EAAE;gBACR,kBAAkB,EAAE,KAAK;aAC5B;SACJ,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACxB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,EAAE;YAC5B,OAAO,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,MAAM,CAAC,WAAW;QACrB,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;YACvB,UAAU,CAAC,QAAQ,GAAG,IAAI,UAAU,EAAE,CAAC;QAC3C,CAAC;QAED,OAAO,UAAU,CAAC,QAAQ,CAAC;IAC/B,CAAC;IAEY,aAAa;;YACtB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG,MAAM,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAC1D,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;oBACtB,IAAI,GAAG,EAAE,CAAC;wBACN,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,GAAG,CAAC,CAAC;wBAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;wBACZ,OAAO;oBACX,CAAC;oBACD,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;oBACxC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;QACvB,CAAC;KAAA;IAEY,kBAAkB;;YAC3B,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACxC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;oBAClB,IAAI,GAAG,EAAE,CAAC;wBACN,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,GAAG,CAAC,CAAC;wBAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;wBACZ,OAAO;oBACX,CAAC;oBACD,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;oBAC7C,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEY,WAAW;;YACpB,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;KAAA;IAEY,OAAO;;YAChB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBAChB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;YAC7E,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;gBAEvB,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,EAAE,sBAAsB,CAAC,CAAC,CAAC;gBAC1D,MAAM,YAAY,GAAG;oBACjB,MAAM,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC;oBAC1B,QAAQ,EAAE,IAAI;iBACjB,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;gBAC5B,IAAI,CAAC;oBACD,MAAM,OAAO,GAAQ,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;wBACvD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE;4BAC9C,IAAI,GAAG,EAAE,CAAC;gCACN,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,GAAG,CAAC,CAAC;gCAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;gCACZ,OAAO;4BACX,CAAC;4BACD,OAAO,CAAC,OAAO,CAAC,CAAC;wBACrB,CAAC,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;oBAEH,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACrB,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,MAAM,CAAC;wBAC3C,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM;wBAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;wBACjE,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;4BACxC,KAAK,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;gCAC/B,MAAM,SAAS,GAAa,EAAE,CAAC;gCAE/B,GAAG,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;oCAC5B,IAAI,MAAM,GAAG,EAAE,CAAC;oCAChB,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE;wCACxB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oCACrC,CAAC,CAAC,CAAC;oCAEH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;wCAClB,IAAI,IAAI,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;4CACxB,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wCAC3B,CAAC;wCACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE,WAAW,EAAE,CAAC,GAAG,EAAE,EAAE;4CACjD,IAAI,GAAG,EAAE,CAAC;gDACN,MAAM,CAAC,GAAG,CAAC,CAAC;gDACZ,OAAO;4CACX,CAAC;4CACD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gDACtB,IAAI,GAAG,EAAE,CAAC;oDACN,MAAM,CAAC,GAAG,CAAC,CAAC;oDACZ,OAAO;gDACX,CAAC;gDACD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;4CACnC,CAAC,CAAC,CAAC;wCACP,CAAC,CAAC,CAAC;oCACP,CAAC,CAAC,CAAC;gCACP,CAAC,CAAC,CAAC;gCAEH,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;oCACjB,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,YAAY,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;oCAC9D,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;oCAClD,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oCACjE,IAAI,CAAC,MAAM,GAAG,kCAAsB,EAChC,SAAS,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAChD,CAAC;oCACF,OAAO,EAAE,CAAC;gCACd,CAAC,CAAC,CAAC;4BACP,CAAC,CAAC,CAAC;4BAEH,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;gCACnB,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;gCAC7B,OAAO,EAAE,CAAC;4BACd,CAAC,CAAC,CAAC;wBACP,CAAC,CAAC,CAAC;oBACP,CAAC;yBAAM,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;oBACvC,CAAC;gBACL,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACX,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;oBAC7B,MAAM,GAAG,CAAC,CAAC,0CAA0C;gBACzD,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAC,IAAI,CAAC,MAAM,CAAC;gBAC5C,OAAO,IAAI,CAAC,MAAM,CAAC;YACvB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;gBACxB,MAAM,YAAY,GAAG,sBAAU,EAAC,KAAK,CAAC,CAAC;gBACvC,OAAO,SAAS;YACpB,CAAC;QACL,CAAC;KAAA;IACa,SAAS;;YACnB,MAAM,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACxC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;oBACtC,IAAI,GAAG,EAAE,CAAC;wBACN,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,GAAG,CAAC,CAAC;wBAC5B,MAAM,CAAC,GAAG,CAAC,CAAC;wBACZ,OAAO;oBACX,CAAC;oBACD,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;oBAC5B,OAAO,EAAE,CAAC;gBACd,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;CACJ;AAlLD,gCAkLC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrLD,6EAAwC;AACxC,mFAAkD;AAClD,6HAA8D;AAC9D,iJAAyE;AACzE,oIAAkE;AAClE,4IAAuE;AACvE,uKAAsF;AACtF,0KAAyF;AACzF,mKAAqF;AACrF,iLAA4F;AAmBrF,IAAM,SAAS,GAAf,MAAM,SAAS;CAAI;AAAb,8BAAS;oBAAT,SAAS;IAjBrB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,YAAY,CAAC;gBAC1B,UAAU,EAAE,GAAS,EAAE;oBAAC,QAAC;wBACvB,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;qBAC1B,CAAC;kBAAA;aACH,CAAC;YACF,gCAAc;YACd,0CAAmB;YACnB,4CAAoB;YACpB,4BAAY;YACZ,iCAAc;YACd,0BAAW;YACX,yCAAkB;YAClB,6CAAoB;SACrB;KACF,CAAC;GACW,SAAS,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5B1B,6EAAgG;AAChG,gFAAqF;AACrF,2HAAqD;AAI9C,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC3B,YACqB,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IACjD,CAAC;IAEC,iBAAiB,CAAC,MAAc;;YAClC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC3D,CAAC;KAAA;IAOK,aAAa,CAAkB,MAAc;;YAC/C,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,+BAA+B,CAAC;QAC3C,CAAC;KAAA;IASK,WAAW;6DAAkB,MAAc,EAAqB,QAAgB,EAAkB,QAAgB,CAAC;YACrH,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC;KAAA;IAQK,SAAS,CAAkB,MAAc,EAAqB,QAAgB;;YAChF,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAClE,CAAC;KAAA;IAQK,YAAY,CAAkB,MAAc,EAAoB,QAAgB;;YAClF,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACpD,OAAO,8BAA8B,CAAC;QAC1C,CAAC;KAAA;IAOK,gBAAgB,CAAkB,MAAc;;YAClD,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YACpD,OAAO,qCAAqC,CAAC;QACjD,CAAC;KAAA;IAOK,eAAe,CAAkB,MAAc;;YACjD,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAC9D,CAAC;KAAA;IAQK,cAAc;6DAAkB,MAAc,EAAoB,UAAmB,KAAK;YAC5F,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;QACtE,CAAC;KAAA;IAOK,QAAQ,CAAkB,MAAc;;YAC1C,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACvD,CAAC;KAAA;IAOK,MAAM,CAAkB,MAAc;;YACxC,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC;KAAA;IAMK,aAAa,CACE,MAAc,EAChB,IAAY;;YAE3B,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC;QACjE,CAAC;KAAA;IAKK,iBAAiB,CACF,MAAc;;YAE/B,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;QAChE,CAAC;KAAA;IAKK,aAAa,CACE,MAAc;;YAE/B,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM,CAAC;QAC3D,CAAC;KAAA;IAMK,cAAc,CACC,MAAc,EACZ,QAAgB;;YAEnC,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,MAAM,EAAE,QAAQ,CAAC;QACtE,CAAC;KAAA;IAOK,UAAU,CACK,MAAc,EACX,SAAiB,EACrB,KAAa;;YAE7B,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YACrC,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC;QAChF,CAAC;KAAA;CAEJ;AApKY,gDAAkB;AAcrB;IALL,gBAAG,EAAC,iBAAiB,CAAC;IACtB,0BAAY,EAAC,EAAE,OAAO,EAAE,0CAA0C,EAAE,CAAC;IACrE,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC3E,6EAA6E;IAC7E,2DAA2D;;IACtC,6BAAK,EAAC,QAAQ,CAAC;;;;uDAGnC;AASK;IAPL,gBAAG,EAAC,kBAAkB,CAAC;IACvB,0BAAY,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;IACvD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC1E,sBAAQ,EAAC,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,iCAAiC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC9F,sBAAQ,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,8BAA8B,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAC1F,6EAA6E;IAC7E,2DAA2D;;IACxC,6BAAK,EAAC,QAAQ,CAAC;IAAkB,6BAAK,EAAC,UAAU,CAAC;IAAoB,6BAAK,EAAC,OAAO,CAAC;;;;qDAGtG;AAQK;IANL,gBAAG,EAAC,gBAAgB,CAAC;IACrB,0BAAY,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;IACvD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC1E,sBAAQ,EAAC,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,+BAA+B,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC7F,4EAA4E;IAC5E,2DAA2D;;IAC1C,6BAAK,EAAC,QAAQ,CAAC;IAAkB,6BAAK,EAAC,UAAU,CAAC;;;;mDAGlE;AAQK;IANL,iBAAI,EAAC,sBAAsB,CAAC;IAC5B,0BAAY,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;IAC1C,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC1E,qBAAO,EAAC,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC;IACtH,4EAA4E;IAC5E,2DAA2D;;IACvC,6BAAK,EAAC,QAAQ,CAAC;IAAkB,4BAAI,EAAC,UAAU,CAAC;;;;sDAIpE;AAOK;IALL,gBAAG,EAAC,qBAAqB,CAAC;IAC1B,0BAAY,EAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC;IACxD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC3E,mFAAmF;IACnF,2DAA2D;;IACnC,6BAAK,EAAC,QAAQ,CAAC;;;;0DAItC;AAOK;IALL,gBAAG,EAAC,sBAAsB,CAAC;IAC3B,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACnD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC3E,uFAAuF;IACvF,2DAA2D;;IACpC,6BAAK,EAAC,QAAQ,CAAC;;;;yDAGrC;AAQK;IANL,gBAAG,EAAC,qBAAqB,CAAC;IAC1B,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC7C,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC1E,sBAAQ,EAAC,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,4BAA4B,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAC1F,iFAAiF;IACjF,2DAA2D;;IACrC,6BAAK,EAAC,QAAQ,CAAC;IAAkB,6BAAK,EAAC,SAAS,CAAC;;;;wDAGtE;AAOK;IALL,gBAAG,EAAC,eAAe,CAAC;IACpB,0BAAY,EAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;IAC/C,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC3E,mFAAmF;IACnF,2DAA2D;;IAC3C,6BAAK,EAAC,QAAQ,CAAC;;;;kDAG9B;AAOK;IALL,gBAAG,EAAC,gBAAgB,CAAC;IACrB,0BAAY,EAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;IACpC,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,eAAe,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAC3E,oEAAoE;IACpE,2DAA2D;;IAC7C,6BAAK,EAAC,QAAQ,CAAC;;;;gDAG5B;AAMK;IAJL,gBAAG,EAAC,6BAA6B,CAAC;IAClC,0BAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;IAChD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC7E,sBAAQ,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAEjE,6BAAK,EAAC,QAAQ,CAAC;IACf,6BAAK,EAAC,MAAM,CAAC;;;;uDAIjB;AAKK;IAHL,gBAAG,EAAC,2BAA2B,CAAC;IAChC,0BAAY,EAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC;IACjD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAEzE,6BAAK,EAAC,QAAQ,CAAC;;;;2DAInB;AAKK;IAHL,gBAAG,EAAC,uBAAuB,CAAC;IAC5B,0BAAY,EAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;IACpD,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAEzE,6BAAK,EAAC,QAAQ,CAAC;;;;uDAInB;AAMK;IAJL,gBAAG,EAAC,wBAAwB,CAAC;IAC7B,0BAAY,EAAC,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC;IAC5C,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC7E,sBAAQ,EAAC,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAErE,6BAAK,EAAC,QAAQ,CAAC;IACf,6BAAK,EAAC,UAAU,CAAC;;;;wDAIrB;AAOK;IALL,gBAAG,EAAC,0BAA0B,CAAC;IAC/B,0BAAY,EAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC;IACxC,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC7E,sBAAQ,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACxE,sBAAQ,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAE3D,6BAAK,EAAC,QAAQ,CAAC;IACf,6BAAK,EAAC,WAAW,CAAC;IAClB,6BAAK,EAAC,OAAO,CAAC;;;;oDAIlB;6BAlKQ,kBAAkB;IAF9B,uBAAU,EAAC,UAAU,CAAC;IACtB,qBAAO,EAAC,UAAU,CAAC;qCAGsB,kCAAe;GAF5C,kBAAkB,CAoK9B;;;;;;;;;;;;;;;;;;;;AC1KD,6EAAoD;AACpD,oIAA2D;AAC3D,mHAAoD;AACpD,6JAA4E;AAC5E,2HAAqD;AAU9C,IAAM,cAAc,GAApB,MAAM,cAAc;CAAI;AAAlB,wCAAc;yBAAd,cAAc;IAR1B,mBAAM,EAAC;QACJ,OAAO,EAAE;YACL,uBAAU,EAAC,GAAE,EAAE,2BAAW,CAAC;YAC3B,yCAAkB;SAAC;QACvB,WAAW,EAAE,CAAC,wCAAkB,CAAC;QACjC,SAAS,EAAE,CAAC,kCAAe,CAAC;QAC5B,OAAO,EAAE,CAAC,kCAAe,CAAC;KAC7B,CAAC;GACW,cAAc,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACd/B,kKAAgF;AAChF,sHAAsD;AACtD,wEAA6D;AAC7D,yIAAgD;AAChD,6EAAoG;AACpG,uFAAwD;AAIjD,IAAM,eAAe,uBAArB,MAAM,eAAe;IAExB,YAEY,YAA0B,EAC1B,mBAAwC;QADxC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,wBAAmB,GAAnB,mBAAmB,CAAqB;IAChD,CAAC;IAGE,oBAAoB;QACvB,OAAO,yBAAe,CAAC,oBAAoB,EAAE,CAAC;IAClD,CAAC;IAEM,oBAAoB,CAAC,IAAuC;QAC/D,yBAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAEM,SAAS,CAAC,MAAc;QAC3B,OAAO,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAEM,SAAS,CAAC,MAAc;QAC3B,OAAO,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAEK,YAAY,CAAC,MAAc;;YAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACnC,MAAM,IAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,UAAU,EAAE,EAAC;YACxB,OAAO,iBAAe,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC;KAAA;IAEK,aAAa;;YACf,MAAM,IAAI,GAAG,iBAAe,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YAClD,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;YACzC,KAAK,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;gBACvC,IAAI,CAAC;oBACD,MAAM,OAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,UAAU,EAAE,EAAC;oBAC3B,iBAAe,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;oBAC/C,OAAO,CAAC,GAAG,CAAC,wBAAwB,WAAW,EAAE,CAAC,CAAC;gBACvD,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACb,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,KAAK,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,GAAG,CAAC,0BAA0B,WAAW,EAAE,CAAC,CAAC;gBACzD,CAAC;YACL,CAAC;QACL,CAAC;KAAA;IAEK,YAAY;6DAAC,MAAc,EAAE,cAAc,GAAG,IAAI,EAAE,OAAO,GAAG,IAAI;YACpE,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACR,MAAM,IAAI,4BAAmB,CAAC,gBAAgB,CAAC,CAAC;YACpD,CAAC;YACD,IAAI,CAAC,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC1C,MAAM,eAAe,GAAG,IAAI,yBAAe,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvE,IAAI,CAAC;oBACD,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;oBAC3D,IAAI,MAAM,EAAE,CAAC;wBACT,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;wBACxD,IAAI,cAAc,EAAE,CAAC;4BACjB,UAAU,CAAC,GAAS,EAAE;gCAClB,IAAI,MAAM,CAAC,SAAS,IAAI,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;oCAC7D,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;oCACnC,MAAM,eAAe,CAAC,UAAU,EAAE,CAAC;gCACvC,CAAC;qCAAM,CAAC;oCACJ,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;gCAC/C,CAAC;gCACD,iBAAe,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;4BAC9C,CAAC,GAAE,MAAM,CAAC;wBACd,CAAC;6BAAM,CAAC;4BACJ,WAAW,CAAC,GAAS,EAAE;gCACnB,MAAM,MAAM,CAAC,OAAO,EAAE,CAAC;4BAC3B,CAAC,GAAE,KAAK,CAAC,CAAC;wBACd,CAAC;wBACD,OAAO,eAAe,CAAC;oBAC3B,CAAC;yBAAM,CAAC;wBACJ,MAAM,IAAI,4BAAmB,CAAC,gBAAgB,CAAC,CAAC;oBACpD,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACb,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;oBAC7B,MAAM,YAAY,GAAG,sBAAU,EAAC,KAAK,CAAC,CAAC;oBACvC,IAAI,oBAAQ,EAAC,YAAY,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,SAAS,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC,EAAE,CAAC;wBAC3F,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;wBAC5C,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC9C,CAAC;yBAAM,CAAC;wBACJ,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;oBACrC,CAAC;oBACD,MAAM,IAAI,4BAAmB,CAAC,YAAY,CAAC,OAAO,CAAC;gBACvD,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,OAAO,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YACjD,CAAC;QACL,CAAC;KAAA;IACK,WAAW;6DAAC,MAAc,EAAE,QAAgB,EAAE,QAAgB,CAAC;YACjE,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,OAAO,cAAc,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACvD,CAAC;KAAA;IACD,2DAA2D;IACrD,SAAS,CAAC,MAAc,EAAE,QAAgB;;YAC5C,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,OAAO,MAAM,cAAc,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAC;KAAA;IAEK,YAAY,CAAC,MAAc,EAAE,QAAgB;;YAC/C,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,cAAc,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YACtC,OAAO,8BAA8B,CAAC;QAC1C,CAAC;KAAA;IACK,gBAAgB,CAAC,MAAc;;YACjC,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,MAAM,cAAc,CAAC,gBAAgB,EAAE,CAAC;YACxC,OAAO,qCAAqC,CAAC;QACjD,CAAC;KAAA;IAED,2DAA2D;IACrD,eAAe,CAAC,MAAc;;YAChC,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,OAAO,MAAM,cAAc,CAAC,eAAe,EAAE,CAAC;QAClD,CAAC;KAAA;IAEK,cAAc;6DAAC,MAAc,EAAE,UAAmB,KAAK;YACzD,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,OAAO,MAAM,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC;KAAA;IAEK,QAAQ,CAAC,MAAc;;YACzB,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,OAAO,MAAM,cAAc,CAAC,QAAQ,EAAE,CAAC;QAC3C,CAAC;KAAA;IAEK,KAAK,CAAC,MAAc;;YACtB,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,OAAO,MAAM,cAAc,CAAC,KAAK,EAAE,CAAC;QACxC,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc;;YACvB,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC;gBACD,MAAM,cAAc,CAAC,MAAM,EAAE,CAAC;gBAC9B,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;gBAClC,OAAO,sBAAsB;YACjC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,YAAY,GAAG,sBAAU,EAAC,KAAK,CAAC;gBACtC,MAAM,IAAI,sBAAa,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;KAAA;IAEK,8BAA8B,CAAC,MAAc;;YAC/C,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,cAAc,CAAC,8BAA8B,EAAE;QACzD,CAAC;KAAA;IAEK,mBAAmB,CAAC,MAAc;;YACpC,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9D,MAAM,cAAc,CAAC,mBAAmB,EAAE;QAC9C,CAAC;KAAA;IAEK,aAAa,CACf,MAAc,EAAE,IAAY;;YAE5B,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC;gBACD,MAAM,8BAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAC1C,MAAM,iBAAK,EAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACnD,MAAM,iBAAK,EAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACnD,MAAM,iBAAK,EAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,cAAc,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACnD,MAAM,iBAAK,EAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;gBAClC,OAAO,sBAAsB;YACjC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,YAAY,GAAG,sBAAU,EAAC,KAAK,CAAC;gBACtC,MAAM,IAAI,sBAAa,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;KAAA;IAEK,iBAAiB;6DACnB,MAAc,EACd,gBAAwB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAElG,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACR,MAAM,IAAI,4BAAmB,CAAC,gBAAgB,CAAC,CAAC;YACpD,CAAC;YACD,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC;gBACD,MAAM,cAAc,CAAC,MAAM,EAAE,CAAC;gBAC9B,MAAM,iBAAK,EAAC,KAAK,CAAC;gBAClB,MAAM,cAAc,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;gBACxC,MAAM,iBAAK,EAAC,IAAI,CAAC;gBACjB,MAAM,cAAc,CAAC,8BAA8B,EAAE,CAAC;gBACtD,MAAM,iBAAK,EAAC,IAAI,CAAC;gBACjB,MAAM,cAAc,CAAC,aAAa,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;gBACzE,MAAM,iBAAK,EAAC,IAAI,CAAC;gBACjB,MAAM,cAAc,CAAC,mBAAmB,EAAE,CAAC;gBAC3C,MAAM,cAAc,CAAC,UAAU,EAAE,CAAC;gBAClC,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,iCAAM,IAAoB,KAAE,aAAa,EAAE,WAAW,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAG;gBAClJ,OAAO,mCAAmC,CAAC;YAC/C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,YAAY,GAAG,sBAAU,EAAC,KAAK,CAAC;gBACtC,MAAM,IAAI,sBAAa,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;KAAA;IAEK,aAAa,CACf,MAAc;;YAEd,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC;gBACD,MAAM,cAAc,CAAC,aAAa,EAAE;gBACpC,OAAO,8BAA8B,CAAC;YAC1C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,YAAY,GAAG,sBAAU,EAAC,KAAK,CAAC;gBACtC,MAAM,IAAI,sBAAa,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;KAAA;IAEK,cAAc,CAChB,MAAc,EAAE,QAAgB;;YAEhC,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC;gBACD,OAAO,MAAM,cAAc,CAAC,cAAc,CAAC,QAAQ,CAAC;YACxD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,sBAAU,EAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;gBACtD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;KAAA;IAEK,gBAAgB,CAClB,MAAc,EACd,SAAiB,EACjB,KAAa;;YAEb,MAAM,cAAc,GAAG,iBAAe,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC;YAC7D,IAAI,CAAC;gBACD,MAAM,cAAc,CAAC,aAAa,CAAC,SAAS,EAAE,KAAK,CAAC;gBACpD,OAAO,+BAA+B,CAAC;YAC3C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,sBAAU,EAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC;gBACtD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;KAAA;;AAlPQ,0CAAe;AACT,0BAAU,GAAiC,IAAI,GAAG,EAAE;0BAD1D,eAAe;IAD3B,uBAAU,GAAE;IAIJ,8BAAM,EAAC,uBAAU,EAAC,GAAG,EAAE,CAAC,4BAAY,CAAC,CAAC;qCACjB,4BAAY;QACL,2CAAmB;GAL3C,eAAe,CAmP3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5PD,mEAA0C;AAC1C,qFAAkD;AAClD,+EAA6C;AAC7C,mEAAkC;AAClC,2EAA0B;AAC1B,6DAAyB;AACzB,gGAAqD;AACrD,oFAAgC;AAChC,mKAAiF;AACjF,gLAAqG;AACrG,wEAAsD;AACtD,kFAAoD;AAEpD,qGAAsD;AACtD,iFAA6C;AAE7C,MAAM,eAAe;IAQjB,YAAY,aAAqB,EAAE,WAAmB;QAClD,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,IAAI,CAAC,qBAAqB,GAAG,IAAI,8CAAqB,CAAC,kBAAQ,CAAC,KAAK,CAAC,qCAAa,CAAC,IAAI,EAAE,2CAAmB,CAAC,CAAC;QAC/G,IAAI,CAAC,OAAO,GAAG,IAAI,wBAAa,CAAC,aAAa,CAAC,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAGM,MAAM,CAAC,oBAAoB;QAC9B,OAAO,eAAe,CAAC,iBAAiB,CAAC;IAC7C,CAAC;IAEM,MAAM,CAAC,oBAAoB,CAAC,IAA0C;QACzE,eAAe,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAC7C,CAAC;IAEK,UAAU;;YACZ,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/B,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAChC,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,SAAS,CAAC,QAAgB;;YAC5B,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC1D,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAEK,KAAK;;YACP,MAAM,EAAE,GAAa,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC/C,OAAO,EAAE;QACb,CAAC;KAAA;IAEK,YAAY;6DAAC,OAAO,GAAG,IAAI;YAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAc,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;gBAC/F,iBAAiB,EAAE,CAAC;aACvB,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,iBAAQ,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAC5B,MAAM,EAAE,GAAa,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAC/C,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,OAAO,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAO,KAAK,EAAE,EAAE,gDAAG,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAE,IAAI,mBAAU,EAAE,CAAC,CAAC;YACxG,CAAC;YACD,OAAO,IAAI,CAAC,MAAM;QACtB,CAAC;KAAA;IAEK,WAAW;6DAAC,UAA8B,EAAE,QAAgB,CAAC;YAC/D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YACtE,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IACK,UAAU;;YACZ,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YACxC,OAAO,KAAK;QAChB,CAAC;KAAA;IAEK,WAAW,CAAC,KAAa;;YAC3B,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAChE,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACjB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBACtB,IAAI,IAAI,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC;YACH,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEK,eAAe;;YACjB,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,IAAI,GAAa,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACjD,MAAM,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC;YAE3B,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,UAAU,GAAG,CAAC,CAAC;YAEnB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;YACjF,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE,CAAC;gBACnC,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;oBAChB,UAAU,EAAE,CAAC;gBACjB,CAAC;qBAAM,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;oBACvB,UAAU,EAAE,CAAC;gBACjB,CAAC;gBACD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBAC9C,IAAI,oBAAQ,EAAC,IAAI,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC;oBAC/I,UAAU,EAAE,CAAC;gBACjB,CAAC;YACL,CAAC;YAED,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;QAClD,CAAC;KAAA;IAEK,WAAW;6DAAC,OAAO,GAAG,KAAK;YAC7B,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3D,IAAI,gBAAgB,GAAG,CAAC,CAAC;YACzB,IAAI,iBAAiB,GAAG,CAAC,CAAC;YAC1B,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;YAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACzB,KAAK,CAAC,OAAO,CAAC,CAAO,IAAI,EAAE,EAAE;gBACzB,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;oBACjC,IAAI,CAAC;wBACD,MAAM,UAAU,GAAgB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;wBAC3D,MAAM,EAAE,SAAS,EAAE,mBAAmB,EAAE,GAAG,UAAU,CAAC;wBACtD,UAAU,EAAE,CAAC;wBACb,IAAI,CAAC,SAAS,IAAI,CAAC,oBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,YAAY,GAAE,CAAC;4BACnD,gBAAgB,EAAE,CAAC;4BACnB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;wBAChD,CAAC;6BAAM,CAAC;4BACJ,iBAAiB,EAAE,CAAC;wBACxB,CAAC;oBACL,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACb,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,KAAK,CAAC,CAAC,CAAC;oBACnC,CAAC;gBACL,CAAC;YACL,CAAC,EAAC,CAAC;YACH,OAAO;gBACH,gBAAgB,EAAE,UAAU;gBAC5B,gBAAgB;gBAChB,iBAAiB;gBACjB,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;aACxC,CAAC;QACN,CAAC;KAAA;IAEK,YAAY,CAAC,GAAW;;;YAC1B,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,mBAAmB,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;YACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACvC,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBACnC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;gBACnD,IAAI,CAAC;oBACD,MAAM,UAAU,GAAG,MAAM,WAAI,CAAC,MAAM,0CAAE,MAAM,CACxC,IAAI,QAAG,CAAC,QAAQ,CAAC,WAAW,CAAC;wBACzB,OAAO,EAAE,MAAM,WAAI,CAAC,MAAM,0CAAE,SAAS,CAAC,OAAO,CAAC;qBACjD,CAAC,CACL,EAAC;oBACF,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,8BAA8B,EAAE,OAAO,CAAC,CAAC;oBACvE,IAAI,CAAC;wBACD,MAAM,UAAU,GAAgB,MAAM,WAAI,CAAC,MAAM,0CAAE,SAAS,CAAC,OAAO,CAAC,EAAC;wBACtE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,SAAS,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,UAAU,CAAC;wBACzG,MAAM,MAAM,GAAG;4BACX,KAAK;4BACL,EAAE,EAAE,EAAE,CAAC,QAAQ,EAAE;4BACjB,QAAQ;4BACR,SAAS;4BACT,iBAAiB;4BACjB,SAAS;yBACZ,CAAC;wBACF,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,oBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,YAAY,GAAE,CAAC;4BAC9D,MAAM,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC;4BAC7B,IAAI,CAAC;gCACD,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC;gCACrE,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;4BAC1C,CAAC;4BAAC,OAAO,KAAK,EAAE,CAAC;gCACb,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,KAAK,CAAC,CAAC,CAAC;gCAC/B,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;4BACnD,CAAC;wBACL,CAAC;6BAAM,CAAC;4BACJ,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;4BAC9D,wGAAwG;4BACxG,kGAAkG;4BAClG,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;wBAC9C,CAAC;oBACL,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACb,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;oBACzD,CAAC;gBACL,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACb,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;oBACrC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,CAAC;wBAC5F,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;wBACrG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,mBAAa,CAAC,CAAC,CAAC,0CAAE,SAAS,CAAC,CAAC;wBACrE,kGAAkG;wBAClG,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAC;oBAC9C,CAAC;gBACL,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;gBACtD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;gBACjE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;YACtD,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,8BAA8B,CAAC,CAAC;YAC9D,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACd,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gBAC/B,wCAAwC;YAC5C,CAAC;QACL,CAAC;KAAA;IAEK,gBAAgB;;YAClB,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;YAC7E,MAAM,qBAAqB,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;;gBAC7D,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC;oBACtG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAClG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;oBAC3F,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;uBACtF,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;oBACxD,OAAO,IAAI,CAAC;gBAChB,CAAC;qBAAM,CAAC;oBACJ,UAAI,CAAC,MAAM,0CAAE,MAAM,CAAC,IAAI,QAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;oBAC7E,OAAO,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnB,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACvC,CAAC;KAAA;IAEK,QAAQ;;YACV,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC;YAC7E,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAEK,WAAW;;YACb,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;YAC3D,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE,CAAC;gBACvB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;gBAC9C,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9B,CAAC;YACD,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEK,YAAY,CAAC,KAAK;;;YACpB,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC;gBAClB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,QAAQ,EAAE,CAAC;oBAC9C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;oBAC9C,OAAO,CAAC,GAAG,CAAC,4BAA4B,EAAE,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,eAAe,CAAC,iBAAiB,CAAC,CAAC;oBAC7G,IAAI,eAAe,CAAC,iBAAiB,IAAI,IAAI,CAAC,WAAW,MAAK,qBAAe,CAAC,iBAAiB,0CAAE,MAAM,GAAE,CAAC;wBACtG,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;wBAC9C,MAAM,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;wBAC1E,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;wBAC9B,IAAI,CAAC;4BACD,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,0CAA0C,IAAI,UAAU,IAAI,CAAC,WAAW,uBAAuB,CAAC,CAAC;4BAClI,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;wBAClC,CAAC;wBAAC,OAAO,KAAK,EAAE,CAAC;4BACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;wBACtB,CAAC;oBACL,CAAC;yBAAM,CAAC;wBACJ,MAAM,OAAO,GAAG,+BAA+B,OAAO,CAAC,GAAG,CAAC,aAAa,cAAc,CAAC;wBACvF,MAAM,OAAO,GAAG;4BACZ,SAAS,EAAE,gBAAgB;4BAC3B,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI;yBAC7B,CAAC;wBACF,eAAK,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC;6BACvB,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE;wBACnB,CAAC,CAAC;6BACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;4BACb,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,KAAK,CAAC,CAAC;4BAC9B,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,KAAK,CAAC,CAAC;wBAClC,CAAC,CAAC,CAAC;wBACP,MAAM,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;oBACjD,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;KAAA;IAEK,8BAA8B;;YAChC,IAAI,CAAC;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,wBAAwB,EAAE;oBACvC,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,4BAA4B,EAAE;qBACzC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;gBAC5B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,2BAA2B,EAAE;oBAC1C,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,yBAAyB,EAAE;qBACtC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;gBAEzB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,0BAA0B,EAAE;oBACzC,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,4BAA4B,EAAE;qBACzC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;gBAE7B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,8BAA8B,EAAE;oBAC7C,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,4BAA4B,EAAE;qBACzC;iBACJ,CAAC,CACL,CAAC;gBAEF,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,oBAAoB,EAAE;oBACnC,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,yBAAyB,EAAE;qBACtC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;YACnC,CAAC;YACD,OAAO,CAAC,EAAE,CAAC;gBACP,MAAM,CAAC;YACX,CAAC;QACL,CAAC;KAAA;IACK,aAAa,CAAC,SAAS,EAAE,KAAK;;YAChC,IAAI,CAAC;gBACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACnC,IAAI,QAAG,CAAC,OAAO,CAAC,aAAa,CAAC;oBAC1B,SAAS,EAAE,SAAS;oBACpB,QAAQ,EAAE,EAAE;oBACZ,KAAK,EAAE,KAAK;iBACf,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;YAC7C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,KAAK;YACf,CAAC;QACL,CAAC;KAAA;IACK,cAAc,CAAC,YAAY;;YAC7B,IAAI,WAAW,GAAG,EAAE;YACpB,IAAI,QAAQ,GAAG,CAAC,YAAY,IAAI,YAAY,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,CAAC;YACzE,IAAI,SAAS,GAAG,CAAC,CAAC;YAClB,IAAI,QAAQ,KAAK,EAAE,EAAE,CAAC;gBAClB,IAAI,CAAC;oBACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAG,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;oBACnF,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;gBAClD,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;gBACtB,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,OAAO,IAAI,EAAE,CAAC;oBACV,IAAI,CAAC;wBACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACnC,IAAI,QAAG,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE,QAAQ,EAAE,CAAC,CAC9C,CAAC;wBACF,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC;wBACpC,IAAI,MAAM,EAAE,CAAC;4BACT,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAG,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;4BACnF,OAAO,CAAC,GAAG,CAAC,aAAa,QAAQ,yBAAyB,CAAC,CAAC;4BAC5D,WAAW,GAAG,QAAQ;4BACtB,MAAM;wBACV,CAAC;6BAAM,CAAC;4BACJ,QAAQ,GAAG,YAAY,GAAG,SAAS,CAAC;4BACpC,SAAS,EAAE,CAAC;4BACZ,MAAM,mBAAK,EAAC,IAAI,CAAC,CAAC;wBACtB,CAAC;oBACL,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC;wBAC1B,IAAI,KAAK,CAAC,YAAY,IAAI,uBAAuB,EAAE,CAAC;4BAChD,WAAW,GAAG,QAAQ,CAAC;4BACvB,MAAM;wBACV,CAAC;wBACD,QAAQ,GAAG,YAAY,GAAG,SAAS,CAAC;wBACpC,SAAS,EAAE,CAAC;oBAChB,CAAC;gBACL,CAAC;YACL,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,aAAa;;YACf,IAAI,CAAC;gBACD,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,wBAAwB,EAAE;oBACvC,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,4BAA4B,EAAE;qBACzC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;gBAC5B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,2BAA2B,EAAE;oBAC1C,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,yBAAyB,EAAE;qBACtC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;gBAEzB,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,0BAA0B,EAAE;oBACzC,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,4BAA4B,EAAE;qBACzC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC;gBAE7B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,8BAA8B,EAAE;oBAC7C,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,yBAAyB,EAAE;qBACtC;iBACJ,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;gBAC/B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACpB,IAAI,QAAG,CAAC,OAAO,CAAC,UAAU,CAAC;oBACvB,GAAG,EAAE,IAAI,QAAG,CAAC,oBAAoB,EAAE;oBACnC,KAAK,EAAE;wBACH,IAAI,QAAG,CAAC,yBAAyB,EAAE;qBACtC;iBACJ,CAAC,CACL,CAAC;YACN,CAAC;YACD,OAAO,CAAC,EAAE,CAAC;gBACP,MAAM,CAAC;YACX,CAAC;QACL,CAAC;KAAA;IACK,UAAU,CAAC,GAAW,EAAE,QAAgB;;YAC1C,MAAM,QAAQ,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,QAAQ,QAAQ,EAAE,CAAC;YACpC,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAClC,MAAM,MAAM,GAAG,EAAE,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBAC9C,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC3B,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAC7B,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAEK,gBAAgB,CAAC,KAAK;;YACxB,IAAI,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;oBACtC,IAAI,EAAE,IAAI,oBAAU,CAChB,SAAS,EACT,EAAE,CAAC,QAAQ,CACP,KAAK,CACR,CAAC,IAAI,EACN,KAAK,CACR;oBACD,OAAO,EAAE,CAAC;iBACb,CAAC,CAAC;gBACH,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC;gBACpC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC;oBACvD,IAAI,EAAE,IAAI;iBACb,CAAC,CAAC,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;YACtC,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,KAAK;YACf,CAAC;QACL,CAAC;KAAA;IACK,WAAW;;YACb,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,QAAG,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC,CAAC;YAC7E,OAAO,YAAY,CAAC,WAAW;QACnC,CAAC;KAAA;IAEK,MAAM;;YACR,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;gBAC9B,MAAM,WAAW,GAAG,iBAAU,CAAC,WAAW,EAAE,CAAC;gBAC7C,MAAM,YAAY,GAAG;oBACjB,KAAK,EAAE,wBAAwB;oBAC/B,IAAI,EAAE,qBAAqB;oBAC3B,WAAW,EAAE,aAAa;iBAC7B;gBACD,IAAI,CAAC;oBACD,WAAW,CAAC,aAAa,EAAE,CAAC;oBAC5B,MAAM,gBAAgB,GAAG,WAAW,CAAC,GAAS,EAAE;wBAC5C,MAAM,OAAO,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;wBAC1C,IAAI,OAAO,EAAE,CAAC;4BACV,aAAa,CAAC,gBAAgB,CAAC,CAAC;4BAChC,MAAM,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC;gCAClC,eAAe,EAAE,KAAK;gCACtB,KAAK,EAAE,YAAY,CAAC,KAAK;gCACzB,IAAI,EAAE,YAAY,CAAC,IAAI;gCACvB,WAAW,EAAE,YAAY,CAAC,WAAW;gCACrC,iBAAiB,EAAE,CAAO,MAAM,EAAE,EAAE;oCAChC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;oCACzB,OAAO,IAAI,OAAO,CAAC,CAAO,OAAO,EAAE,EAAE;wCACjC,IAAI,KAAK,GAAG,CAAC;wCACb,MAAM,UAAU,GAAG,WAAW,CAAC,GAAS,EAAE;4CACtC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;4CAC7B,KAAK,EAAE;4CACP,MAAM,OAAO,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC;4CAC1C,IAAI,OAAO,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;gDACvB,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;gDACzC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;gDAC3B,IAAI,IAAI,EAAE,CAAC;oDACP,aAAa,CAAC,UAAU,CAAC,CAAC;oDAC1B,WAAW,CAAC,kBAAkB,EAAE;oDAChC,OAAO,CAAC,IAAI,CAAC,CAAC;gDAClB,CAAC;qDAAM,CAAC;oDACJ,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC;gDAC/B,CAAC;4CACL,CAAC;iDAAM,CAAC;gDACJ,aAAa,CAAC,UAAU,CAAC,CAAC;gDAC1B,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;gDAC/B,WAAW,CAAC,kBAAkB,EAAE;gDAChC,OAAO,CAAC,SAAS,CAAC,CAAC;4CACvB,CAAC;wCACL,CAAC,GAAE,KAAK,CAAC,CAAC;oCACd,CAAC,EAAC,CAAC;gCACP,CAAC;gCACD,gBAAgB,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAU,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,EAAC,CAAC;6BAC3F,CAAC;4BACF,OAAO,YAAY;wBACvB,CAAC;oBACL,CAAC,GAAE,IAAI,CAAC,CAAC;gBACb,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;oBACd,sBAAU,EAAC,CAAC,CAAC;gBACjB,CAAC;YACL,CAAC;QACL,CAAC;KAAA;IAEK,aAAa,CAAC,EAAU,EAAE,GAAW,EAAE,OAAe,EAAE,QAAgB;;YAC1E,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,IAAI,oBAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC5E,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACtD,CAAC;KAAA;IAEK,YAAY,CAAC,EAAU,EAAE,GAAW,EAAE,OAAe,EAAE,QAAgB;;YACzE,IAAI,CAAC,IAAI,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;YAC/D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;YACtD,MAAM,IAAI,GAAG,IAAI,oBAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAC5E,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;QACtD,CAAC;KAAA;IAEK,mBAAmB;;;YACrB,IAAI,CAAC;gBACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CACnC,IAAI,QAAG,CAAC,MAAM,CAAC,aAAa,CAAC;oBACzB,MAAM,EAAE,IAAI;iBACf,CAAC,CACL,CAAC;gBACF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;gBACnB,IAAI,MAAM,IAAI,aAAM,CAAC,MAAM,0CAAE,MAAM,IAAG,CAAC,EAAE,CAAC;oBACtC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAChC,IAAI,QAAG,CAAC,MAAM,CAAC,YAAY,CAAC;wBACxB,EAAE,EAAiC,MAAM,CAAC,MAAM;qBACnD,CAAC,CAAC;gBACX,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YAC1C,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,KAAK;YACf,CAAC;QACL,CAAC;KAAA;CACJ;AACD,qBAAe,eAAe,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnkB/B,kDAAkD;AAClD,6EAAkI;AAClI,mJAAiE;AACjE,oKAAyE;AACzE,oKAAyE;AACzE,gFAA+E;AAE/E,yIAAwD;AAIjD,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IACnC,YAA6B,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAIxE,MAAM,CAAS,sBAA8C;;YACjE,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QACnE,CAAC;KAAA;IAkBD,MAAM,CAAU,KAAU;QACxB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IAIK,OAAO;;YACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;QAC9C,CAAC;KAAA;IAMK,OAAO,CAAqB,SAAiB;;YACjD,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACvD,CAAC;KAAA;IAMK,MAAM,CAAqB,SAAiB,EAAU,sBAA8C;;YACxG,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,SAAS,EAAE,sBAAsB,CAAC,CAAC;QAC9E,CAAC;KAAA;IAMK,MAAM,CAAqB,SAAiB;;YAChD,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC;KAAA;IAID,WAAW,CAAqB,SAAiB,EAAU,cAA8B;QACvF,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;YAC9B,MAAM,IAAI,4BAAmB,CAAC,sBAAsB,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,SAAS,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;IACtF,CAAC;IAID,iBAAiB,CAAqB,SAAiB;QACrD,OAAO,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;IACjE,CAAC;IAID,cAAc,CAAqB,SAAiB,EAAU,cAA8B;QAC1F,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,CAAC;YAC9B,MAAM,IAAI,4BAAmB,CAAC,sBAAsB,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;CACF;AAnFY,4DAAwB;AAK7B;IAFL,iBAAI,GAAE;IACN,0BAAY,EAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC;IAC3C,4BAAI,GAAE;;qCAAyB,kDAAsB;;sDAElE;AAkBD;IAjBC,gBAAG,EAAC,QAAQ,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;IACvD,sBAAQ,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC9D,sBAAQ,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC/D,sBAAQ,EAAC,EAAE,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACjE,sBAAQ,EAAC,EAAE,IAAI,EAAE,mBAAmB,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACtE,sBAAQ,EAAC,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAChE,sBAAQ,EAAC,EAAE,IAAI,EAAE,cAAc,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAClE,sBAAQ,EAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC1D,sBAAQ,EAAC,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAC7D,sBAAQ,EAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACpE,sBAAQ,EAAC,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IAClE,sBAAQ,EAAC,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;IACpE,sBAAQ,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC;IAChE,sBAAQ,EAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IAC5D,sBAAQ,EAAC,EAAE,IAAI,EAAE,iBAAiB,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACrE,sBAAQ,EAAC,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACxD,6BAAK,GAAE;;;;sDAGd;AAIK;IAFL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC;;;;uDAGpD;AAMK;IAJL,gBAAG,EAAC,YAAY,CAAC;IACjB,0BAAY,EAAC,EAAE,OAAO,EAAE,oCAAoC,EAAE,CAAC;IAChE,8FAA8F;IAC9F,iEAAiE;;IAClD,6BAAK,EAAC,WAAW,CAAC;;;;uDAEhC;AAMK;IAJL,kBAAK,EAAC,YAAY,CAAC;IACnB,0BAAY,EAAC,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC;IACnE,+GAA+G;IAC/G,iEAAiE;;IACnD,6BAAK,EAAC,WAAW,CAAC;IAAqB,4BAAI,GAAE;;6CAAyB,kDAAsB;;sDAEzG;AAMK;IAJL,mBAAM,EAAC,YAAY,CAAC;IACpB,0BAAY,EAAC,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC;IACnE,0FAA0F;IAC1F,iEAAiE;;IACnD,6BAAK,EAAC,WAAW,CAAC;;;;sDAE/B;AAID;IAFC,iBAAI,EAAC,sBAAsB,CAAC;IAC5B,0BAAY,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;IAC3C,6BAAK,EAAC,WAAW,CAAC;IAAqB,4BAAI,GAAE;;6CAAiB,iCAAc;;2DAKxF;AAID;IAFC,gBAAG,EAAC,6BAA6B,CAAC;IAClC,0BAAY,EAAC,EAAE,OAAO,EAAE,uCAAuC,EAAE,CAAC;IAChD,6BAAK,EAAC,WAAW,CAAC;;;;iEAEpC;AAID;IAFC,mBAAM,EAAC,sBAAsB,CAAC;IAC9B,0BAAY,EAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,CAAC;IAC7C,6BAAK,EAAC,WAAW,CAAC;IAAqB,4BAAI,GAAE;;6CAAiB,iCAAc;;8DAK3F;mCAlFU,wBAAwB;IAFpC,qBAAO,EAAC,iBAAiB,CAAC;IAC1B,uBAAU,EAAC,iBAAiB,CAAC;qCAEwB,8CAAqB;GAD9D,wBAAwB,CAmFpC;;;;;;;;;;;;;;;;;;;;AC9FD,8CAA8C;AAC9C,6EAAwC;AACxC,mFAAkD;AAClD,mJAAiE;AACjE,4JAAuE;AACvE,gKAAqF;AAS9E,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;CAAG;AAAvB,oDAAoB;+BAApB,oBAAoB;IAPhC,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,qCAAa,CAAC,IAAI,EAAE,MAAM,EAAE,2CAAmB,EAAE,CAAC,CAAC;SACvF;QACD,WAAW,EAAE,CAAC,oDAAwB,CAAC;QACvC,SAAS,EAAE,CAAC,8CAAqB,CAAC;KACnC,CAAC;GACW,oBAAoB,CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdpC,+CAA+C;AAC/C,6EAAkF;AAClF,mFAA+C;AAC/C,mEAAiC;AAGjC,gKAAgE;AAGzD,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IAChC,YAC2C,kBAAwC;QAAxC,uBAAkB,GAAlB,kBAAkB,CAAsB;IAC/E,CAAC;IAEC,MAAM,CAAC,sBAA8C;;YACzD,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,kBAAkB,CAAC,sBAAsB,CAAC,CAAC;YAC3E,OAAO,cAAc,CAAC,IAAI,EAAE,CAAC;QAC/B,CAAC;KAAA;IAEK,OAAO;;YACX,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QAC/C,CAAC;KAAA;IAEK,OAAO,CAAC,SAAiB;;YAC7B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC5E,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAEK,MAAM,CAAC,SAAiB,EAAE,sBAA8C;;YAC5E,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CACnE,EAAE,SAAS,EAAE,EACb,sBAAsB,EACtB,EAAE,GAAG,EAAE,IAAI,EAAE,CACd,CAAC,IAAI,EAAE,CAAC;YACT,OAAO,cAAc,CAAC;QACxB,CAAC;KAAA;IAEK,MAAM,CAAC,SAAiB;;YAC5B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QACtF,CAAC;KAAA;IAEK,MAAM,CAAC,MAAW;;YACtB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QACrD,CAAC;KAAA;IAEK,YAAY,CAAC,SAAiB,EAAE,SAAmB;;YACvD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,EAAE;gBAC5E,SAAS,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE;aACxC,CAAC;YACF,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAEK,iBAAiB,CAAC,SAAiB;;YACvC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC5E,IAAI,CAAC,OAAO,EAAE,CAAC;gBACb,OAAO,SAAS,CAAC;YACnB,CAAC;YACD,IAAI,OAAO,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACnC,OAAO,SAAS,CAAC;YACnB,CAAC;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACzE,OAAO,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACxC,CAAC;KAAA;IAEK,cAAc,CAAC,SAAiB,EAAE,QAAgB;;YACtD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,EAAE;gBAC5E,KAAK,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE;aAC/B,CAAC;YACF,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;CACF;AA9DY,sDAAqB;gCAArB,qBAAqB;IADjC,uBAAU,GAAE;IAGR,qCAAW,EAAC,qCAAa,CAAC,IAAI,CAAC;qCAA6B,gBAAK;GAFzD,qBAAqB,CA8DjC;;;;;;;;;;;;;;;;;;;;;;;ACvED,gFAAgD;AAEhD,MAAa,cAAc;CAG1B;AAHD,wCAGC;AADG;IADC,yBAAW,EAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC;;iDACX;;;;;;;;;;;;;;;;;;;;;;;ACJvB,qDAAqD;AACrD,gFAA8C;AAE9C,MAAa,sBAAsB;CA6ClC;AA7CD,wDA6CC;AA3CC;IADC,yBAAW,GAAE;;yDACI;AAGlB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;yDACb;AAGnB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;2DACV;AAGrB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;;iEACJ;AAG1B;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;0DACZ;AAGpB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;4DACT;AAGtB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;+DACN;AAG1B;IADC,yBAAW,GAAE;;qDACA;AAGd;IADC,yBAAW,GAAE;;wDACG;AAGjB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;;+DACH;AAGzB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;;6DACL;AAGvB;IADC,yBAAW,EAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;;6DACpB;AAGzB;IADC,yBAAW,EAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;;yDACxB;AAGrB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;sDACf;AAGjB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,IAAI,EAAG,QAAQ,EAAE,KAAK,EAAC,CAAC;;yDAC5B;;;;;;;;;;;;;;AC/CtB,qDAAqD;AACrD,gFAA8C;AAC9C,gKAAqE;AAErE,MAAa,sBAAuB,SAAQ,yBAAW,EAAC,kDAAsB,CAAC;CAAG;AAAlF,wDAAkF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJlF,mFAA+D;AAC/D,mEAAoC;AACpC,+EAAqC;AAG9B,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,mBAAQ;CA6C1C;AA7CY,sCAAa;AAExB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;gDACrB;AAGlB;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;gDACN;AAGnB;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;kDACH;AAGrB;IADC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;;wDAC/B;AAG1B;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;iDACL;AAGpB;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;mDACH;AAGtB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;4CACX;AAGd;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAG,OAAO,EAAE,IAAI,EAAC,CAAC;;+CACxB;AAGjB;IADC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;;sDACjC;AAGxB;IADC,mBAAI,EAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;;oDACnC;AAGtB;IADC,mBAAI,EAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;;oDACd;AAGxB;IADC,mBAAI,EAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;;gDAClB;AAGpB;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;6CACT;AAGhB;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;;gDACL;AAGnB;IADC,mBAAI,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;;sDACA;wBA5Cd,aAAa;IADzB,qBAAM,EAAC,EAAE,UAAU,EAAE,gBAAgB,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAE,mCAAmC;GACrG,aAAa,CA6CzB;AAEY,2BAAmB,GAAG,wBAAa,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpD/E,6EAAsI;AACtI,mFAA+C;AAC/C,mEAAiC;AAK1B,IAAM,qBAAqB,GAA3B,MAAM,qBAAqB;IAC9B,YAAkE,mBAA0C;QAA1C,wBAAmB,GAAnB,mBAAmB,CAAuB;IACxG,CAAC;IAEC,MAAM,CAAC,eAAgC;;YACzC,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;YAClE,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;KAAA;IAEK,OAAO;;YACT,MAAM,OAAO,GAAa,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;YACvE,OAAO,OAAO;QAClB,CAAC;KAAA;IAEK,OAAO,CAAC,MAAc;;YACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACvE,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc,EAAE,eAAgC;;YACzD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACjI,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc;;YACvB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACvF,IAAI,CAAC,WAAW,EAAE,CAAC;gBACf,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,MAAM,aAAa,CAAC,CAAC;YACxE,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAW;;YACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACnB,MAAM,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACpE,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QACxD,CAAC;KAAA;IAEK,YAAY,CAAC,KAAU;;YACzB,IAAI,CAAC;gBACD,IAAI,CAAC,KAAK,EAAE,CAAC;oBACT,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;gBACvD,CAAC;gBACD,OAAO,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YAC7D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,IAAI,qCAA4B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC;KAAA;CACJ;AAnDY,sDAAqB;gCAArB,qBAAqB;IADjC,uBAAU,GAAE;IAEI,qCAAW,EAAC,+BAA+B,CAAC;qCAA8B,gBAAK;GADnF,qBAAqB,CAmDjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1DD,6EAA0F;AAC1F,gFAAiE;AAEjE,2JAAmE;AACnE,8IAAmE;AACnE,8IAAmE;AAI5D,IAAM,wBAAwB,GAA9B,MAAM,wBAAwB;IACnC,YAA6B,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAMxE,MAAM,CAAS,eAAgC;;YACnD,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC5D,CAAC;KAAA;IAKK,MAAM,CAAU,KAAsB;;YAC1C,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC;KAAA;IAMK,OAAO;;YACX,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;QAC9C,CAAC;KAAA;IAMK,OAAO,CAAkB,MAAc;;YAC3C,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpD,CAAC;KAAA;IAMK,MAAM,CAAkB,MAAc,EAAU,eAAgC;;YACpF,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QACpE,CAAC;KAAA;IAMK,MAAM,CAAkB,MAAc;;YAC1C,OAAO,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnD,CAAC;KAAA;IAQK,YAAY,CAAS,KAAa;;YACtC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YAC9D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,KAAK,CAAC,CAAE,kDAAkD;YAClE,CAAC;QACH,CAAC;KAAA;CACF;AA/DY,4DAAwB;AAO7B;IAJL,iBAAI,GAAE;IACN,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9C,4FAA4F;IAC5F,0DAA0D;;IAC5C,4BAAI,GAAE;;qCAAkB,mCAAe;;sDAEpD;AAKK;IAHL,gBAAG,EAAC,QAAQ,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9C,8EAA8E;;IAChE,6BAAK,GAAE;;qCAAQ,mCAAe;;sDAE3C;AAMK;IAJL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC/C,qEAAqE;IACrE,0DAA0D;;;;;uDAGzD;AAMK;IAJL,gBAAG,EAAC,SAAS,CAAC;IACd,0BAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;IACjD,qEAAqE;IACrE,oEAAoE;;IACrD,6BAAK,EAAC,QAAQ,CAAC;;;;uDAE7B;AAMK;IAJL,kBAAK,EAAC,SAAS,CAAC;IAChB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACpD,4FAA4F;IAC5F,oEAAoE;;IACtD,6BAAK,EAAC,QAAQ,CAAC;IAAkB,4BAAI,GAAE;;;;sDAEpD;AAMK;IAJL,mBAAM,EAAC,SAAS,CAAC;IACjB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACpD,4FAA4F;IAC5F,oEAAoE;;IACtD,6BAAK,EAAC,QAAQ,CAAC;;;;sDAE5B;AAQK;IANL,iBAAI,EAAC,OAAO,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC5D,4EAA4E;IAC5E,8DAA8D;IAC9D,sEAAsE;;IACrE,qBAAO,EAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;IACJ,4BAAI,GAAE;;;;4DAMzB;mCA9DU,wBAAwB;IAFpC,qBAAO,EAAC,kBAAkB,CAAC;IAC3B,uBAAU,EAAC,iBAAiB,CAAC;qCAEwB,gDAAqB;GAD9D,wBAAwB,CA+DpC;;;;;;;;;;;;;;;;;;;;ACxED,6EAAoD;AACpD,mFAAkD;AAClD,0IAAgE;AAEhE,2JAAmE;AACnE,iKAAwE;AAUjE,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;CAAI;AAAxB,oDAAoB;+BAApB,oBAAoB;IARhC,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,EAAE,iBAAiB,EAAE,IAAI,EAAE,+BAA+B,EAAE,MAAM,EAAE,4BAAY,EAAE,CAAC,CAAC;YACnI,mCAAmC;SACpC;QACD,WAAW,EAAE,CAAC,qDAAwB,CAAC;QACvC,SAAS,EAAE,CAAC,gDAAqB,CAAC;QAClC,OAAO,EAAC,CAAC,gDAAqB,CAAC;KAChC,CAAC;GACW,oBAAoB,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfrC,6EAA0F;AAC1F,gFAAiE;AACjE,gJAA8D;AAC9D,iKAAuE;AACvE,oKAAwE;AAKjE,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;IACjC,YAA6B,aAAkC;QAAlC,kBAAa,GAAb,aAAa,CAAqB;IAAG,CAAC;IAI7D,MAAM,CAAS,eAAsC;;YACzD,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACpD,CAAC;KAAA;IAIK,MAAM,CAAU,KAA4B;;YAChD,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;KAAA;IAIK,OAAO;;YACX,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QACtC,CAAC;KAAA;IAIK,OAAO,CAAkB,MAAc;;YAC3C,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC5C,CAAC;KAAA;IAIK,MAAM,CAAkB,MAAc,EAAU,eAAsC;;YAC1F,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,EAAE,eAAe,CAAC,CAAC;QAC5D,CAAC;KAAA;IAIK,MAAM,CAAkB,MAAc;;YAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC;KAAA;IAKK,YAAY,CAAS,KAAa;;YACtC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,KAAK,CAAC,CAAE,kDAAkD;YAClE,CAAC;QACH,CAAC;KAAA;CACF;AAjDY,wDAAsB;AAK3B;IAFL,iBAAI,GAAE;IACN,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAChC,4BAAI,GAAE;;qCAAkB,gDAAqB;;oDAE1D;AAIK;IAFL,gBAAG,EAAC,QAAQ,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAChC,6BAAK,GAAE;;qCAAQ,iDAAqB;;oDAEjD;AAIK;IAFL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;;;;qDAG9C;AAIK;IAFL,gBAAG,EAAC,SAAS,CAAC;IACd,0BAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;IAClC,6BAAK,EAAC,QAAQ,CAAC;;;;qDAE7B;AAIK;IAFL,kBAAK,EAAC,SAAS,CAAC;IAChB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACtC,6BAAK,EAAC,QAAQ,CAAC;IAAkB,4BAAI,GAAE;;;;oDAEpD;AAIK;IAFL,mBAAM,EAAC,SAAS,CAAC;IACjB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACtC,6BAAK,EAAC,QAAQ,CAAC;;;;oDAE5B;AAKK;IAHL,iBAAI,EAAC,OAAO,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC3D,qBAAO,EAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;IACJ,4BAAI,GAAE;;;;0DAMzB;iCAhDU,sBAAsB;IAFlC,qBAAO,EAAC,gBAAgB,CAAC;IACzB,uBAAU,EAAC,eAAe,CAAC;qCAEkB,2CAAmB;GADpD,sBAAsB,CAiDlC;;;;;;;;;;;;;;;;;;;;AC1DD,6EAAwC;AACxC,mFAAkD;AAClD,gJAA8D;AAC9D,yJAAoE;AACpE,6JAAoE;AAQ7D,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;CAAI;AAAtB,gDAAkB;6BAAlB,kBAAkB;IAN9B,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,oBAAoB,EAAE,MAAM,EAAE,yCAAkB,EAAE,UAAU,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;QAC/H,WAAW,EAAE,CAAC,iDAAsB,CAAC;QACrC,SAAS,EAAE,CAAC,2CAAmB,CAAC;QAChC,OAAO,EAAE,CAAC,2CAAmB,CAAC;KAC/B,CAAC;GACW,kBAAkB,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZnC,6EAAkH;AAClH,mFAA+C;AAC/C,mEAAiC;AAK1B,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAC5B,YAAuD,iBAAsC;QAAtC,sBAAiB,GAAjB,iBAAiB,CAAqB;IAAI,CAAC;IAE5F,MAAM,CAAC,YAAmC;;YAC5C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YACzD,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;QAC1B,CAAC;KAAA;IAEK,OAAO;;YACT,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QAChD,CAAC;KAAA;IAEK,OAAO,CAAC,MAAc;;YACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACrE,IAAI,CAAC,IAAI,EAAE,CAAC;gBACR,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,MAAM,YAAY,CAAC,CAAC;YAChF,CAAC;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc,EAAE,IAA2B;;YACpD,OAAO,IAAI,CAAC,KAAK,CAAC;YAClB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC/G,IAAI,CAAC,YAAY,EAAE,CAAC;gBAChB,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,MAAM,YAAY,CAAC,CAAC;YAChF,CAAC;YACD,OAAO,YAAY,CAAC;QACxB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc;;YACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACzE,IAAI,MAAM,CAAC,YAAY,KAAK,CAAC,EAAE,CAAC;gBAC5B,MAAM,IAAI,0BAAiB,CAAC,4BAA4B,MAAM,YAAY,CAAC,CAAC;YAChF,CAAC;QACL,CAAC;KAAA;IACK,MAAM,CAAC,MAAW;;YACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACnB,MAAM,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACpE,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QACtD,CAAC;KAAA;IAEK,YAAY,CAAC,KAAU;;YACzB,IAAI,CAAC;gBACD,IAAI,CAAC,KAAK,EAAE,CAAC;oBACT,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;gBACvD,CAAC;gBACD,OAAO,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3D,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,IAAI,qCAA4B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC;KAAA;CACJ;AAtDY,kDAAmB;8BAAnB,mBAAmB;IAD/B,uBAAU,GAAE;IAEI,qCAAW,EAAC,oBAAoB,CAAC;qCAA4B,gBAAK;GADtE,mBAAmB,CAsD/B;;;;;;;;;;;;;;;;;;;;;;;AC7DD,gFAA8C;AAC9C,wFAA4C;AAE5C,MAAa,qBAAqB;CAmCjC;AAnCD,sDAmCC;AA7BU;IALR,yBAAW,EAAC;QACX,WAAW,EAAE,2BAA2B;QACxC,OAAO,EAAE,WAAW;KACrB,CAAC;IACD,8BAAQ,GAAE;;mDACW;AAOb;IALR,yBAAW,EAAC;QACX,WAAW,EAAE,6BAA6B;QAC1C,OAAO,EAAE,aAAa;KACvB,CAAC;IACD,8BAAQ,GAAE;;qDACa;AAOf;IALR,yBAAW,EAAC;QACX,WAAW,EAAE,qBAAqB;QAClC,OAAO,EAAE,YAAY;KACtB,CAAC;IACD,8BAAQ,GAAE;;0DACkB;AAOpB;IALR,yBAAW,EAAC;QACX,WAAW,EAAE,qBAAqB;QAClC,OAAO,EAAE,YAAY;KACtB,CAAC;IACD,8BAAQ,GAAE;;4DACoB;AAOtB;IALR,yBAAW,EAAC;QACX,WAAW,EAAE,oBAAoB;QACjC,OAAO,EAAE,YAAY;KACtB,CAAC;IACD,8BAAQ,GAAE;;sDACc;;;;;;;;;;;;;;;;;;;;;;;ACrC3B,gFAAsD;AACtD,wFAAkE;AAElE,MAAa,qBAAqB;CAwCjC;AAxCD,sDAwCC;AAjCU;IANR,iCAAmB,EAAC;QACnB,WAAW,EAAE,2BAA2B;QACxC,OAAO,EAAE,WAAW;KACrB,CAAC;IACD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;mDACY;AAQd;IANR,iCAAmB,EAAC;QACnB,WAAW,EAAE,6BAA6B;QAC1C,OAAO,EAAE,aAAa;KACvB,CAAC;IACD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;qDACc;AAQhB;IANR,iCAAmB,EAAC;QACnB,WAAW,EAAE,iCAAiC;QAC9C,OAAO,EAAE,YAAY;KACtB,CAAC;IACD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;0DACmB;AAQrB;IANR,iCAAmB,EAAC;QACnB,WAAW,EAAE,mCAAmC;QAChD,OAAO,EAAE,YAAY;KACtB,CAAC;IACD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;4DACqB;AAQvB;IANR,iCAAmB,EAAC;QACnB,WAAW,EAAE,oBAAoB;QACjC,OAAO,EAAE,YAAY;KACtB,CAAC;IACD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;sDACe;;;;;;;;;;;;;;;;;;;;;;;AC1C5B,mFAA+D;AAC/D,mEAAoC;AAG7B,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,mBAAQ;CAkBzC;AAlBY,oCAAY;AAEvB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;0CAC1B;AAGb;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;;4CACxB;AAGf;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;0CACZ;AAGb;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;6CACT;AAGhB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAG,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,CAAC;;2CACzC;AAGf;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAC,CAAC;;8CACvB;uBAjBN,YAAY;IADxB,qBAAM,EAAC,EAAE,UAAU,EAAE,eAAe,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAE,mCAAmC;GACpG,YAAY,CAkBxB;AAEY,0BAAkB,GAAG,wBAAa,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxB7E,6EAA0F;AAC1F,gFAAiE;AACjE,oHAAiD;AACjD,qIAA0D;AAE1D,qIAA0D;AAC1D,kIAA6D;AAItD,IAAM,gBAAgB,GAAtB,MAAM,gBAAgB;IAC3B,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;IAAI,CAAC;IAMxD,MAAM,CAAS,eAAgC;;YACnD,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACpD,CAAC;KAAA;IAKK,MAAM,CAAU,KAAsB;;YAC1C,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;KAAA;IAMK,OAAO;;YACX,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QACtC,CAAC;KAAA;IAKK,UAAU;;YACd,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;QACzC,CAAC;KAAA;IAMK,OAAO,CAAoB,QAAgB;;YAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC9C,CAAC;KAAA;IAMK,WAAW,CAAoB,QAAgB,EAAW,mBAAwC;;YACtG,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,EAAE,mBAAmB,CAAC,CAAC;QACvE,CAAC;KAAA;IAMK,MAAM,CAAoB,QAAgB,EAAU,eAAgC;;YACxF,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAC9D,CAAC;KAAA;IAMK,MAAM,CAAoB,QAAgB;;YAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;KAAA;IAQK,YAAY,CAAS,KAAa;;YACtC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACtD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,KAAK,CAAC,CAAE,kDAAkD;YAClE,CAAC;QACH,CAAC;KAAA;CACF;AA9EY,4CAAgB;AAOrB;IAJL,iBAAI,GAAE;IACN,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9C,4FAA4F;IAC5F,0DAA0D;;IAC5C,4BAAI,GAAE;;qCAAkB,mCAAe;;8CAEpD;AAKK;IAHL,gBAAG,EAAC,QAAQ,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9C,8EAA8E;;IAChE,6BAAK,GAAE;;qCAAQ,mCAAe;;8CAE3C;AAMK;IAJL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC/C,qEAAqE;IACrE,0DAA0D;;;;;+CAGzD;AAKK;IAJL,gBAAG,EAAC,SAAS,CAAC;IACd,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC/C,qEAAqE;IACrE,0DAA0D;;;;;kDAGzD;AAMK;IAJL,gBAAG,EAAC,WAAW,CAAC;IAChB,0BAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;IACjD,qEAAqE;IACrE,oEAAoE;;IACrD,6BAAK,EAAC,UAAU,CAAC;;;;+CAE/B;AAMK;IAJL,gBAAG,EAAC,uBAAuB,CAAC;IAC5B,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC/C,qEAAqE;IACrE,oEAAoE;;IACjD,6BAAK,EAAC,UAAU,CAAC;IAAoB,6BAAK,GAAE;;6CAAsB,sCAAmB;;mDAEvG;AAMK;IAJL,kBAAK,EAAC,WAAW,CAAC;IAClB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACpD,4FAA4F;IAC5F,oEAAoE;;IACtD,6BAAK,EAAC,UAAU,CAAC;IAAoB,4BAAI,GAAE;;;;8CAExD;AAMK;IAJL,mBAAM,EAAC,WAAW,CAAC;IACnB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACpD,4FAA4F;IAC5F,oEAAoE;;IACtD,6BAAK,EAAC,UAAU,CAAC;;;;8CAE9B;AAQK;IANL,iBAAI,EAAC,OAAO,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC5D,4EAA4E;IAC5E,8DAA8D;IAC9D,sEAAsE;;IACrE,qBAAO,EAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;IACJ,4BAAI,GAAE;;;;oDAMzB;2BA7EU,gBAAgB;IAF5B,qBAAO,EAAC,SAAS,CAAC;IAClB,uBAAU,EAAC,QAAQ,CAAC;qCAEyB,8BAAa;GAD9C,gBAAgB,CA8E5B;;;;;;;;;;;;;;;;;;;;ACxFD,6EAAoD;AACpD,mFAAkD;AAClD,iIAA+D;AAC/D,oHAAiD;AACjD,6HAAuD;AACvD,kIAA6D;AAC7D,6JAA4E;AAC5E,mHAAoD;AACpD,uKAAkF;AAa3E,IAAM,YAAY,GAAlB,MAAM,YAAY;CAAI;AAAhB,oCAAY;uBAAZ,YAAY;IAXxB,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,sBAAM,CAAC,IAAI,EAAE,MAAM,EAAE,4BAAY,EAAE,CAAC,CAAC;YAChF,uBAAU,EAAC,GAAE,EAAE,iCAAc,CAAC;YAC9B,yCAAkB;YAClB,uBAAU,EAAC,GAAE,EAAE,2BAAW,CAAC;YAC3B,uBAAU,EAAC,GAAE,EAAE,8CAAoB,CAAC;SACrC;QACD,WAAW,EAAE,CAAC,oCAAgB,CAAC;QAC/B,SAAS,EAAE,CAAC,8BAAa,CAAC;QAC1B,OAAO,EAAE,CAAC,8BAAa,CAAC;KACzB,CAAC;GACW,YAAY,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrB7B,uIAAiE;AACjE,6EAAsI;AACtI,mFAA+C;AAC/C,mEAAiC;AACjC,iIAAiE;AAGjE,gKAA8E;AAC9E,kFAAyC;AACzC,sHAAsD;AACtD,6KAAqF;AACrF,wEAA0E;AAGnE,IAAM,aAAa,GAAnB,MAAM,aAAa;IAEtB,YAAsC,WAA0C,EAE5E,eAAwC,EAChC,mBAAwC,EAEhD,YAAkC,EAElC,qBAAoD;QAPV,gBAAW,GAAX,WAAW,CAAuB;QAEpE,oBAAe,GAAf,eAAe,CAAiB;QAChC,wBAAmB,GAAnB,mBAAmB,CAAqB;QAExC,iBAAY,GAAZ,YAAY,CAAc;QAE1B,0BAAqB,GAArB,qBAAqB,CAAuB;QARhD,eAAU,GAAwB,IAAI,GAAG,EAAE,CAAC;IAShD,CAAC;IAEC,MAAM,CAAC,eAAgC;;YACzC,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;YAC1D,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;KAAA;IAEK,OAAO;;YACT,MAAM,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI;YAC5C,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;YAC5B,IAAI,eAAe,GAAG,CAAC,EAAE,CAAC;gBACtB,MAAM,OAAO,GAAa,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;gBACjE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;oBAC3B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC;gBAChD,CAAC;gBACD,OAAO,OAAO;YAClB,CAAC;iBAAM,CAAC;gBACJ,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;YAC/C,CAAC;QACL,CAAC;KAAA;IAEK,OAAO,CAAC,QAAgB;;YAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC;YAC5C,IAAI,MAAM,EAAE,CAAC;gBACT,OAAO,MAAM,CAAC;YAClB,CAAC;iBAAM,CAAC;gBACJ,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;gBACjE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,EAAE,CAAC;oBACR,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,QAAQ,aAAa,CAAC,CAAC;gBAC1E,CAAC;gBACD,OAAO,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;KAAA;IAEK,UAAU;;YACZ,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;YAC3B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE,CAAC;gBAC3B,MAAM,IAAI,qBAAa,MAAM,CAAE;gBAC/B,oBAAoB;gBACpB,4BAA4B;gBAC5B,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;YACvG,CAAC;QACL,CAAC;KAAA;IACK,MAAM,CAAC,QAAgB,EAAE,eAAgC;;YAC3D,OAAO,eAAe,CAAC,KAAK,CAAC;YAC7B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3H,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAC3C,IAAI,CAAC,WAAW,EAAE,CAAC;gBACf,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,QAAQ,aAAa,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,MAAM,CAAC,QAAgB;;YACzB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YACjF,IAAI,CAAC,WAAW,EAAE,CAAC;gBACf,MAAM,IAAI,0BAAiB,CAAC,mBAAmB,QAAQ,aAAa,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAW;;YACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACnB,MAAM,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACpE,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QAChD,CAAC;KAAA;IAEK,WAAW,CAAC,QAAgB,EAAE,mBAAwC;;YACxE,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACpD,MAAM,oBAAoB,GAAG,cAAc,CAAC,MAAM;YAClD,MAAM,kBAAkB,GAAG,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,oBAAoB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACjG,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,oBAAoB,EAAE,KAAK,EAAE,IAAI,CAAC;YAC1E,IAAI,mBAAmB,CAAC,WAAW,EAAE,CAAC;gBAClC,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;gBACpE,MAAM,mBAAK,EAAC,IAAI,CAAC;gBACjB,MAAM,IAAI,CAAC,eAAe,CAAC,8BAA8B,CAAC,oBAAoB,CAAC;gBAC/E,MAAM,mBAAK,EAAC,IAAI,CAAC;gBACjB,MAAM,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,oBAAoB,CAAC;YACxE,CAAC;YAED,MAAM,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAChE,IAAI,mBAAmB,CAAC,UAAU,EAAE,CAAC;gBACjC,MAAM,aAAa,GAAG,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,mBAAmB,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC3H,MAAM,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC;oBAClC,MAAM,EAAE,oBAAoB;oBAC5B,WAAW,EAAE,KAAK;oBAClB,aAAa;oBACb,OAAO,EAAE,kBAAkB,CAAC,OAAO;oBACnC,IAAI,EAAE,kBAAkB,CAAC,IAAI;iBAChC,CAAC;YACN,CAAC;YAED,MAAM,KAAK,GAAG,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;YACvC,MAAM,eAAe,GAAG,CAAC,MAAM,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAChF,IAAI,eAAe,EAAE,CAAC;gBAClB,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,EAAE,MAAM,EAAE,eAAe,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC;gBACvF,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;gBAChE,MAAM,QAAQ,GAAG,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC5D,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC/D,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC,MAAM,EAAE,GAAG,QAAQ,OAAO,CAAC,CAAC;gBAC9G,MAAM,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,iBAAiB,EAAE,aAAa,eAAe,EAAE,CAAC,CAAC;YACzH,CAAC;YACD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,oBAAoB,CAAC;YAC1E,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC;YACvF,IAAI,cAAc,EAAE,CAAC;gBACjB,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC;YACtG,CAAC;iBAAM,CAAC;gBACJ,MAAM,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC;YACzD,CAAC;QACL,CAAC;KAAA;IAEK,YAAY,CAAC,OAAe,EAAE,MAAc,EAAE,QAAgB,EAAE,QAAgB;;YAClF,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC3F,IAAI,kCAAsB,EAAC,QAAQ,CAAC,IAAI,GAAG,EAAE,CAAC;gBAC1C,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;gBAC1C,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC;KAAA;IAEK,kBAAkB,CAAC,WAAW;;YAChC,IAAI,CAAC;gBACD,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBACzC,MAAM,mBAAK,EAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,QAAQ,GAAG,MAAM,4BAAgB,EAAC,6CAA6C,WAAW,UAAU,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;gBACzI,IAAI,QAAQ,EAAE,CAAC;oBACX,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,QAAQ,CAAC,CAAC;oBAChD,0HAA0H;gBAC9H,CAAC;qBAAM,CAAC;oBACJ,OAAO,CAAC,GAAG,CAAC,uBAAuB,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAC/D,MAAM,mBAAK,EAAC,IAAI,CAAC,CAAC;oBAClB,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;gBAC/C,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;YACtB,CAAC;QACL,CAAC;KAAA;IAEK,YAAY,CAAC,KAAU;;YACzB,IAAI,CAAC;gBACD,IAAI,CAAC,KAAK,EAAE,CAAC;oBACT,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;gBACvD,CAAC;gBACD,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YACrD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACb,MAAM,IAAI,qCAA4B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC;KAAA;CACJ;AAnKY,sCAAa;wBAAb,aAAa;IADzB,uBAAU,GAAE;IAGI,qCAAW,EAAC,sBAAM,CAAC,IAAI,CAAC;IAChC,8BAAM,EAAC,uBAAU,EAAC,GAAG,EAAE,CAAC,kCAAe,CAAC,CAAC;IAGzC,8BAAM,EAAC,uBAAU,EAAC,GAAG,EAAE,CAAC,4BAAY,CAAC,CAAC;IAEtC,8BAAM,EAAC,uBAAU,EAAC,GAAG,EAAE,CAAC,gDAAqB,CAAC,CAAC;qCANO,gBAAK;QAEnC,kCAAe;QACX,2CAAmB;QAE1B,4BAAY;QAEH,gDAAqB;GAT/C,aAAa,CAmKzB;;;;;;;;;;;;;;;;;;;;;;;ACjLD,gFAA8C;AAE9C,MAAa,eAAe;CAuC3B;AAvCD,0CAuCC;AArCY;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;;oDAC7D;AAGpB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;;+CACrD;AAGf;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC;;6CACrE;AAGb;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC;;6CACrD;AAGb;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;;+CAC3D;AAGf;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;;iDACnD;AAGjB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;;6CACvE;AAGb;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;;gDACrD;AAGhB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;;iDACpD;AAGjB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;;iDACjD;AAGjB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;;kDACpE;AAGlB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;;oDACrD;AAGpB;IADR,yBAAW,EAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,kCAAkC,EAAE,CAAC;;gDAC/D;;;;;;;;;;;;;;;;;;;;;;;ACxC7B,gFAAsD;AACtD,8FAAiE;AAEjE,MAAa,eAAe;CAuC3B;AAvCD,0CAuCC;AApCG;IAFC,iCAAmB,EAAC,EAAE,WAAW,EAAE,yBAAyB,EAAE,CAAC;IAC/D,iCAAS,EAAC,CAAC,EAAE,KAAK,EAAqB,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAG,WAAW,EAAE,CAAC;;iDACvD;AAIlB;IAFC,iCAAmB,EAAC,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IAChE,iCAAS,EAAC,CAAC,EAAE,KAAK,EAAqB,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAG,WAAW,EAAE,CAAC;;+CACzD;AAGhB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,4BAA4B,EAAE,CAAC;;oDAC9C;AAGrB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;;6CAC7C;AAGd;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;;6CAC7C;AAGd;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,4BAA4B,EAAE,CAAC;;+CACnD;AAGhB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC;;iDAC7C;AAGlB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,yBAAyB,EAAE,CAAC;;6CAClD;AAGd;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;;mDAC7C;AAGpB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;;kDACxC;AAInB;IAFC,iCAAmB,EAAC,EAAE,WAAW,EAAE,4BAA4B,EAAE,CAAC;IAClE,iCAAS,EAAC,CAAC,EAAE,KAAK,EAAqB,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAG,WAAW,EAAE,CAAC;;oDACpD;AAGrB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oCAAoC,EAAE,CAAC;;gDAC1D;;;;;;;;;;;;;;;;;;;;;;;ACzCrB,gFAAsD;AACtD,wFAA4E;AAE5E,MAAa,mBAAmB;IAAhC;QAII,SAAI,GAAY,CAAC,CAAC;QAKlB,eAAU,GAAa,IAAI,CAAC;QAU5B,gBAAW,GAAa,IAAI,CAAC;IACjC,CAAC;CAAA;AApBD,kDAoBC;AAhBG;IAHC,iCAAmB,GAAE;IACrB,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;iDACO;AAKlB;IAHC,iCAAmB,GAAE;IACrB,gCAAU,GAAE;IACZ,+BAAS,GAAE;;uDACgB;AAK5B;IAHC,iCAAmB,GAAE;IACrB,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;mDACK;AAKhB;IAHC,iCAAmB,GAAE;IACrB,gCAAU,GAAE;IACZ,+BAAS,GAAE;;wDACiB;;;;;;;;;;;;;;;;;;;;;;;ACtBjC,mFAA+D;AAC/D,gFAA8C;AAC9C,mEAAoC;AAK7B,IAAM,MAAM,GAAZ,MAAM,MAAO,SAAQ,mBAAQ;CAoDnC;AApDY,wBAAM;AAGf;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IACzF,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACL;AAIpB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IAC5E,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;sCACV;AAIf;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC;IAC1F,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;oCACZ;AAIb;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC;IAC1E,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;oCACZ;AAIb;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IAClF,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;sCACV;AAIf;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IAC5E,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;wCACR;AAIjB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAC5F,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;oCACZ;AAIb;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;IACtE,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;uCACT;AAIhB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IAC7E,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;wCACR;AAIjB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAC1E,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;wCACR;AAIjB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,iCAAiC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;IAC9F,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;yCACP;AAIlB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,cAAc,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IACjF,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACL;AAIpB;IAFC,yBAAW,EAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,kCAAkC,EAAE,CAAC;IACvF,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;uCACT;iBAnDP,MAAM;IADlB,qBAAM,EAAC,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;GACzD,MAAM,CAoDlB;AAEY,oBAAY,GAAG,wBAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DjE,6EAAqE;AACrE,gFAAiE;AACjE,8IAA+D;AAIxD,IAAM,uBAAuB,GAA7B,MAAM,uBAAuB;IAClC,YAA6B,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;IAAG,CAAC;IAIrE,OAAO;;YACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;QAC7C,CAAC;KAAA;IAKK,MAAM,CAAU,eAAoB;;YACxC,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAE,eAAe,CAAC,CAAC;QAC5D,CAAC;KAAA;CAEF;AAhBY,0DAAuB;AAK5B;IAFL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;;;;sDAGnD;AAKK;IAHL,kBAAK,GAAE;IACP,0BAAY,EAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,CAAC;IACjD,qBAAO,EAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;IACT,4BAAI,GAAE;;;;qDAEpB;kCAdU,uBAAuB;IAFnC,qBAAO,EAAC,eAAe,CAAC;IACxB,uBAAU,EAAC,eAAe,CAAC;qCAEyB,4CAAoB;GAD5D,uBAAuB,CAgBnC;;;;;;;;;;;;;;;;;;;;ACtBD,6EAAwC;AACxC,mFAAkD;AAClD,uJAAqE;AACrE,8IAA+D;AAC/D,2IAA6D;AAStD,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;CAAI;AAAvB,kDAAmB;8BAAnB,mBAAmB;IAP/B,mBAAM,EAAC;QACJ,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC;oBACjC,IAAI,EAAE,qBAAqB,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,EAAE,0CAAmB;iBACxF,CAAC,CAAC,CAAC;QACJ,WAAW,EAAE,CAAC,kDAAuB,CAAC;QACtC,SAAS,EAAE,CAAC,4CAAoB,CAAC;KACpC,CAAC;GACW,mBAAmB,CAAI;;;;;;;;;;;;;;;;;;;;;;;ACbpC,mFAAyD;AACzD,oFAA8C;AAKvC,IAAM,aAAa,GAAnB,MAAM,aAAa;CAAG;AAAhB,sCAAa;wBAAb,aAAa;IADzB,qBAAM,EAAC,EAAC,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAC,MAAM,EAAE,KAAK,EAAE,CAAC;GAC/C,aAAa,CAAG;AAEhB,2BAAmB,GAAG,wBAAa,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;AAC/E,2BAAmB,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACT/D,6EAA+D;AAC/D,mFAA+C;AAC/C,mEAAiC;AAI1B,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC7B,YAAwD,kBAAwC;QAAxC,uBAAkB,GAAlB,kBAAkB,CAAsB;IAAI,CAAC;IAE/F,OAAO;;YACT,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC9D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACR,MAAM,IAAI,0BAAiB,CAAC,8BAA8B,CAAC,CAAC;YAChE,CAAC;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEK,MAAM,CAAC,eAAoB;;YAC7B,OAAO,eAAe,CAAC,KAAK,CAAC;YAC7B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,gBAAgB,CAC9D,EAAE,EAAE,yEAAyE;YAC7E,EAAE,IAAI,oBAAM,eAAe,CAAC,EAAE,EAC9B,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAC9B,CAAC,IAAI,EAAE,CAAC;YACT,IAAI,CAAC,WAAW,EAAE,CAAC;gBACf,MAAM,IAAI,0BAAiB,CAAC,8BAA8B,CAAC,CAAC;YAChE,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;CAEJ;AAxBY,oDAAoB;+BAApB,oBAAoB;IADhC,uBAAU,GAAE;IAEI,qCAAW,EAAC,qBAAqB,CAAC;qCAA6B,gBAAK;GADxE,oBAAoB,CAwBhC;;;;;;;;;;;;;;;;;;;;;;;AC9BD,gFAA8C;AAE9C,MAAa,iBAAiB;CA6C7B;AA7CD,8CA6CC;AA3CG;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;;iDAChD;AAGf;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC;;qDACrC;AAGnB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;;mDACzC;AAGjB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC;;2DACtD;AAGzB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;;oDACjD;AAGlB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;;oDACrC;AAGlB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,CAAC;;mDACzC;AAGjB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;;mDACrC;AAGjB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,CAAC,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;;oDACrC;AAGlB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC;;mDAC9D;AAGjB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC;;qDAC1D;AAGnB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;;oDAC9C;AAGnB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;;oDAC/C;AAGnB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;;qDAC/C;AAGpB;IADC,yBAAW,EAAC,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;;kDAC/C;;;;;;;;;;;;;;;;;;;;;;;AC9CpB,gFAAsD;AACtD,8FAAiE;AAEjE,MAAa,SAAS;CA8CrB;AA9CD,8BA8CC;AA5CC;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;6CAC9C;AAGpB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;2CAClD;AAGlB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;mDACnD;AAG1B;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;4CAC9C;AAGnB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;4CAC9C;AAGnB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;2CAClD;AAGlB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;2CAC9C;AAGlB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;;4CAC9C;AAGnB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC;;2CAC/B;AAGlB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC;;6CAChC;AAGpB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;4CACrD;AAGpB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,mBAAmB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;4CACrD;AAGpB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;6CACrD;AAIrB;IAFC,iCAAmB,EAAC,EAAE,WAAW,EAAE,cAAc,EAAE,CAAC;IACpD,iCAAS,EAAC,CAAC,EAAE,KAAK,EAAqB,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,GAAG,WAAW,EAAE,CAAC;;0CACxD;AAGjB;IADC,iCAAmB,EAAC,EAAE,WAAW,EAAE,SAAS,EAAE,CAAC;;yCAChC;;;;;;;;;;;;;;;;;;;;;;;AChDlB,mFAA+D;AAMxD,IAAM,QAAQ,GAAd,MAAM,QAAQ;CA6CpB;AA7CY,4BAAQ;AAEjB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;wCACV;AAGf;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;4CACN;AAGnB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;0CACR;AAGjB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;kDACA;AAGzB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACP;AAGlB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACP;AAGlB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;0CACR;AAGjB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;0CACR;AAGjB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACP;AAGlB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;0CACR;AAGjB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;4CACN;AAGnB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACN;AAGnB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;2CACN;AAGnB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;4CACL;AAGpB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;yCACT;mBA5CP,QAAQ;IADpB,qBAAM,EAAC,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;GAC1D,QAAQ,CA6CpB;AAEY,sBAAc,GAAG,wBAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrDrE,6EAA0F;AAC1F,gFAA+E;AAC/E,+HAAsD;AACtD,gJAA+D;AAE/D,gJAAuD;AAIhD,IAAM,kBAAkB,GAAxB,MAAM,kBAAkB;IAC7B,YAA6B,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IAM3D,MAAM,CAAS,iBAAoC;;YACvD,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxD,CAAC;KAAA;IAMK,MAAM,CAAU,KAAgB;;YACpC,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;KAAA;IAMK,OAAO;;YACX,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;QACxC,CAAC;KAAA;IAMK,OAAO,CAAkB,MAAc;;YAC3C,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KAAA;IAMK,MAAM,CAAkB,MAAc,EAAU,iBAAoC;;YACxF,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;QAChE,CAAC;KAAA;IAMK,MAAM,CAAkB,MAAc;;YAC1C,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC;KAAA;IAOK,YAAY,CAAS,KAAU;;YACnC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACxD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,KAAK,CAAC,CAAE,kDAAkD;YAClE,CAAC;QACH,CAAC;KAAA;CACF;AA/DY,gDAAkB;AAOvB;IAJL,iBAAI,GAAE;IACN,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9C,4FAA4F;IAC5F,0DAA0D;;IAC5C,4BAAI,GAAE;;qCAAoB,wCAAiB;;gDAExD;AAMK;IAJL,gBAAG,EAAC,QAAQ,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;IAC9C,8EAA8E;;IAEhE,6BAAK,GAAE;;qCAAQ,gCAAS;;gDAErC;AAMK;IAJL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IAC/C,qEAAqE;IACrE,0DAA0D;;;;;iDAGzD;AAMK;IAJL,gBAAG,EAAC,SAAS,CAAC;IACd,0BAAY,EAAC,EAAE,OAAO,EAAE,qBAAqB,EAAE,CAAC;IACjD,qEAAqE;IACrE,oEAAoE;;IACrD,6BAAK,EAAC,QAAQ,CAAC;;;;iDAE7B;AAMK;IAJL,kBAAK,EAAC,SAAS,CAAC;IAChB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACpD,4FAA4F;IAC5F,oEAAoE;;IACtD,6BAAK,EAAC,QAAQ,CAAC;IAAkB,4BAAI,GAAE;;;;gDAEpD;AAMK;IAJL,mBAAM,EAAC,SAAS,CAAC;IACjB,0BAAY,EAAC,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IACpD,4FAA4F;IAC5F,oEAAoE;;IACtD,6BAAK,EAAC,QAAQ,CAAC;;;;gDAE5B;AAOK;IALL,iBAAI,EAAC,OAAO,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC5D,4EAA4E;IAC5E,8DAA8D;IAC9D,sEAAsE;;IAClD,4BAAI,GAAE;;;;sDAMzB;6BA9DU,kBAAkB;IAF9B,qBAAO,EAAC,wBAAwB,CAAC;IACjC,uBAAU,EAAC,UAAU,CAAC;qCAEyB,mCAAe;GADlD,kBAAkB,CA+D9B;;;;;;;;;;;;;;;;;;;;ACxED,6EAAwC;AACxC,mFAAkD;AAClD,4IAAsE;AACtE,+HAAsD;AACtD,wIAA4D;AAOrD,IAAM,cAAc,GAApB,MAAM,cAAc;CAAG;AAAjB,wCAAc;yBAAd,cAAc;IAL1B,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,2BAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,iCAAc,EAAE,CAAC,CAAC,CAAC;QACvF,WAAW,EAAE,CAAC,yCAAkB,CAAC;QACjC,SAAS,EAAE,CAAC,mCAAe,CAAC;KAC7B,CAAC;GACW,cAAc,CAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX9B,6EAAkH;AAClH,mFAA+C;AAC/C,mEAAiC;AACjC,4IAAwE;AAIjE,IAAM,eAAe,GAArB,MAAM,eAAe;IACxB,YAAgD,aAAsC;QAAtC,kBAAa,GAAb,aAAa,CAAyB;IAAI,CAAC;IAErF,MAAM,CAAC,iBAAoC;;YAC7C,MAAM,WAAW,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;YAC9D,OAAO,WAAW,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;KAAA;IAEK,OAAO;;YACT,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QAC5C,CAAC;KAAA;IAEK,OAAO,CAAC,MAAc;;YACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC/D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACR,MAAM,IAAI,0BAAiB,CAAC,qBAAqB,MAAM,aAAa,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc,EAAE,iBAAoC;;YAC7D,OAAO,iBAAiB,CAAC,KAAK,CAAC;YAC/B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAC,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3H,IAAI,CAAC,WAAW,EAAE,CAAC;gBACf,MAAM,IAAI,0BAAiB,CAAC,qBAAqB,MAAM,aAAa,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAc;;YACvB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,EAAC,MAAM,EAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAC/E,IAAI,CAAC,WAAW,EAAE,CAAC;gBACf,MAAM,IAAI,0BAAiB,CAAC,qBAAqB,MAAM,aAAa,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAEK,MAAM,CAAC,MAAW;;YACpB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACnB,MAAM,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;YACpE,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QAClD,CAAC;KAAA;IAEG,YAAY,CAAC,KAAU;;YAC3B,IAAI,CAAC;gBACH,IAAI,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;gBACrD,CAAC;gBACD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YACrD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,qCAA4B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;KAAA;CACF;AAxDY,0CAAe;0BAAf,eAAe;IAD3B,uBAAU,GAAE;IAEI,qCAAW,EAAC,2BAAQ,CAAC,IAAI,CAAC;qCAAwB,gBAAK;GAD3D,eAAe,CAwD3B;;;;;;;;;;;;;;;;;;;;;;;AC/DD,gFAAsD;AACtD,8FAA8C;AAC9C,wFAA4E;AAE5E,MAAa,aAAa;CA0HzB;AA1HD,sCA0HC;AAtHC;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAC7D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;2CACG;AAKd;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,yBAAyB,EAAE,CAAC;IAC/D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;6CACK;AAMhB;IAJC,iCAAmB,EAAC,EAAE,WAAW,EAAE,wBAAwB,EAAE,CAAC;IAC9D,iCAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI,CAAC;IAC7E,gCAAU,GAAE;IACZ,+BAAS,GAAE;;4CACI;AAKhB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,mBAAmB,EAAE,CAAC;IACzD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;8CACM;AAKjB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IAC5D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;gDACQ;AAKnB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,qBAAqB,EAAE,CAAC;IAC3D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;+CACO;AAKlB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;IAC1D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;+CACO;AAKlB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IAChE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;+CACO;AAKlB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,gCAAgC,EAAE,CAAC;IACtE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;oDACY;AAMvB;IAJC,iCAAmB,EAAC,EAAE,WAAW,EAAE,6BAA6B,EAAE,CAAC;IACnE,iCAAS,EAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,GAAG,IAAI,KAAK,KAAK,IAAI,CAAC;IAC7E,gCAAU,GAAE;IACZ,+BAAS,GAAE;;gDACQ;AAKpB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,0BAA0B,EAAE,CAAC;IAChE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;2CACG;AAKd;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,6BAA6B,EAAE,CAAC;IACnE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;iDACS;AAKpB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,iCAAiC,EAAE,CAAC;IACvE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;iDACS;AAKpB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,gBAAgB,EAAE,CAAC;IACtD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;2CACG;AAKd;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,kCAAkC,EAAE,CAAC;IACxE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;kDACU;AAKrB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAC7D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;iDACS;AAKpB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAC7D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;iDACS;AAKpB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,uBAAuB,EAAE,CAAC;IAC7D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;iDACS;AAKpB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,kBAAkB,EAAE,CAAC;IACxD,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;6CACK;AAKhB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;IAC1D,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;+CACO;AAKlB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,6BAA6B,EAAE,CAAC;IACnE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;sDACc;AAKzB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,6BAA6B,EAAE,CAAC;IACnE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;sDACc;AAKzB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IACjE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;oDACY;AAKvB;IAHC,iCAAmB,EAAC,EAAE,WAAW,EAAE,2BAA2B,EAAE,CAAC;IACjE,gCAAU,GAAE;IACZ,8BAAQ,GAAE;;oDACY;;;;;;;;;;;;;;;;;;;;;;;;;;AC7HzB,mFAA+D;AAC/D,oFAAgC;AAChC,gFAA8C;AAGvC,IAAM,IAAI,GAAV,MAAM,IAAK,SAAQ,kBAAQ,CAAC,QAAQ;CAyH1C;AAzHY,oBAAI;AAGf;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;oCACQ;AAIf;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;qCACS;AAIhB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;uCACW;AAIlB;IAFC,yBAAW,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAChC,mBAAI,GAAE;;sCACiB;AAIxB;IAFC,yBAAW,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAChC,mBAAI,GAAE;;sCACiB;AAIxB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;sCACU;AAIjB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;2CACe;AAItB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;uCACY;AAInB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;kCACM;AAIb;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;wCACY;AAInB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;wCACY;AAInB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;kCACM;AAIb;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;kCACM;AAIb;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;yCACa;AAIpB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;wCACY;AAInB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;wCACY;AAInB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;wCACY;AAInB;IAFC,yBAAW,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAChC,mBAAI,GAAE;;oCACe;AAItB;IAFC,yBAAW,EAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;IAChC,mBAAI,GAAE;;sCACiB;AAGxB;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAG,IAAI,EAAE,OAAO,EAAC,CAAC;;mCACzB;AAGf;IADC,mBAAI,EAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;;sCACR;AAIjB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;6CACiB;AAIxB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;6CACiB;AAIxB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;2CACe;AAItB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;2CACe;AAItB;IAFC,yBAAW,GAAE;IACb,mBAAI,GAAE;;sCACU;AAajB;IAXC,yBAAW,GAAE;IACb,mBAAI,EAAC;QACJ,IAAI,EAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK;QACjC,OAAO,EAAE;YACP,QAAQ,EAAE,CAAC;YACX,QAAQ,EAAE,CAAC;YACX,KAAK,EAAE,CAAC;YACR,cAAc,EAAE,EAAE;YAClB,UAAU,EAAE,CAAC;SACd;KACF,CAAC;;mCAOA;eAxHS,IAAI;IADhB,qBAAM,EAAC,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;GACvD,IAAI,CAyHhB;AAEY,kBAAU,GAAG,wBAAa,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChI7D,6EAA0F;AAC1F,+GAA+C;AAC/C,yHAA6C;AAC7C,gFAAyF;AACzF,6HAAsD;AAI/C,IAAM,eAAe,GAArB,MAAM,eAAe;IAC1B,YAA6B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAI,CAAC;IAItD,MAAM,CAAS,aAAmB;;YACtC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACjD,CAAC;KAAA;IAIK,MAAM,CAAU,WAA0B;;YAC9C,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC/C,CAAC;KAAA;IAIK,OAAO;;YACX,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QACrC,CAAC;KAAA;IAKK,OAAO,CAAgB,IAAY;;YACvC,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;KAAA;IAKK,MAAM,CAAgB,IAAY,EAAU,aAA4B;;YAC5E,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACvD,CAAC;KAAA;IAKK,MAAM,CAAgB,IAAY;;YACtC,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACxC,CAAC;KAAA;IAOK,YAAY,CAAS,KAAU;;YACnC,IAAI,CAAC;gBACH,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACrD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,KAAK,CAAC,CAAE,kDAAkD;YAClE,CAAC;QACH,CAAC;KAAA;CAEF;AAvDY,0CAAe;AAKpB;IAFL,iBAAI,GAAE;IACN,0BAAY,EAAC,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;IACjC,4BAAI,GAAE;;qCAAgB,kBAAI;;6CAEvC;AAIK;IAFL,gBAAG,EAAC,SAAS,CAAC;IACd,0BAAY,EAAC,EAAE,OAAO,EAAE,0CAA0C,EAAE,CAAC;IACxD,6BAAK,GAAE;;qCAAc,+BAAa;;6CAE/C;AAIK;IAFL,gBAAG,GAAE;IACL,0BAAY,EAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;;;;8CAG1C;AAKK;IAHL,gBAAG,EAAC,OAAO,CAAC;IACZ,0BAAY,EAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;IAC/C,sBAAQ,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,6BAA6B,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACtE,6BAAK,EAAC,MAAM,CAAC;;;;8CAE3B;AAKK;IAHL,kBAAK,EAAC,OAAO,CAAC;IACd,0BAAY,EAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;IAClD,sBAAQ,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,6BAA6B,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACvE,6BAAK,EAAC,MAAM,CAAC;IAAgB,4BAAI,GAAE;;;;6CAEhD;AAKK;IAHL,mBAAM,EAAC,OAAO,CAAC;IACf,0BAAY,EAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;IAClD,sBAAQ,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,6BAA6B,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;IACvE,6BAAK,EAAC,MAAM,CAAC;;;;6CAE1B;AAOK;IALL,iBAAI,EAAC,OAAO,CAAC;IACb,0BAAY,EAAC,EAAE,OAAO,EAAE,gCAAgC,EAAE,CAAC;IAC5D,4EAA4E;IAC5E,8DAA8D;IAC9D,sEAAsE;;IAClD,4BAAI,GAAE;;;;mDAMzB;0BArDU,eAAe;IAF3B,qBAAO,EAAC,gBAAgB,CAAC,CAAC,qDAAqD;;IAC/E,uBAAU,EAAC,OAAO,CAAC;qCAEyB,4BAAY;GAD5C,eAAe,CAuD3B;;;;;;;;;;;;;;;;;;;;AC/DD,6EAAoD;AACpD,mFAAkD;AAClD,+GAA+C;AAC/C,wHAAqD;AACrD,yHAAyD;AACzD,kIAA6D;AAC7D,0HAAwD;AAWjD,IAAM,WAAW,GAAjB,MAAM,WAAW;CAAI;AAAf,kCAAW;sBAAX,WAAW;IATvB,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,yBAAc,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,MAAM,EAAE,wBAAU,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC,CAAC;YACtG,uBAAU,EAAC,GAAG,EAAE,CAAC,gCAAc,CAAC;YAChC,uBAAU,EAAC,GAAG,EAAE,CAAC,4BAAY,CAAC;SAC7B;QACD,WAAW,EAAE,CAAC,kCAAe,CAAC;QAC9B,SAAS,EAAE,CAAC,4BAAY,CAAC;QACzB,OAAO,EAAE,CAAC,4BAAY,CAAC;KACxB,CAAC;GACW,WAAW,CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjB5B,uIAAiE;AACjE,6EAAsI;AACtI,mFAA+C;AAC/C,mEAAiC;AAGjC,6HAA0D;AAInD,IAAM,YAAY,GAAlB,MAAM,YAAY;IACvB,YAA+C,SAAsB,EAE3D,eAAgC,EAEhC,cAA6B;QAJQ,cAAS,GAAT,SAAS,CAAa;QAE3D,oBAAe,GAAf,eAAe,CAAiB;QAEhC,mBAAc,GAAd,cAAc,CAAe;IACnC,CAAC;IAEC,MAAM,CAAC,IAAU;;YACrB,MAAM,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;YACrE,IAAI,iBAAiB,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAC5C,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,iBAAiB,CAAC,QAAQ,CAAC;YACxG,CAAC;iBAAM,CAAC;gBACN,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACzC,OAAO,OAAO,CAAC,IAAI,EAAE,CAAC;YACxB,CAAC;QACH,CAAC;KAAA;IAEK,OAAO;;YACX,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;QACtC,CAAC;KAAA;IAEK,OAAO,CAAC,IAAY;;YACxB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3D,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,MAAM,IAAI,0BAAiB,CAAC,kBAAkB,IAAI,YAAY,CAAC,CAAC;YAClE,CAAC;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAEK,MAAM,CAAC,IAAY,EAAE,IAAmB;;YAC5C,OAAO,IAAI,CAAC,KAAK,CAAC;YAClB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3G,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,IAAI,0BAAiB,CAAC,kBAAkB,IAAI,YAAY,CAAC,CAAC;YAClE,CAAC;YACD,OAAO,YAAY,CAAC;QACtB,CAAC;KAAA;IAEK,MAAM,CAAC,IAAY;;YACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;YAC/D,IAAI,MAAM,CAAC,YAAY,KAAK,CAAC,EAAE,CAAC;gBAC9B,MAAM,IAAI,0BAAiB,CAAC,kBAAkB,IAAI,YAAY,CAAC,CAAC;YAClE,CAAC;QACH,CAAC;KAAA;IACK,MAAM,CAAC,MAAqB;;YAChC,IAAI,MAAM,CAAC,SAAS,EAAE,CAAC;gBACrB,MAAM,CAAC,SAAS,GAAG,EAAE,MAAM,EAAE,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,EAAS;YACzE,CAAC;YACD,IAAI,MAAM,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;gBAC/B,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAY,KAAK,MAAM,IAAI,MAAM,CAAC,KAAY,KAAK,GAAG,IAAI,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC;YACxG,CAAC;YACD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC;YACnB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;QAC5C,CAAC;KAAA;IAEK,YAAY,CAAC,KAAU;;YAC3B,IAAI,CAAC;gBACH,IAAI,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,IAAI,4BAAmB,CAAC,mBAAmB,CAAC,CAAC;gBACrD,CAAC;gBACD,OAAO,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;YACjD,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,qCAA4B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACxD,CAAC;QACH,CAAC;KAAA;CACF;AAlEY,oCAAY;uBAAZ,YAAY;IADxB,uBAAU,GAAE;IAEE,qCAAW,EAAC,YAAY,CAAC;IACnC,8BAAM,EAAC,uBAAU,EAAC,GAAG,EAAE,CAAC,kCAAe,CAAC,CAAC;IAEzC,8BAAM,EAAC,uBAAU,EAAC,GAAG,EAAE,CAAC,8BAAa,CAAC,CAAC;qCAHgB,gBAAK;QAEpC,kCAAe;QAEhB,8BAAa;GAL5B,YAAY,CAkExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5E8C;AACO;AAC5B;AACwB;AACqC;AAClC;AACC;AAClC;AACyB;AAC7C;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D,UAAU;AACV;AACA,kDAAkD,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,4DAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oDAAc;AAC5C;AACA,aAAa;AACb;AACA;AACA;AACA,qEAAqE,cAAc;AACnF,kCAAkC,cAAc;AAChD,iEAAiE,UAAU;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,2DAA2D,gCAAgC,MAAM,gEAAU;AAC3G;AACA,0DAA0D,YAAY;AACtE;AACA,6BAA6B;AAC7B,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,wBAAwB;AACvF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iCAAiC;AAC7D;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAc;AACjC;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yCAAG;AAC3B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,4BAA4B,qFAAqF;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,sBAAsB;AACtB,8DAA8D,iCAAiC;AAC/F,wDAAwD,iCAAiC;AACzF;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA,0DAA0D,oCAAoC;AAC9F,oDAAoD,mBAAmB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB;AACA,iBAAiB;AACjB;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oDAAoD,yCAAG,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,uCAAuC,yCAAG,8BAA8B,iBAAiB;AACzF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,oDAAoD,yCAAG,6BAA6B;AACpF;AACA;AACA;AACA;AACA,0DAA0D,yCAAG;AAC7D;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE;AACA;AACA;AACA;AACA,YAAY,6CAAK;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB,yCAAG;AACnB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,oDAAoD,yCAAG,6BAA6B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,wBAAwB,yCAAG;AAC3B;AACA,qBAAqB;AACrB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,QAAQ,0DAAa;AACrB;AACA,4BAA4B,wDAAW;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,wDAAW;AAC3D;AACA,uDAAuD,oDAAO;AAC9D;AACA;AACA,wCAAwC,+DAAkB;AAC1D;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,oCAAoC,+DAAkB;AACtD;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,qBAAqB;AACrB,+CAA+C,gBAAgB;AAC/D,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qEAAqE,aAAa;AAClF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA;AACA,qBAAqB,oDAAa;AAClC,oBAAoB,mDAAY,SAAS,iBAAiB;AAC1D;AACA,gBAAgB,mDAAY;AAC5B;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB,cAAc;AACd,qEAAqE,WAAW;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,4BAA4B;AAC5D;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,+BAA+B;AAC/D;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,8BAA8B;AAC9D;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,kCAAkC;AAClE;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,wBAAwB;AACxD;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,yCAAG,0BAA0B,UAAU;AAChG;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,4BAA4B,yCAAG,yBAAyB,UAAU;AAClE;AACA;AACA;AACA,iEAAiE,yCAAG,0BAA0B,UAAU;AACxG,iDAAiD,SAAS;AAC1D;AACA;AACA,sBAAsB;AACtB;AACA;AACA,8BAA8B,6CAAK;AACnC;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,+DAAU;AACpC;AACA,oBAAoB,kDAAW;AAC/B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,yCAAyC,yCAAG;AAC5C;AACA,aAAa;AACb;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,4BAA4B;AAC5D;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,+BAA+B;AAC/D;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,8BAA8B;AAC9D;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,kCAAkC;AAClE;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA,oBAAoB,yCAAG;AACvB,6BAA6B,yCAAG,wBAAwB;AACxD;AACA,4BAA4B,yCAAG;AAC/B;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,gDAAS,2CAA2C,KAAK,SAAS,iBAAiB;AAClI;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iDAAU;AAC1B;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB,6CAA6C,cAAc;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AC1pB2B;AACpB;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACO,sDAAsD;AAC7D;AACA;AACA,iBAAiB,wDAAiB;AAClC;AACA,2BAA2B,0BAA0B;AACrD;AACA,6BAA6B,4CAAK;AAClC;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,MAAM;AACN,UAAU,qDAAc;AACxB;AACA,QAAQ;AACR;AACA;AACA;AACA,iEAAiE;AACjE,QAAQ;AACR,6BAA6B,gBAAgB,qBAAqB,SAAS;AAC3E;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY,QAAQ,UAAU,EAAE,yBAAyB;AAC1E;AACA,iBAAiB;AACjB;AACA;AACA;;;;;;;;;;AC9HA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,IAAI;WACJ;WACA;WACA,IAAI;WACJ;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,CAAC;WACD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA,sGAAsG;WACtG;WACA;WACA;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA,EAAE;WACF;WACA;;;;;WChEA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":[".././cloudinary.js",".././dbservice.js",".././index.js",".././mailreader.js",".././nest/IMap/IMap.ts",".././nest/app.module.ts",".././nest/components/Telegram/Telegram.controller.ts",".././nest/components/Telegram/Telegram.module.ts",".././nest/components/Telegram/Telegram.service.ts",".././nest/components/Telegram/TelegramManager.ts",".././nest/components/activechannels/activechannels.controller.ts",".././nest/components/activechannels/activechannels.module.ts",".././nest/components/activechannels/activechannels.service.ts",".././nest/components/activechannels/dto/add-reaction.dto.ts",".././nest/components/activechannels/dto/create-active-channel.dto.ts",".././nest/components/activechannels/dto/update-active-channel.dto.ts",".././nest/components/activechannels/schemas/active-channel.schema.ts",".././nest/components/archived-clients/archibved-client.service.ts",".././nest/components/archived-clients/archived-client.controller.ts",".././nest/components/archived-clients/archived-client.module.ts",".././nest/components/buffer-clients/buffer-client.controller.ts",".././nest/components/buffer-clients/buffer-client.module.ts",".././nest/components/buffer-clients/buffer-client.service.ts",".././nest/components/buffer-clients/dto/create-buffer-client.dto.ts",".././nest/components/buffer-clients/dto/search-buffer- client.dto.ts",".././nest/components/buffer-clients/schemas/buffer-client.schema.ts",".././nest/components/clients/client.controller.ts",".././nest/components/clients/client.module.ts",".././nest/components/clients/client.service.ts",".././nest/components/clients/dto/create-client.dto.ts",".././nest/components/clients/dto/search-client.dto.ts",".././nest/components/clients/dto/setup-client.dto.ts",".././nest/components/clients/schemas/client.schema.ts",".././nest/components/confguration/configuration.controller.ts",".././nest/components/confguration/configuration.module.ts",".././nest/components/confguration/configuration.schema.ts",".././nest/components/confguration/configuration.service.ts",".././nest/components/user-data/dto/create-user-data.dto.ts",".././nest/components/user-data/dto/search-user-data.dto.ts",".././nest/components/user-data/schemas/user-data.schema.ts",".././nest/components/user-data/user-data.controller.ts",".././nest/components/user-data/user-data.module.ts",".././nest/components/user-data/user-data.service.ts",".././nest/components/users/dto/search-user.dto.ts",".././nest/components/users/schemas/user.schema.ts",".././nest/components/users/users.controller.ts",".././nest/components/users/users.module.ts",".././nest/components/users/users.service.ts",".././telegramManager.js",".././utils.js","../external commonjs \"@nestjs/common\"","../external commonjs \"@nestjs/core\"","../external commonjs \"@nestjs/mongoose\"","../external commonjs \"@nestjs/platform-express\"","../external commonjs \"@nestjs/swagger\"","../external commonjs \"axios\"","../external commonjs \"body-parser\"","../external commonjs \"class-transformer\"","../external commonjs \"class-validator\"","../external commonjs \"cloudinary\"","../external commonjs \"cors\"","../external commonjs \"dotenv\"","../external commonjs \"express\"","../external commonjs \"imap\"","../external commonjs \"mongodb\"","../external commonjs \"mongoose\"","../external commonjs \"node-schedule-tz\"","../external commonjs \"telegram\"","../external commonjs \"telegram/Helpers\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events\"","../external commonjs \"telegram/events/index.js\"","../external commonjs \"telegram/extensions/Logger\"","../external commonjs \"telegram/sessions\"","../external commonjs \"telegram/tl\"","../external node-commonjs \"child_process\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/runtime/async module","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["console.log(\"in Cloudinary\");\r\nimport cloudinary from 'cloudinary';\r\nimport path from 'path';\r\nimport fs from 'fs';\r\nimport { fetchWithTimeout } from './utils';\r\n\r\nexport class CloudinaryService {\r\n    static instance;\r\n    resources = new Map();\r\n\r\n    constructor() {\r\n        cloudinary.v2.config({\r\n            cloud_name: process.env.CL_NAME,\r\n            api_key: process.env.CL_APIKEY,\r\n            api_secret: process.env.CL_APISECRET\r\n        });\r\n    }\r\n\r\n    static async getInstance(name) {\r\n        if (!CloudinaryService.instance) {\r\n            CloudinaryService.instance = new CloudinaryService();\r\n        }\r\n        await CloudinaryService.instance.getResourcesFromFolder(name);\r\n        return CloudinaryService.instance;\r\n    }\r\n\r\n    async getResourcesFromFolder(folderName) {\r\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\r\n        await this.findAndSaveResources(folderName, 'image');\r\n    }\r\n\r\n    async createNewFolder(folderName) {\r\n        await this.createFolder(folderName);\r\n        await this.uploadFilesToFolder(folderName);\r\n    }\r\n\r\n    async overwriteFile() {\r\n        const cloudinaryFileId = \"index_nbzca5.js\";\r\n        const localFilePath = \"./src/test.js\";\r\n\r\n        try {\r\n\r\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\r\n                resource_type: 'auto',\r\n                overwrite: true,\r\n                invalidate: true,\r\n                public_id: cloudinaryFileId\r\n            });\r\n            console.log(result);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    async findAndSaveResources(folderName, type) {\r\n        try {\r\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\r\n            resources.forEach(async (resource) => {\r\n                try {\r\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\r\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\r\n                } catch (error) {\r\n                    console.log(resource);\r\n                    console.log(error)\r\n                }\r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async createFolder(folderName) {\r\n        try {\r\n            const result = await cloudinary.v2.api.create_folder(folderName);\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error creating folder:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Function to upload files from URLs to a specific folder in Cloudinary\r\n    async uploadFilesToFolder(folderName) {\r\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\r\n            try {\r\n                const result = await cloudinary.v2.uploader.upload_large(url, {\r\n                    folder: folderName,\r\n                    resource_type: 'auto',\r\n                    public_id: key, // Set the key as the public_id\r\n                });\r\n\r\n                return result;\r\n            } catch (error) {\r\n                console.error('Error uploading file:', error);\r\n                throw error;\r\n            }\r\n        });\r\n\r\n        try {\r\n            return await Promise.all(uploadPromises);\r\n        } catch (error) {\r\n            console.error('Error uploading files:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async printResources() {\r\n        try {\r\n            this.resources?.forEach((val, key) => {\r\n                console.log(key, \":\", val);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    get(publicId) {\r\n        try {\r\n            const result = this.resources.get(publicId)\r\n            return result || '';\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    getBuffer(publicId) {\r\n        try {\r\n            const result = this.resources.get(publicId)\r\n            return result || '';\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nasync function saveFile(url, name) {\r\n    const extension = url.substring(url.lastIndexOf('.') + 1, url.length);\r\n    const mypath = path.resolve(__dirname, `./${name}.${extension}`);\r\n    fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2)\r\n        .then(res => {\r\n            if (res?.statusText === 'OK') {\r\n                try {\r\n                    if (!fs.existsSync(mypath)) {\r\n                        fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\r\n                        console.log(`${name}.${extension} Saved!!`);\r\n                    } else {\r\n                        fs.unlinkSync(mypath);\r\n                        fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\r\n                        console.log(`${name}.${extension} Replaced!!`);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            } else {\r\n                throw new Error(`Unable to download file from ${url}`);\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n}\r\n\r\n\r\n\r\n","import { MongoClient, ServerApiVersion, ConnectOptions, ObjectId } from 'mongodb';\r\nimport mongoose from 'mongoose';\r\nexport class ChannelService {\r\n    static instance;\r\n    client = undefined\r\n    db = undefined;\r\n    users = undefined;\r\n    statsDb = undefined;\r\n    statsDb2 = undefined;\r\n    isConnected = false;\r\n\r\n    constructor () {\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!ChannelService.instance) {\r\n            ChannelService.instance = new ChannelService();\r\n        }\r\n        return ChannelService.instance;\r\n    }\r\n    static isInstanceExist() {\r\n        return !!ChannelService.instance;\r\n    }\r\n\r\n    async connect() {\r\n        if (!this.isConnected) {\r\n            console.log('trying to connect to DB......')\r\n            try {\r\n                await mongoose.connect(process.env.mongouri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1, maxPoolSize: 10 } );\r\n                console.log('Connected to MongoDB');\r\n                this.client = mongoose.connection.getClient()\r\n                this.isConnected = true;\r\n                this.client.on('close', () => {\r\n                    console.log('MongoDB connection closed.');\r\n                    this.isConnected = false;\r\n                });\r\n                this.db = this.client.db(\"tgclients\").collection('channels');\r\n                this.users = this.client.db(\"tgclients\").collection('users');\r\n                this.statsDb = this.client.db(\"tgclients\").collection('stats');\r\n                this.statsDb2 = this.client.db(\"tgclients\").collection('stats2');\r\n                return true;\r\n            } catch (error) {\r\n                console.log(`Error connecting to MongoDB: ${error}`);\r\n                return false;\r\n            }\r\n        } else {\r\n            console.log('MongoConnection ALready Existing');\r\n        }\r\n    }\r\n    async insertChannel(channelData) {\r\n        const {\r\n            title,\r\n            id,\r\n            username,\r\n            megagroup,\r\n            participantsCount,\r\n            restricted,\r\n            broadcast\r\n        } = channelData\r\n        const cannotSendMsgs = channelData.defaultBannedRights?.sendMessages\r\n        if (!cannotSendMsgs && !broadcast) {\r\n            await this.db.updateOne({ channelId: id.toString() }, { $set: { username: username, title, megagroup, participantsCount, broadcast, restricted, sendMessages: channelData.defaultBannedRights?.sendMessages, canSendMsgs: true } }, { upsert: true });\r\n        }\r\n    }\r\n    async getChannels(limit = 50, skip = 0, k) {\r\n        const query = { megagroup: true, username: { $ne: null } };\r\n        const sort = { participantsCount: -1 };\r\n        if (k) {\r\n            query[\"$or\"] = [{ title: { $regex: k, $options: 'i' } }, { username: { $regex: k, $options: 'i' } }]\r\n        }\r\n        const options = { collation: { locale: 'en', strength: 1 } };\r\n        try {\r\n            if (k) {\r\n                await this.db?.createIndex({ title: 'text' }); // Create index on the \"title\" field for text search\r\n            }\r\n            const result = await this.db\r\n                .find(query, options)\r\n                .sort(sort)\r\n                .skip(skip)\r\n                .limit(limit)\r\n                .toArray();\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async insertContact(contact) {\r\n        const collection = this.client.db(\"tgclients\").collection('contacts');\r\n        await collection.updateOne({ phone: contact.phone }, { $set: contact }, { upsert: true });\r\n    }\r\n\r\n    async insertUser(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.updateOne(filter, { $set: user }, { upsert: true });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async updateUser(user, data) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.updateOne(filter, {\r\n                $set: {\r\n                    ...data\r\n                },\r\n            }, { upsert: true });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async resetPaidUsers() {\r\n        try {\r\n            const collection = this.client.db(\"tgclients\").collection('userData');\r\n            const entry = await collection.updateMany({ $and: [{ payAmount: { $gt: 10 }, totalCount: { $gt: 50 } }] }, {\r\n                $set: {\r\n                    totalCount: 10,\r\n                    limitTime: Date.now()\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async deleteUser(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.deleteOne(filter);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getUser(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.findOne(filter);\r\n            return entry\r\n        } catch (error) {\r\n            console.log(error)\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    async getuserdata(filter) {\r\n        try {\r\n            const collection = this.client.db(\"tgclients\").collection('userData');\r\n            const entry = await collection.findOne(filter);\r\n            return entry\r\n        } catch (error) {\r\n            console.log(error)\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    async updateUserData(filter, data) {\r\n        try {\r\n            const collection = this.client.db(\"tgclients\").collection('userData');\r\n            const entry = await collection.updateMany(filter, { $set: { ...data } });\r\n            return entry\r\n        } catch (error) {\r\n            console.log(error)\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    async getTempUser() {\r\n        try {\r\n            const entry = await this.users.findOne({});\r\n            return entry\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getUsersFullData(limit = 2, skip = 0) {\r\n        const result = await this.users?.find({}).skip(skip).limit(limit).sort({ _id: 1 }).toArray();\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async insertInBufferClients(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n            await bufferColl.updateOne(filter, { $set: { ...user } }, { upsert: true });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async readBufferClients(filter, limit) {\r\n        const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n        const query = filter || {};\r\n        const queryWithLimit = limit ? bufferColl.find(query).limit(limit) : bufferColl.find(query);\r\n        const result = await queryWithLimit.toArray();\r\n        if (result?.length > 0) {\r\n            return result;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n\r\n    async getOneBufferClient(mobile = null) {\r\n        const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n        const today = new Date().toISOString().split('T')[0]\r\n        const query = { date: { $lte: today } }\r\n        if (mobile) {\r\n            console.log(mobile)\r\n            query['mobile'] = mobile\r\n        }\r\n        console.log(query)\r\n        const results = await bufferColl.find(query).toArray();\r\n        if (results.length) {\r\n            for (const result of results) {\r\n                if (result) {\r\n                    const alreadyExist = await this.getUserConfig({ number: `+${result.mobile}` });\r\n                    if (!alreadyExist) {\r\n                        return result\r\n                    } else {\r\n                        console.log(\"removing one already existing client\");\r\n                        const entry = await bufferColl.deleteMany({ mobile: result.mobile });\r\n                    }\r\n                } else {\r\n                    return undefined;\r\n                }\r\n            }\r\n        } else {\r\n            console.log(\"returnimg undefind\")\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    async deleteBufferClient(user) {\r\n        const filter = { mobile: user.mobile };\r\n        console.log(filter)\r\n        const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n        try {\r\n            const entry = await bufferColl.deleteOne(filter);\r\n            console.log(entry)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getNewBufferClients(ids) {\r\n        const cursor = this.users.find({ \"mobile\": { $nin: ids }, twoFA: { $exists: false } }).sort({ lastActive: 1 }).limit(20);\r\n        return cursor\r\n    }\r\n\r\n    async readPromoteStats() {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const result = await promotColl.find({}, { projection: { \"client\": 1, \"totalCount\": 1, \"lastUpdatedTimeStamp\": 1, \"isActive\": 1, \"_id\": 0 } }).sort({ totalCount: -1 }).toArray();\r\n        if (result.length > 0) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async checkIfPaidToOthers(chatId, profile) {\r\n        const resp = { paid: 0, demoGiven: 0 };\r\n        try {\r\n            const collection = this.client.db(\"tgclients\").collection('userData');\r\n            const document = await collection.find({ chatId, profile: { $exists: true, \"$ne\": profile }, payAmount: { $gte: 10 } }).toArray();\r\n            const document2 = await collection.find({ chatId, profile: { $exists: true, \"$ne\": profile }, demoGiven: true }).toArray();\r\n            if (document.length > 0) {\r\n                resp.paid = document.length\r\n            }\r\n            if (document2.length > 0) {\r\n                resp.demoGiven = document2.length\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        return resp;\r\n    }\r\n\r\n\r\n    async readSinglePromoteStats(clientId) {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const result = await promotColl.findOne({ client: clientId }, { projection: { \"client\": 1, \"totalCount\": 1, \"lastUpdatedTimeStamp\": 1, \"isActive\": 1, \"_id\": 0 } });\r\n        return result\r\n    }\r\n\r\n    async readStats() {\r\n        const result = await this.statsDb.find({}).sort({ newUser: -1 })\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async read(chatId) {\r\n        const result = await this.db.findOne({ chatId });\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n    async removeOnefromChannel(filter) {\r\n        try {\r\n            await this.db.deleteOne(filter)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    async getUsers(limit, skip = 0) {\r\n        const result = await this.users?.find({}, { projection: { firstName: 1, userName: 1, mobile: 1, _id: 0 } }).skip(skip).limit(limit).toArray();\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getupi(key) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('upi-ids');\r\n        const upiIds = await upiDb.findOne({});\r\n        return upiIds[key] || \"lakshmi-69@paytm\"\r\n    }\r\n\r\n    async getAllUpis() {\r\n        const upiDb = this.client.db(\"tgclients\").collection('upi-ids');\r\n        const upiIds = await upiDb.findOne({});\r\n        return upiIds\r\n    }\r\n\r\n    async updateUpis(data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('upi-ids');\r\n        const upiIds = await upiDb.updateOne({}, { $set: { ...data } });\r\n        return upiIds\r\n    }\r\n\r\n    async getBuilds() {\r\n        const buildBd = this.client.db(\"tgclients\").collection('builds');\r\n        const builds = await buildBd.findOne({});\r\n        return builds\r\n    }\r\n\r\n    async updateBuilds(data) {\r\n        const buildBd = this.client.db(\"tgclients\").collection('builds');\r\n        const builds = await buildBd.updateOne({}, { $set: { ...data } }, { upsert: true });\r\n        return builds\r\n    }\r\n\r\n    async getUserConfig(filter) {\r\n        const clientDb = this.client.db(\"tgclients\").collection('clients');\r\n        const client = await clientDb.findOne(filter);\r\n        return client\r\n    }\r\n    async getUserInfo(filter) {\r\n        const clientDb = this.client.db(\"tgclients\").collection('clients');\r\n        const aggregationPipeline = [\r\n            { $match: filter },\r\n            {\r\n                $project: {\r\n                    \"_id\": 0,\r\n                    \"session\": 0,\r\n                    \"number\": 0,\r\n                    \"password\": 0,\r\n                }\r\n            }\r\n        ];\r\n        const result = await clientDb.aggregate(aggregationPipeline).toArray();\r\n        return result.length > 0 ? result[0] : null;\r\n    }\r\n\r\n    \r\n    async updateUserConfig(filter, data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('clients');\r\n        const updatedDocument = await upiDb.findOneAndUpdate(filter, { $set: { ...data } }, { returnOriginal: false });\r\n        return updatedDocument.value;\r\n    }\r\n\r\n    async readArchivedClients(filter, limit) {\r\n        const bufferColl = this.client.db(\"tgclients\").collection('ArchivedClients');\r\n        const query = filter || {};\r\n        const queryWithLimit = limit ? bufferColl.find(query).limit(limit) : bufferColl.find(query);\r\n        const result = await queryWithLimit.toArray();\r\n        if (result?.length > 0) {\r\n            return result;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async insertInAchivedClient(data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('ArchivedClients');\r\n        const upiIds = await upiDb.updateOne({ number: data.number }, { $set: { ...data } }, { upsert: true });\r\n        return upiIds\r\n    }\r\n\r\n    async getInAchivedClient(filter) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('ArchivedClients');\r\n        const upiIds = await upiDb.findOne(filter)\r\n        return upiIds\r\n    }\r\n\r\n    async removeOneAchivedClient(filter) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('ArchivedClients');\r\n        const upiIds = await upiDb.deleteOne(filter)\r\n        return upiIds\r\n    }\r\n\r\n    async getAllUserClients() {\r\n        const clientDb = this.client.db(\"tgclients\").collection('clients');\r\n        const clients = await clientDb.aggregate([\r\n            {\r\n                $project: {\r\n                    \"_id\": 0,\r\n                    \"session\": 0,\r\n                    \"number\": 0,\r\n                    \"password\": 0,\r\n                }\r\n            }\r\n        ]).toArray();\r\n        return clients;\r\n    }\r\n\r\n    async getTgConfig() {\r\n        const clientDb = this.client.db(\"tgclients\").collection('configuration');\r\n        const client = await clientDb.findOne({ \"apiId\": \"1591339\" });\r\n        return client\r\n    }\r\n\r\n    async updateTgConfig(data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('configurations');\r\n        const upiIds = await upiDb.updateOne({}, { $set: { ...data } });\r\n        return upiIds\r\n    }\r\n\r\n    async processUsers(limit = undefined, skip = undefined) {\r\n        const weekAgo = new Date(Date.now() - (60 * 24 * 60 * 60 * 1000)).toISOString().split('T')[0]\r\n        const cursor = this.users.find({\r\n            $or: [\r\n                { \"lastUpdated\": { $lt: weekAgo } },\r\n                { \"lastUpdated\": { $exists: false } }\r\n            ]\r\n        }).limit(limit ? limit : 300).skip(skip ? skip : 0);\r\n        return cursor;\r\n    }\r\n\r\n    async clearStats() {\r\n        const result = await this.statsDb.deleteMany({ \"payAmount\": { $lt: 5 } });\r\n        console.log(result);\r\n    }\r\n\r\n    async clearStats2() {\r\n        const result = await this.statsDb2?.deleteMany({});\r\n        console.log(result);\r\n    }\r\n\r\n    async reinitPromoteStats() {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const users = await this.getAllUserClients();\r\n        for (const user of users) {\r\n            await promotColl.updateOne({ client: user.clientId },\r\n                {\r\n                    $set: {\r\n                        data: Object.fromEntries((await promotColl.findOne({ client: user.clientId })).channels?.map(channel => [channel, 0])),\r\n                        totalCount: 0,\r\n                        uniqueChannels: 0,\r\n                        releaseDay: Date.now(),\r\n                        lastupdatedTimeStamp: Date.now()\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    async closeConnection() {\r\n        try {\r\n            if (this.isConnected) {\r\n                this.isConnected = false;\r\n                console.log('MongoDB connection closed.');\r\n            }\r\n            await this.client?.close();\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getCurrentActiveUniqueChannels() {\r\n        const promoteStatsColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n\r\n        const cursor = promoteStatsColl.find({});\r\n        const uniqueChannels = new Set();\r\n\r\n        await cursor.forEach((document) => {\r\n            for (const channel in document.data) {\r\n                uniqueChannels.add(channel);\r\n            }\r\n        });\r\n\r\n        const uniqueChannelNames = Array.from(uniqueChannels);\r\n        return uniqueChannelNames;\r\n    }\r\n    async setEnv() {\r\n        const clientDb = this.client.db(\"tgclients\").collection('configuration');\r\n        const jsonData = await clientDb.findOne({}, { _id: 0 });\r\n        for (const key in jsonData) {\r\n            console.log('setting', key)\r\n            process.env[key] = jsonData[key];\r\n        }\r\n        console.log(\"finished setting env\");\r\n    }\r\n\r\n    async getActiveChannels(limit = 50, skip = 0, keywords = [], notIds = [], collection = 'activeChannels') {\r\n        const pattern = new RegExp(keywords.join('|'), 'i');\r\n        const notPattern = new RegExp('online|board|class|PROFIT|wholesale|retail|topper|exam|motivat|medico|shop|follower|insta|traini|cms|cma|subject|currency|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|invest|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|quot|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\r\n        let query = {\r\n            $and: [\r\n                { username: { $ne: null } },\r\n                {\r\n                    $or: [\r\n                        { title: { $regex: pattern } },\r\n                        { username: { $regex: pattern } }\r\n                    ]\r\n                },\r\n                {\r\n                    username: {\r\n                        $not: {\r\n                            $regex: \"^(\" + notIds.map(id => \"(?i)\" + id?.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'))?.join(\"|\") + \")$\"\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    title: { $not: { $regex: notPattern } }\r\n                },\r\n                {\r\n                    username: { $not: { $regex: notPattern } }\r\n                },\r\n                {\r\n                    sendMessages: false,\r\n                    broadcast: false,\r\n                    restricted: false\r\n                }\r\n            ]\r\n        };\r\n\r\n        const sort = { participantsCount: -1 };\r\n        const promoteStatsColl = this.client.db(\"tgclients\").collection(collection);\r\n        try {\r\n            const result = await promoteStatsColl\r\n                .find(query)\r\n                .sort(sort)\r\n                .skip(skip)\r\n                .limit(limit)\r\n                .toArray();\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async updateActiveChannels() {\r\n        try {\r\n            const promoteStatsColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n            const activeChannelCollection = this.client.db(\"tgclients\").collection('activeChannels');\r\n            const channelInfoCollection = this.client.db(\"tgclients\").collection('channels');\r\n            const cursor = promoteStatsColl.find({});\r\n\r\n            await cursor.forEach(async (document) => {\r\n                for (const channelId in document.data) {\r\n                    const channelInfo = await channelInfoCollection.findOne({ channelId }, { projection: { \"_id\": 0 } });\r\n                    if (channelInfo) {\r\n                        await activeChannelCollection.updateOne({ channelId }, { $set: channelInfo }, { upsert: true });\r\n                    }\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async updateActiveChannel(id, data) {\r\n        const activeChannelCollection = this.client.db(\"tgclients\").collection('activeChannels');\r\n        await activeChannelCollection.updateOne({ channelId: id }, { $set: data }, { upsert: true })\r\n    }\r\n\r\n    async removeOnefromActiveChannel(filter) {\r\n        try {\r\n            const activeChannelCollection = this.client.db(\"tgclients\").collection('activeChannels');\r\n            await activeChannelCollection.deleteOne(filter)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n","'use strict';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nimport express from 'express';\r\nimport axios from 'axios';\r\nimport schedule from 'node-schedule-tz';\r\nimport { timeZone, timeZoneName } from 'node-schedule-tz'; // Assuming timeZone and timeZoneName are exported from node-schedule-tz\r\nimport { ChannelService } from './dbservice';\r\nimport {\r\n  getClient,\r\n  hasClient,\r\n  disconnectAll,\r\n  createClient,\r\n  deleteClient,\r\n  setActiveClientSetup,\r\n  getActiveClientSetup\r\n} from './telegramManager';\r\nimport bodyParser from 'body-parser';\r\nimport { sleep, fetchWithTimeout } from './utils';\r\nimport { execSync } from 'child_process';\r\nimport { CloudinaryService } from './cloudinary';\r\nimport fs from 'fs';\r\nimport { NestFactory } from '@nestjs/core';\r\nimport { ExpressAdapter } from '@nestjs/platform-express';\r\nimport { AppModule } from './nest/app.module';\r\nimport { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';\r\nimport mongoose from 'mongoose';\r\nimport { fetchNumbersFromString } from './utils';\r\n\r\n\r\nvar cors = require('cors');\r\nconst app = express();\r\nconst port = process.env.PORT || 4000;\r\nconst userMap = new Map();\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n});\r\nprocess.on('exit', async () => {\r\n  await ChannelService.getInstance().closeConnection();\r\n  await disconnectAll();\r\n});\r\nlet ip;\r\nlet clients;\r\nlet upiIds;\r\nconst pings = {}\r\n\r\n\r\nfetchWithTimeout('https://ipinfo.io/json')\r\n  .then(result => {\r\n    return result?.data;\r\n  })\r\n  .then((output) => {\r\n    ip = output;\r\n    console.log(ip)\r\n  })\r\n  .then(async () => {\r\n    const db = ChannelService.getInstance()\r\n    await db.connect();\r\n    await db.setEnv();\r\n    setTimeout(async () => {\r\n      checkerclass.getinstance()\r\n      await setUserMap();\r\n    }, 100);\r\n    setTimeout(() => {\r\n      if (!getActiveClientSetup()) {\r\n        // joinchannelForBufferClients();\r\n      }\r\n    }, 120000);\r\n  }).catch(err => {\r\n    console.error(err)\r\n    setTimeout(() => {\r\n      if (!getActiveClientSetup()) {\r\n        // joinchannelForBufferClients();\r\n      }\r\n    }, 120000);\r\n  })\r\n\r\n\r\n\r\nlet count = 0;\r\nlet botCount = 0\r\nconst ppplbot = () => {\r\n  let token;\r\n  if (botCount % 2 == 1) {\r\n    token = `bot6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY`\r\n  } else {\r\n    token = `bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA`\r\n  }\r\n\r\n  return `https://api.telegram.org/${token}/sendMessage?chat_id=-1001801844217`\r\n}\r\nconst pingerbot = `https://api.telegram.org/bot5807856562:${process.env.apikey}/sendMessage?chat_id=-1001703065531`;\r\n\r\nconst apiResp = {\r\n  INSTANCE_NOT_EXIST: \"INSTANCE_NOT_EXIST\",\r\n  CLIENT_NOT_EXIST: \"CLIENT_NOT_EXIST\",\r\n  CONNECTION_NOT_EXIST: \"CONNECTION_NOT_EXIST\",\r\n  ALL_GOOD: \"ALL_GOOD\",\r\n  DANGER: \"DANGER\",\r\n  WAIT: \"WAIT\"\r\n};\r\n\r\nasync function setUserMap() {\r\n  userMap.clear();\r\n  const db = ChannelService.getInstance();\r\n  await fetchWithTimeout(`${ppplbot()}&text=UptimeRobot : Refreshed Map`);\r\n  const users = await db.getAllUserClients();\r\n  clients = users\r\n  upiIds = await db.getAllUpis()\r\n  users.forEach(user => {\r\n    userMap.set(user.userName.toLowerCase(), { url: `${user.repl}/`, timeStamp: Date.now(), deployKey: user.deployKey, downTime: 0, lastPingTime: Date.now(), clientId: user.clientId })\r\n    pings[user.userName.toLowerCase()] = Date.now();\r\n  })\r\n}\r\n\r\nfunction getCurrentHourIST() {\r\n  const now = new Date();\r\n  const istOffset = 5.5 * 60 * 60 * 1000;\r\n  const istTime = new Date(now.getTime() + istOffset);\r\n  const istHour = istTime.getUTCHours();\r\n  return istHour;\r\n}\r\nconst connetionQueue = [];\r\ntry {\r\n  schedule.scheduleJob('test3', ' 25 2 * * * ', 'Asia/Kolkata', async () => {\r\n    checkBufferClients()\r\n    for (const value of userMap.values()) {\r\n      try {\r\n        const now = new Date();\r\n        if (now.getUTCDate() % 3 === 1) {\r\n          await fetchWithTimeout(`${value.url}leavechannels`);\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Some Error: \", error.code);\r\n      }\r\n      await sleep(3000)\r\n    }\r\n    await fetchWithTimeout(`${process.env.uptimeChecker}/joinchannel`)\r\n    await fetchWithTimeout(`https://mychatgpt-pg6w.onrender.com/deletefiles`);\r\n  })\r\n  schedule.scheduleJob('test3', ' 25 12 * * * ', 'Asia/Kolkata', async () => {\r\n    fetchWithTimeout(`${process.env.uptimeChecker}/joinchannel`)\r\n    joinchannelForBufferClients();\r\n  })\r\n} catch (error) {\r\n  console.log(\"Some Error: \", error.code);\r\n}\r\n\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.get('/', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n\r\n  //\r\n});\r\n\r\napp.get('/exitacc', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  //\r\n});\r\n\r\napp.get('/checkBufferClients', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Checking Buffer Clients');\r\n  next();\r\n}, async (req, res) => {\r\n  await checkBufferClients();\r\n});\r\napp.get('/checkArchivedClients', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Checking Buffer Clients');\r\n  next();\r\n}, async (req, res) => {\r\n  await checkArchivedClients();\r\n});\r\n\r\napp.get('/processUsers/:limit/:skip', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async (req, res) => {\r\n  const limit = req.params.limit ? req.params.limit : 30\r\n  const skip = req.params.skip ? req.params.skip : 20\r\n  const db = await ChannelService.getInstance();\r\n  const cursor = await db.processUsers(parseInt(limit), parseInt(skip));\r\n  while (await cursor.hasNext()) {\r\n    const document = await cursor.next();\r\n    const cli = await createClient(document.mobile, document.session);\r\n    const client = await getClient(document.mobile);\r\n    if (cli) {\r\n      console.log(document.mobile, \" :  true\");\r\n      const lastActive = await client.getLastActiveTime();\r\n      const date = new Date(lastActive * 1000).toISOString().split('T')[0];\r\n      const me = await client.getMe()\r\n      await db.updateUser(document, { msgs: cli.msgs, totalChats: cli.total, lastActive, date, tgId: me.id.toString(), lastUpdated: new Date().toISOString().split('T')[0] });\r\n      await client?.disconnect(document.mobile);\r\n      await deleteClient()\r\n    } else {\r\n      console.log(document.mobile, \" :  false\");\r\n      await db.deleteUser(document);\r\n    }\r\n  }\r\n  console.log(\"finished\")\r\n});\r\n\r\napp.get('/refreshMap', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  await setUserMap();\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.get('/clearstats2', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  await db.clearStats2();\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.get('/exit', async (req, res) => {\r\n  await ChannelService.getInstance().closeConnection();\r\n  process.exit(1)\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.post('/channels', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  // console.log(req.body);\r\n  next();\r\n}, async (req, res) => {\r\n  const channels = req.body?.channels;\r\n  const db = ChannelService.getInstance();\r\n  channels?.forEach(async (channel) => {\r\n    await db.insertChannel(channel);\r\n  })\r\n});\r\n\r\nlet settingupClient = Date.now() - 250000;\r\napp.get('/setupClient/:clientId', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  if (Date.now() > (settingupClient + 240000)) {\r\n    await disconnectAll();\r\n    await sleep(1000)\r\n    settingupClient = Date.now();\r\n    const clientId = req.params?.clientId;\r\n    const archieveOld = req?.query?.a;\r\n    const days = req?.query?.d;\r\n    const mobile = req?.query?.m;\r\n    const formalities = req?.query?.f;\r\n    const PLimited = !!req.query.PLimited;\r\n    console.log(clientId, archieveOld);\r\n    await fetchWithTimeout(`${ppplbot()}&text=Received NEw Client Request for - ${clientId}`);\r\n    await setUpClient(clientId.toString(), archieveOld?.toLowerCase() === 'yes' ? true : false, days, mobile, formalities?.toLowerCase() === 'no' ? false : true, PLimited)\r\n  } else {\r\n    console.log(\"Profile Setup Recently tried\");\r\n  }\r\n})\r\n\r\napp.get('/updateClient/:clientId', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  settingupClient = Date.now();\r\n  const clientId = req.params?.clientId;\r\n  console.log(clientId);\r\n  await updateClient(clientId.toString())\r\n})\r\n\r\napp.get('/getip', (req, res) => {\r\n  res.json(ip);\r\n});\r\n\r\napp.post('/contacts', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  // console.log(req.body);\r\n  next();\r\n}, async (req, res) => {\r\n  const contacts = req.body?.contacts;\r\n  const db = ChannelService.getInstance();\r\n  contacts?.forEach(async (contact) => {\r\n    await db.insertContact(contact);\r\n  })\r\n  console.log('contacts saved', contacts.length);\r\n});\r\n\r\napp.post('/users', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  console.log(req.body);\r\n  next();\r\n}, async (req, res) => {\r\n  const user = req.body;\r\n  const db = ChannelService.getInstance();\r\n  const cli = getClient(user.mobile);\r\n  const activeClientSetup = getActiveClientSetup()\r\n  if (activeClientSetup && activeClientSetup?.phoneNumber == user.mobile) {\r\n    setActiveClientSetup(undefined)\r\n    console.log(\"New Session Generated\");\r\n    await setNewClient(user, activeClientSetup);\r\n    await deleteClient(user.mobile)\r\n  } else {\r\n    console.log(!cli, activeClientSetup?.phoneNumber, user.mobile)\r\n    user['lastUpdated'] = new Date().toISOString().split('T')[0]\r\n    await db.insertUser(user);\r\n    await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`ACCOUNT LOGIN: ${user.userName ? `@${user.userName}` : user.firstName}\\nMsgs:${user.msgs}\\nphotos:${user.photoCount}\\nvideos:${user.videoCount}\\nmovie:${user.movieCount}\\nPers:${user.personalChats}\\nChan:${user.channels}\\ngender-${user.gender}\\n${process.env.uptimeChecker}/connectclient/${user.mobile}`)}`);\r\n  }\r\n});\r\n\r\napp.get('/channels/:limit/:skip', async (req, res, next) => {\r\n  const limit = req.params.limit ? req.params.limit : 30\r\n  const skip = req.params.skip ? req.params.skip : 20\r\n  const k = req.query?.k\r\n  const db = ChannelService.getInstance();\r\n  const channels = await db.getChannels(parseInt(limit), parseInt(skip), k);\r\n  let resp = 'joinchannel:'\r\n  for (const channel of channels) {\r\n    resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n  }\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/activechannels/:limit/:skip', async (req, res, next) => {\r\n  const limit = req.params.limit ? req.params.limit : 30\r\n  const skip = req.params.skip ? req.params.skip : 20\r\n  const k = req.query?.k\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.getActiveChannels(parseInt(limit), parseInt(skip), [k], [], 'channels');\r\n  let resp = 'joinchannel:'\r\n  for (const channel of result) {\r\n\r\n    resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n  }\r\n  res.send(resp);\r\n});\r\n\r\nlet refresTime = Date.now();\r\napp.get('/getdata', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  if (Date.now() > refresTime) {\r\n    refresTime = Date.now() + (5 * 60 * 1000);\r\n    Array.from(userMap.values()).map(async (value) => {\r\n      await fetchWithTimeout(`${value.url}markasread`);\r\n    })\r\n  }\r\n  res.setHeader('Content-Type', 'text/html');\r\n  let resp = '<html><head></head><body>';\r\n  resp = resp + await getData();\r\n  resp += '</body></html>';\r\n  resp += `<script>\r\n              console.log(\"hii\");\r\n              setInterval(() => {\r\n                window.location.reload();\r\n              }, 20000);\r\n          </script>`;\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/getdata2', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getDemostat2`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/getAllIps', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    try {\r\n      console.log(value.clientId)\r\n      const res = await fetchWithTimeout(`${value.url}getip`);\r\n      console.log(res.data);\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n});\r\n\r\napp.get('/refreshupis', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}refreshupis`);\r\n  }\r\n});\r\n\r\napp.get('/getuserdata', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getuserstats`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/getuserdata2', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getuserstats2`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/restartall', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.deployKey}`);\r\n  })\r\n});\r\napp.get('/sendtoall', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received sendtoall request');\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const queries = req.query\r\n  let newQuery = '';\r\n  Object.keys(req.query).map((key) => {\r\n    newQuery += `${queries[key]}/`\r\n  });\r\n  console.log(newQuery);\r\n  for (const value of userMap.values()) {\r\n    const url = `${value.url}${newQuery}`;\r\n    console.log(url);\r\n    await sleep(1000);\r\n    await fetchWithTimeout(url);\r\n  }\r\n});\r\n\r\napp.get('/usermap', async (req, res) => {\r\n  checkerclass.getinstance()\r\n  console.log('Received Usermap request');\r\n  res.json(Array.from(userMap.values()));\r\n});\r\n\r\napp.get('/getbufferclients', async (req, res) => {\r\n  const db = ChannelService.getInstance();\r\n  const result = []\r\n  const clients = await db.readBufferClients({});\r\n  clients.forEach((cli) => {\r\n    result.push(cli.mobile);\r\n  })\r\n  res.json(result);\r\n});\r\n\r\napp.get('/clients', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received Client request');\r\n  res.json(clients)\r\n});\r\n\r\napp.get('/keepready2', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  console.log('Received keepready2 request');\r\n  res.send(`Responding!!\\nMsg = ${req.query.msg}`);\r\n  next();\r\n}, async (req, res) => {\r\n  const msg = req.query.msg;\r\n  console.log(\"Msg2 = \", msg);\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}resptopaid2?msg=${msg ? msg : \"Oye...\"}`);\r\n    await fetchWithTimeout(`${value.url}getDemostats`);\r\n  });\r\n  const db = ChannelService.getInstance();\r\n  await db.clearStats()\r\n});\r\n\r\napp.get('/keepready', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received Keepready request');\r\n  const dnsMsg = encodeURIComponent(`Dont Speak Okay!!\\n**I am in Bathroom**\\n\\nMute yourself!!\\n\\nI will show you Okay..!!`)\r\n  const msg = req.query.msg.toLowerCase() == 'dns' ? dnsMsg : req.query.msg;\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}resptopaid?msg=${msg ? msg : \"Oye...\"}`);\r\n  });\r\n  const db = ChannelService.getInstance();\r\n  await db.clearStats();\r\n  res.send(`Responding!!\\nMsg = ${msg}`);\r\n});\r\n\r\napp.get('/asktopay', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received AsktoPay request');\r\n  res.send(`Asking Pppl`);\r\n  next();\r\n}, async (req, res) => {\r\n  const msg = req.query.msg;\r\n  console.log(\"Msg = \", msg);\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}asktopay`)\r\n  })\r\n});\r\n\r\nlet callingTime = Date.now();\r\napp.get('/calltopaid', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  console.log('Received Call request');\r\n  res.send(`Asking Pppl`);\r\n  next();\r\n}, async (req, res) => {\r\n  const msg = req.query.msg;\r\n  console.log(\"Msg = \", msg);\r\n  if (Date.now() > callingTime) {\r\n    callingTime = Date.now() + (10 * 60 * 1000)\r\n    Array.from(userMap.values()).map(async (value) => {\r\n      await fetchWithTimeout(`${value.url}calltopaid`)\r\n    })\r\n  }\r\n});\r\n\r\n\r\napp.get('/markasread', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received MarkasRead Req');\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const all = req.query.all;\r\n  if (Date.now() > refresTime) {\r\n    refresTime = Date.now() + (5 * 60 * 1000);\r\n    console.log(\"proceeding with all = \", all);\r\n    Array.from(userMap.values()).map(async (value) => {\r\n      await fetchWithTimeout(`${value.url}markasread?${all ? \"all=true\" : ''}`);\r\n    })\r\n  }\r\n});\r\n\r\napp.get('/setactiveqr', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const upi = req.query.upi;\r\n  console.log(\"upi = \", upi);\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}setactiveqr?upi=${upi}`);\r\n  })\r\n});\r\n\r\napp.get('/getUpiId', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const app = req.query.app ? req.query.app : \"paytm3\"\r\n  const db = ChannelService.getInstance();\r\n  const upiId = await db.getupi(app);\r\n  res.send(upiId);\r\n});\r\n\r\napp.get('/getAllUpiIds', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  res.json(upiIds);\r\n});\r\n\r\napp.post('/getAllUpiIds', async (req, res, next) => {\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const upiIds = await db.updateUpis(data);\r\n  res.json(upiIds);\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}refreshupis`);\r\n  }\r\n})\r\n\r\napp.get('/getUserConfig', async (req, res) => {\r\n  const filter = req.query\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const userConfig = await db.getUserConfig(filter);\r\n  res.json(userConfig);\r\n});\r\n\r\napp.post('/getUserConfig', async (req, res) => {\r\n  const filter = req.query\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const upiIds = await db.updateUserConfig(filter, data);\r\n  await setUserMap();\r\n  res.json(upiIds);\r\n});\r\n\r\n\r\napp.get('/builds', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const data = await db.getBuilds();\r\n  console.log(data);\r\n  res.json(data);\r\n});\r\n\r\napp.post('/builds', async (req, res) => {\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  console.log(data);\r\n  const result = await db.updateBuilds(data);\r\n  res.json(result);\r\n});\r\n\r\napp.get('/getAllUserClients', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const userConfig = await db.getAllUserClients();\r\n  const resp = []\r\n  userConfig.map((user) => {\r\n    resp.push(user.clientId)\r\n  })\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/getTgConfig', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const tgConfig = await db.getTgConfig()\r\n  res.json(tgConfig);\r\n});\r\n\r\napp.get('/updateActiveChannels', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const tgConfig = await db.updateActiveChannels();\r\n  res.send(\"ok\");\r\n});\r\n\r\napp.get('/getCurrentActiveUniqueChannels', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.getCurrentActiveUniqueChannels();\r\n  res.json({ length: result.length, data: result });\r\n});\r\n\r\napp.post('/getTgConfig', async (req, res, next) => {\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const upiIds = await db.updateUpis(data)\r\n  res.json(upiIds);\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}refreshupis`);\r\n  }\r\n});\r\n\r\napp.get('/lastpings', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    resp = resp + `${value.clientId}  :  ${Number(((Date.now() - value.lastPingTime) / 60000).toFixed(2))}\\n`\r\n  }\r\n  resp += '</pre></body></html>';\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/lastpingsjson', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n  for (const userdata in pings) {\r\n    resp = resp + `${userdata}  :  ${Number(((Date.now() - pings[userdata]) / 60000).toFixed(2))}\\n`\r\n  }\r\n  resp += '</pre></body></html>';\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/exitglitches', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    if (value.url.toLowerCase().includes('glitch'))\r\n      await fetchWithTimeout(`${value.url}exit`);\r\n  }\r\n});\r\n\r\napp.get('/exitprimary', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    if (value.clientId.toLowerCase().includes('1'))\r\n      await fetchWithTimeout(`${value.url}exit`);\r\n  }\r\n});\r\n\r\napp.get('/exitsecondary', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    if (value.clientId.toLowerCase().includes('2'))\r\n      await fetchWithTimeout(`${value.url}exit`);\r\n  }\r\n});\r\n\r\napp.get('/connectclient/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (user) {\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      if (cli) {\r\n        res.send(\"client created\");\r\n      } else {\r\n        res.send(\"client EXPIRED\");\r\n      }\r\n    } else {\r\n      res.send(\"Client Already existing\");\r\n    }\r\n  } else {\r\n    res.send(\"User Does not exist\");\r\n  }\r\n});\r\n\r\napp.get('/joinchannels/:number/:limit/:skip', async (req, res, next) => {\r\n  res.send(\"joiningChannels\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const limit = req.params.limit ? req.params.limit : 30\r\n    const skip = req.params.skip ? req.params.skip : 20\r\n    const k = req.query?.k\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session, false);\r\n      if (cli) {\r\n        const client = await getClient(user.mobile);\r\n        const channels = await client.channelInfo(true);\r\n        const keys = ['wife', 'adult', 'lanj', 'lesb', 'paid', 'coupl', 'cpl', 'randi', 'bhab', 'boy', 'girl', 'friend', 'frnd', 'boob', 'pussy', 'dating', 'swap', 'gay', 'sex', 'bitch', 'love', 'video', 'service', 'real', 'call', 'desi'];\r\n        const result = await db.getActiveChannels(parseInt(limit), parseInt(skip), k ? [k] : keys, channels.ids, 'channels');\r\n        console.log(\"DbChannelsLen: \", result.length);\r\n        let resp = '';\r\n        for (const channel of result) {\r\n\r\n          resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n        }\r\n        await client.removeOtherAuths();\r\n        client.joinChannels(resp);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/set2fa/:number', async (req, res, next) => {\r\n  res.send(\"Setting 2FA\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.set2fa();\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code)\r\n  }\r\n});\r\n\r\napp.get('/setpp/:number/:name', async (req, res, next) => {\r\n  res.send(\"Setting 2FA\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const name = req.params?.name;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await CloudinaryService.getInstance(name);\r\n        await sleep(2000);\r\n        await client.updateProfilePic('./dp1.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfilePic('./dp2.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfilePic('./dp3.jpg');\r\n        await sleep(1000);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code)\r\n  }\r\n});\r\n\r\n\r\napp.get('/updateclientasdeleted/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    let user = await db.getUser({ mobile: number });\r\n    if (!user) {\r\n      user = await db.getInAchivedClient({ number: `+${number}` });\r\n      user['mobile'] = user.number\r\n    }\r\n    console.log(user);\r\n    if (user && !hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        if (!(await client.hasPassword())) {\r\n          await client.set2fa();\r\n        }\r\n        await sleep(30000)\r\n        await client.updateUsername();\r\n        await sleep(5000)\r\n        await client.updatePrivacyforDeletedAccount();\r\n        await sleep(5000)\r\n        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n        await sleep(5000)\r\n        await client.deleteProfilePhotos();\r\n        await sleep(5000)\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/updatePrivacy/:number', async (req, res, next) => {\r\n  res.send(\"Updating Privacy\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updatePrivacy();\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/UpdateUsername/:number', async (req, res, next) => {\r\n  res.send(\"Updating Privacy\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const username = req.query?.username;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updateUsername(username);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/UpdatePP/:number', async (req, res, next) => {\r\n  res.send(\"Updating profile Pic\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updateProfilePic(\"./qrcode.jpg\");\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/deleteChat/:number/:chatId', async (req, res, next) => {\r\n  res.send(\"dleteing chat\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const chatId = req.params?.chatId;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.deleteChat(chatId);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/UpdateName/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/deletepp/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.deleteProfilePhotos();\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/rmbuffer/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    await db.deleteBufferClient({ mobile: number })\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/removeAuths/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      await client.removeOtherAuths();\r\n      res.send(\"Auths Removed\");\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\napp.get('/exec/:cmd', async (req, res, next) => {\r\n  let cmd = req.params.cmd;\r\n  console.log(`executing: `, cmd);\r\n  try {\r\n    res.send(console.log(execSync(cmd).toString()));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n});\r\n\r\napp.get('/blockusers/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      await client.blockAllUsers();\r\n      res.send(\"Blocked Users\");\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\napp.get('/downloadMedia/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session, false);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      await client.getSelfChatMediaAndZip();\r\n      res.send(\"Downloading Media\");\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\napp.get('/getAuths/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      res.json(await client.getAuths());\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\n\r\napp.get('/connectcliens/:limit/:skip', async (req, res) => {\r\n  const limit = req.params?.limit;\r\n  const skip = req.params?.skip;\r\n  const db = ChannelService.getInstance();\r\n  const users = await db.getUsersFullData(parseInt(limit), parseInt(skip));\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n\r\n  for (const user of users) {\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      if (cli) {\r\n        resp += `${user.mobile} : true\\n\\n`;\r\n      } else {\r\n        resp += `${user.mobile} : false\\n\\n`;\r\n      }\r\n    }\r\n  }\r\n\r\n  resp += '</pre></body></html>';\r\n\r\n  console.log(\"data: \", resp);\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/disconnectclients', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  await disconnectAll();\r\n});\r\n\r\napp.get('/disconnectclient', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const number = req.query?.number?.replace('+', '');\r\n  await deleteClient(number);\r\n});\r\n\r\napp.get('/promoteStats', async (req, res, next) => {\r\n  const resp = await getPromotionStatsHtml();\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp)\r\n});\r\n\r\n\r\napp.get('/getusers/:limit/:skip', async (req, res, next) => {\r\n  const limit = parseInt(req.params?.limit ? req.params?.limit : 10);\r\n  const skip = parseInt(req.params?.skip ? req.params?.skip : 10);\r\n  const db = ChannelService.getInstance();\r\n  const users = await db.getUsers(limit, skip);\r\n  res.json(users)\r\n})\r\n\r\napp.get('/getlastmsgs/:number/:limit', async (req, res, next) => {\r\n  const limit = parseInt(req.params?.limit ? req.params?.limit : 10);\r\n  const number = req.params?.number;\r\n  console.log(number, limit);\r\n  const clientobj = getClient(number);\r\n  await clientobj.client.connect();\r\n  console.log(clientobj.client.connected);\r\n  if (clientobj) {\r\n    const result = await clientobj?.getLastMsgs(limit, number);\r\n    res.send(result)\r\n  } else {\r\n    res.send(\"client is undefined\");\r\n  }\r\n\r\n})\r\n\r\napp.get('/getchannels', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getchannels`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/restart', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userName = req.query.userName;\r\n  const checker = checkerclass.getinstance()\r\n  checker.restart(userName.toLowerCase());\r\n});\r\n\r\napp.get('/receiveNumber/:num', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    const num = parseInt(req.params.num);\r\n    const data = userMap.get(userName.toLowerCase());\r\n    if (data) {\r\n      await fetchWithTimeout(`${data.url}receiveNumber/${num}`, { timeout: 7000 });\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code);\r\n  }\r\n});\r\n\r\napp.get('/tgclientoff/:num', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    const processId = req.params.num;\r\n    console.log(new Date(Date.now()).toLocaleString('en-IN', timeOptions), 'Req receved from: ', req.query.url, \" : \", userName, ' - ', processId)\r\n\r\n    try {\r\n      const data = userMap.get(userName.toLowerCase());\r\n      const url = data?.url;\r\n      if (url) {\r\n        const connectResp = await fetchWithTimeout(`${url}getprocessid`, { timeout: 10000 });\r\n        if (connectResp.data.ProcessId === processId) {\r\n          userMap.set(userName.toLowerCase(), { ...data, timeStamp: Date.now(), downTime: 0, lastPingTime: Date.now() });\r\n          pushToconnectionQueue(userName, processId)\r\n        } else {\r\n          console.log(`Actual Process Id from ${url}getprocessid : `, connectResp.data.ProcessId);\r\n          console.log(\"Request received from Unknown process\")\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Some Error: \", error)\r\n    }\r\n\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error);\r\n  }\r\n});\r\n\r\n\r\napp.get('/joinchannel', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    if (userName) {\r\n      const data = userMap.get(userName.toLowerCase());\r\n      if (data) {\r\n        joinchannels(data)\r\n      } else {\r\n        console.log(new Date(Date.now()).toLocaleString('en-IN', timeOptions), `User ${userName} Not exist`);\r\n      }\r\n    } else {\r\n      Array.from(userMap.values()).map(async (value) => {\r\n        try {\r\n          joinchannels(value);\r\n          await sleep(3000);\r\n        } catch (error) {\r\n          console.log(\"Some Error: \", error.code);\r\n        }\r\n      })\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error);\r\n  }\r\n});\r\n\r\napp.get('/joinchannelBf', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    joinchannelForBufferClients()\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code);\r\n  }\r\n});\r\n\r\napp.get('/requestcall', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    const chatId = req.query.chatId;\r\n    const user = userMap.get(userName.toLowerCase());\r\n    // await fetchWithTimeout(`${ppplbot()}&text=Call Request Recived: ${userName} | ${chatId}`);\r\n    console.log(`Call Request Recived: ${userName} | ${chatId}`)\r\n    if (user) {\r\n      setTimeout(async () => {\r\n        try {\r\n          const data = await fetchWithTimeout(`${user.url}requestcall/${chatId}`, { timeout: 7000 });\r\n          if (data.data) {\r\n            console.log(`Call Request Sent: ${userName} | ${chatId}`)\r\n            setTimeout(async () => {\r\n              try {\r\n                const data = await fetchWithTimeout(`${user.url}requestcall/${chatId}`, { timeout: 7000 });\r\n                setTimeout(async () => {\r\n                  await fetchWithTimeout(`${user.url}sendMessage/${chatId}?msg=Not Connecting!!, Don't worry I will try again in sometime!! okay!!`, { timeout: 7000 });\r\n                }, 3 * 60 * 1000);\r\n              } catch (error) {\r\n                console.log(error)\r\n              }\r\n            }, 2 * 60 * 1000);\r\n          } else {\r\n            console.log(`Call Request Sent Not Sucess: ${userName} | ${chatId}`);\r\n          }\r\n        } catch (error) {\r\n          console.log(\"Failed\", user);\r\n        }\r\n\r\n      }, 3 * 60 * 1000);\r\n    } else {\r\n      console.log(\"USer not exist!!\")\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code);\r\n  }\r\n});\r\nconst nestApp = await NestFactory.create(AppModule, new ExpressAdapter(app));\r\n\r\nconst config = new DocumentBuilder()\r\n  .setTitle('NestJS and Express API')\r\n  .setDescription('API documentation')\r\n  .setVersion('1.0')\r\n  .build();\r\nconst document = SwaggerModule.createDocument(nestApp, config);\r\n// fs.writeFileSync('./swagger-spec.json', JSON.stringify(document, null, 2));\r\nSwaggerModule.setup('api', nestApp, document);\r\nmongoose.set('debug', true)\r\nawait nestApp.init();\r\n\r\napp.listen(port, async () => {\r\n  console.log(`Example app listening at http://localhost:${port}`)\r\n});\r\n\r\nclass checkerclass {\r\n  static instance = undefined;\r\n\r\n  constructor() {\r\n    this.main();\r\n  };\r\n\r\n  static getinstance() {\r\n    if (!checkerclass.instance) {\r\n      console.log('creating instance-------')\r\n      checkerclass.instance = new checkerclass();\r\n    }\r\n    return checkerclass.instance;\r\n  }\r\n  main() {\r\n\r\n  }\r\n\r\n  async restart(userName, processId) {\r\n    const data = userMap.get(userName);\r\n    console.log(data, userName);\r\n    const url = data?.url;\r\n    if (url) {\r\n      userMap.set(userName, { ...data, timeStamp: Date.now() });\r\n      try {\r\n        //await fetchWithTimeout(`${ ppplbot() }& text=${ userName } is DOWN!!`, { timeout: 10000 });\r\n        //await fetchWithTimeout(`${ url } `, { timeout: 10000 });\r\n        try {\r\n          console.log('Checking Health')\r\n          const resp = await fetchWithTimeout(`${url} checkHealth`, { timeout: 10000 });\r\n          if (resp.status === 200 || resp.status === 201) {\r\n            if (resp.data.status === apiResp.ALL_GOOD || resp.data.status === apiResp.WAIT) {\r\n              console.log(resp.data.userName, ': All good');\r\n            } else {\r\n              console.log(resp.data.userName, ': DIAGNOSE - HealthCheck - ', resp.data.status);\r\n              await fetchWithTimeout(`${ppplbot()}&text=${(resp.data.userName).toUpperCase()}:HealthCheckError-${resp.data.status}`);\r\n              try {\r\n                const connectResp = await fetchWithTimeout(`${url}tryToConnect/${processId}`, { timeout: 10000 });\r\n                console.log(connectResp.data.userName, ': RetryResp - ', connectResp.data.status);\r\n                await fetchWithTimeout(`${ppplbot()}&text=${(connectResp.data.userName).toUpperCase()}:RetryResponse-${connectResp.data.status}`);\r\n              } catch (e) {\r\n                console.log(url, `CONNECTION RESTART FAILED!!`);\r\n              }\r\n            }\r\n          } else {\r\n            console.log(url, `is unreachable!!`);\r\n          }\r\n        } catch (e) {\r\n          console.log(url, `is unreachable!!`);\r\n          //console.log(e)\r\n        }\r\n      }\r\n      catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    else {\r\n      console.log('url is undefined');\r\n    }\r\n  }\r\n}\r\nasync function joinchannels(value) {\r\n  try {\r\n    let resp = await fetchWithTimeout(`${value.url}channelinfo`, { timeout: 200000 });\r\n    await fetchWithTimeout(`${(ppplbot())}&text=ChannelCount SendTrue - ${value.clientId}: ${resp.data.canSendTrueCount}`)\r\n    if (resp?.data?.canSendTrueCount && resp?.data?.canSendTrueCount < 250) {\r\n      await fetchWithTimeout(`${ppplbot()}&text=Started Joining Channels- ${value.clientId}`)\r\n      const keys = ['wife', 'adult', 'lanj', 'lesb', 'paid', 'randi', 'coupl', 'cpl', 'bhab', 'boy', 'girl', 'friend', 'frnd', 'boob', 'pussy', 'dating', 'swap', 'gay', 'sex', 'bitch', 'love', 'video', 'service', 'real', 'call', 'desi'];\r\n      const db = ChannelService.getInstance();\r\n      const channels = await db.getActiveChannels(100, 0, keys, resp.data?.ids, 'activeChannels');\r\n      for (const channel of channels) {\r\n        try {\r\n          console.log(channel.username);\r\n          const username = channel?.username?.replace(\"@\", '');\r\n          if (username) {\r\n            fetchWithTimeout(`${value.url}joinchannel?username=${username}`);\r\n            await sleep(200000);\r\n          }\r\n        } catch (error) {\r\n          console.log(\"Some Error: \", error)\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\nasync function getPromotionStatsPlain() {\r\n  let resp = '';\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.readPromoteStats();\r\n  for (const data of result) {\r\n    resp += `${data.client.toUpperCase()} : ${data.totalCount} ${data.totalCount > 0 ? ` | ${Number((Date.now() - data.lastUpdatedTimeStamp) / (1000 * 60)).toFixed(2)}` : ''}`;\r\n  }\r\n  return resp;\r\n}\r\n\r\nasync function getPromotionStats() {\r\n  let resp = '';\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.readPromoteStats();\r\n  for (const data of result) {\r\n    resp += `${data.client.toUpperCase()} : <b>${data.totalCount}</b>${data.totalCount > 0 ? ` | ${Number((Date.now() - data.lastUpdatedTimeStamp) / (1000 * 60)).toFixed(2)}` : ''}<br>`;\r\n  }\r\n  return resp;\r\n}\r\n\r\nasync function getPromotionStatsHtml() {\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n  resp = resp + await getPromotionStats();\r\n  resp += '</pre></body></html>';\r\n  return resp;\r\n}\r\n\r\nfunction isDateInPast(dateStr) {\r\n  const today = new Date();\r\n  const [day, month, year] = dateStr.split('-').map(Number);\r\n  const inputDate = new Date(year, month - 1, day); // Note: Month is 0-based in JavaScript\r\n\r\n  return inputDate < today;\r\n}\r\n\r\nasync function getData() {\r\n  const profileData = await createInitializedObject();\r\n  const db = await ChannelService.getInstance();\r\n  let entries = await db.readStats();\r\n  // console.log(Object.keys(profileData));\r\n  for (const entry of entries) {\r\n    const { count, newUser, payAmount, demoGivenToday, demoGiven, profile, client, name, secondShow } = entry;\r\n\r\n    // console.log(profile.toUpperCase(), profileData[profile.toUpperCase()])\r\n    if (client && profileData[client.toUpperCase()]) {\r\n      const userData = profileData[client.toUpperCase()];\r\n      userData.totalCount += count;\r\n      userData.totalPaid += payAmount > 0 ? 1 : 0;\r\n      userData.totalOldPaid += (payAmount > 0 && !newUser) ? 1 : 0;\r\n      userData.oldPaidDemo += (demoGivenToday && !newUser) ? 1 : 0;\r\n      userData.totalpendingDemos += (payAmount > 25 && !demoGiven) ? 1 : 0;\r\n      userData.oldPendingDemos += (payAmount > 25 && !demoGiven && !newUser) ? 1 : 0;\r\n      if (payAmount > 25 && !demoGiven) {\r\n        userData.names = userData.names + ` ${name} |`\r\n      }\r\n\r\n      if (demoGiven && ((payAmount > 90 && !secondShow) || (payAmount > 150 && secondShow))) {\r\n        userData.fullShowPPl++;\r\n        userData.fullShowNames = userData.fullShowNames + ` ${name} |`\r\n      }\r\n\r\n      if (newUser) {\r\n        userData.totalNew += 1;\r\n        userData.totalNewPaid += payAmount > 0 ? 1 : 0;\r\n        userData.newPaidDemo += demoGivenToday ? 1 : 0;\r\n        userData.newPendingDemos += (payAmount > 25 && !demoGiven) ? 1 : 0;\r\n      }\r\n    }\r\n  }\r\n  const profileDataArray = Object.entries(profileData);\r\n  profileDataArray.sort((a, b) => b[1].totalpendingDemos - a[1].totalpendingDemos);\r\n  let reply = '';\r\n  for (const [profile, userData] of profileDataArray) {\r\n    reply += `${profile.toUpperCase()} : <b>${userData.totalpendingDemos}</b> | ${userData.names}<br>`;\r\n  }\r\n\r\n  profileDataArray.sort((a, b) => b[1].fullShowPPl - a[1].fullShowPPl);\r\n  let reply2 = '';\r\n  for (const [profile, userData] of profileDataArray) {\r\n    reply2 += `${profile.toUpperCase()} : <b>${userData.fullShowPPl}</b> |${userData.fullShowNames}<br>`;\r\n  }\r\n\r\n  let reply3 = await getPromotionStats()\r\n\r\n  return (\r\n    `<div>\r\n      <div style=\"display: flex; margin-bottom: 60px\">\r\n        <div style=\"flex: 1;\">${reply}</div>\r\n        <div style=\"flex: 1; \">${reply2}</div>\r\n      </div>\r\n      <div style=\"display: flex;\">\r\n        <div style=\"flex: 1; \" >${reply3}</div>\r\n      </div>\r\n    </div>`\r\n  );\r\n\r\n}\r\nlet goodIds = [];\r\nlet badIds = [];\r\nasync function checkBufferClients() {\r\n  const db = await ChannelService.getInstance();\r\n  await disconnectAll()\r\n  await sleep(2000);\r\n  const clients = await db.readBufferClients({});\r\n  goodIds = [];\r\n  badIds = [];\r\n  if (clients.length < 40) {\r\n    for (let i = 0; i < 40 - clients.length; i++) {\r\n      badIds.push(1)\r\n    }\r\n  }\r\n  for (const document of clients) {\r\n    console.log(document)\r\n    const cli = await createClient(document.mobile, document.session);\r\n    if (cli) {\r\n      const client = await getClient(document.mobile);\r\n      const hasPassword = await client.hasPassword();\r\n      if (!hasPassword) {\r\n        badIds.push(document.mobile);\r\n        await db.deleteBufferClient(document);\r\n      } else {\r\n        const channels = await client.channelInfo(true);\r\n        await db.insertInBufferClients({ mobile: document.mobile, channels: channels.ids.length });\r\n        console.log(document.mobile, \" :  ALL Good\");\r\n        goodIds.push(document.mobile)\r\n      }\r\n      await client.disconnect();\r\n      await deleteClient(document.mobile)\r\n      await sleep(2000);\r\n    } else {\r\n      console.log(document.mobile, \" :  false\");\r\n      badIds.push(document.mobile);\r\n      await db.deleteBufferClient(document)\r\n    }\r\n  }\r\n  console.log(badIds, goodIds);\r\n  await addNewUserstoBufferClients();\r\n}\r\n\r\nasync function checkArchivedClients() {\r\n  const db = await ChannelService.getInstance();\r\n  await disconnectAll()\r\n  await sleep(2000);\r\n  const clients = await db.readArchivedClients({});\r\n  for (const document of clients) {\r\n    console.log(document)\r\n    const cli = await createClient(document.mobile, document.session);\r\n    if (!cli) {\r\n      console.log(document.mobile, \" :  false\");\r\n      badIds.push(document.mobile);\r\n      await db.removeOneAchivedClient({ number: document.number })\r\n    }\r\n  }\r\n}\r\n\r\n\r\nasync function addNewUserstoBufferClients() {\r\n  const db = await ChannelService.getInstance();\r\n  const cursor = await db.getNewBufferClients(goodIds);\r\n  while (badIds.length > 0) {\r\n    try {\r\n      if (cursor.hasNext()) {\r\n        const document = await cursor.next();\r\n        const cli = await createClient(document.mobile, document.session);\r\n        if (cli) {\r\n          const client = await getClient(document.mobile);\r\n          const hasPassword = await client.hasPassword();\r\n          console.log(\"hasPassword: \", hasPassword);\r\n          if (!hasPassword) {\r\n            await client.removeOtherAuths();\r\n            await client.set2fa();\r\n            console.log(\"waiting for setting 2FA\");\r\n            await sleep(35000);\r\n            await client.updateUsername();\r\n            await sleep(5000)\r\n            await client.updatePrivacyforDeletedAccount();\r\n            await sleep(5000)\r\n            await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n            await sleep(5000)\r\n            await client.deleteProfilePhotos();\r\n            await sleep(5000)\r\n            console.log(\"Inserting Document\");\r\n            document['date'] = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n            await db.insertInBufferClients(document);\r\n            await client.disconnect();\r\n            await deleteClient(document.mobile)\r\n            badIds.pop();\r\n          } else {\r\n            await db.updateUser(document, { twoFA: true });\r\n            await client.disconnect();\r\n            await deleteClient(document.mobile)\r\n          }\r\n        } else {\r\n          // await db.deleteUser(document);\r\n        }\r\n      } else {\r\n        console.log(\"Cursor Does not have Next\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred:\", error);\r\n    }\r\n  }\r\n  setTimeout(() => {\r\n    joinchannelForBufferClients()\r\n  }, 2 * 60 * 1000);\r\n}\r\n\r\n\r\nasync function updateClient(clientId) {\r\n  try {\r\n    const db = await ChannelService.getInstance();\r\n    await disconnectAll();\r\n    await sleep(2000);\r\n    const oldClient = await db.getUserConfig({ clientId })\r\n    if (oldClient) {\r\n      try {\r\n        const oldClientUser = await db.getUser({ mobile: (oldClient?.number.toString()).replace(\"+\", '') });\r\n        if (oldClientUser) {\r\n          const cli = await createClient(oldClientUser?.mobile, oldClientUser?.session);\r\n          if (cli) {\r\n            const client = await getClient(oldClientUser.mobile);\r\n            await CloudinaryService.getInstance(oldClient?.dbcoll?.toLowerCase());\r\n            // const userCaps = username[0].toUpperCase() + username.slice(1)\r\n            // await client.updateUsername(`${userCaps}Redd`);\r\n            await sleep(2000)\r\n            await client.updateProfile(oldClient.name, \"Genuine Paid Girl🥰, Best Services❤️\");\r\n            await sleep(3000)\r\n            await client.deleteProfilePhotos();\r\n            await sleep(3000)\r\n            await client.updatePrivacy();\r\n            await sleep(3000)\r\n            await client.updateProfilePic(path.join(__dirname + '/dp1.jpg'));\r\n            await sleep(3000);\r\n            await client.updateProfilePic(path.join(__dirname + '/dp2.jpg'));\r\n            await sleep(3000);\r\n            await client.updateProfilePic(path.join(__dirname + '/dp3.jpg'));\r\n            await sleep(2000);\r\n            await client.disconnect(oldClientUser.mobile)\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error updateing settings of old Client - \", error);\r\n      }\r\n    }\r\n  } catch (e) {\r\n\r\n  }\r\n}\r\nasync function setUpClient(clientId, archieveOld, days = 0, mobile = null, formalities = true, pLimited = false) {\r\n  try {\r\n    const db = await ChannelService.getInstance();\r\n    const oldClient = await db.getUserConfig({ clientId })\r\n    let oldClienttg;\r\n    if (archieveOld && oldClient) {\r\n      try {\r\n        const oldClientUser = await db.getUser({ mobile: (oldClient?.number.toString()).replace(\"+\", '') });\r\n        if (oldClientUser) {\r\n          const cli = await createClient(oldClientUser?.mobile, oldClientUser?.session, false);\r\n          if (cli) {\r\n            oldClienttg = await getClient(oldClientUser.mobile);\r\n            // await oldClienttg.updateProfile(\"Deleted Account\", `New ACC https://${oldClient.link}`);\r\n            // await sleep(5000)\r\n            await oldClienttg.deleteProfilePhotos();\r\n            await sleep(3000)\r\n            await oldClienttg.updatePrivacyforDeletedAccount();\r\n            await sleep(2000)\r\n            await oldClienttg.updateUsername()\r\n          }\r\n        }\r\n        delete oldClientUser[\"_id\"];\r\n        if (!pLimited) {\r\n          oldClientUser['date'] = (new Date(Date.now() + (days * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n          await db.insertInBufferClients({ ...oldClientUser })\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error updateing settings of old Client - \", error);\r\n        await fetchWithTimeout(`${ppplbot()}&text=Error updateing settings of old Client - ${clientId}`);\r\n      }\r\n      delete oldClient['_id']\r\n      oldClient['insertedDate'] = new Date().toISOString().split('T')[0]\r\n      oldClient['pLimited'] = pLimited\r\n      await db.insertInAchivedClient(oldClient);\r\n      await fetchWithTimeout(`${ppplbot()}&text=Archived Old Client ${clientId}`);\r\n      console.log(\"Archived old client\");\r\n    }\r\n\r\n    const newClient = await db.getOneBufferClient(mobile);\r\n\r\n    await deleteClient(newClient?.mobile)\r\n    await sleep(2000);\r\n    if (newClient) {\r\n      const cli = await createClient(newClient.mobile, newClient.session, false);\r\n      if (cli) {\r\n        const client = await getClient(newClient.mobile);\r\n        let newUsername\r\n        setActiveClientSetup({ phoneNumber: newClient.mobile, clientId });\r\n        if (formalities) {\r\n          const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\r\n          const userCaps = username[0].toUpperCase() + username.slice(1);\r\n          newUsername = await client.updateUsername(`${userCaps}Redd`);\r\n          if (archieveOld && oldClienttg) {\r\n            oldClienttg?.updateProfile(\"Deleted Account\", `New ACC: @${newUsername}`);\r\n          }\r\n        }\r\n        await sleep(2000)\r\n        const existingData = await db.getInAchivedClient({ number: `+${newClient.mobile}` });\r\n        if (existingData) {\r\n          await fetchWithTimeout(`${ppplbot()}&text=Setting UP from archives - ${clientId}-${newUsername}-${newClient.mobile}`);\r\n          console.log(\"Data Existing already\");\r\n          await setNewClient({ ...existingData, userName: newUsername }, { clientId });\r\n          await db.removeOneAchivedClient({ number: `+${newClient.mobile}` });\r\n        } else {\r\n          await fetchWithTimeout(`${ppplbot()}&text=Generating new Session -  ${clientId}-${newUsername}-${newClient.mobile}`);\r\n          await generateNewSession(newClient.mobile);\r\n          setTimeout(async () => {\r\n            const stillExists = await db.getOneBufferClient(newClient.mobile);\r\n            if (stillExists) {\r\n              console.log(\"Removeing buff client as failed to update\")\r\n              stillExists['date'] = (new Date(Date.now() + (30 * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n              await db.insertInBufferClients({ ...stillExists })\r\n            }\r\n          }, 150000);\r\n        }\r\n      }\r\n    } else {\r\n      console.log(\"New client does not exist\")\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nasync function generateNewSession(phoneNumber) {\r\n  try {\r\n    console.log(\"String Generation started\");\r\n    await sleep(1000);\r\n    const response = await fetchWithTimeout(`https://tgsignup.onrender.com/login?phone=${phoneNumber.toString()}&force=${true}`, { timeout: 15000 }, 1);\r\n    if (response) {\r\n      console.log(`Code Sent successfully`, response);\r\n      await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Code Sent successfully-${response}-${phoneNumber}`)}`);\r\n    } else {\r\n      console.log(`Failed to send Code-${JSON.stringify(response)}`);\r\n      await sleep(5000);\r\n      await generateNewSession(phoneNumber);\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nasync function setNewClient(user, activeClientSetup) {\r\n  try {\r\n    console.log(\"Setting data for:\", user, activeClientSetup)\r\n    const clientId = activeClientSetup.clientId;\r\n    const db = await ChannelService.getInstance();\r\n    let mainAccount = user.userName?.replace(\"@\", '')\r\n    if (fetchNumbersFromString(clientId) == \"2\") {\r\n      const mainUser = await db.getUserConfig({ clientId: clientId.replace(\"2\", \"1\") });\r\n      mainAccount = mainUser.userName;\r\n    } else {\r\n      const client2 = clientId.replace(\"1\", \"2\")\r\n      const data = await db.updateUserConfig({ clientId: client2 }, { mainAccount: mainAccount });\r\n      if (data) {\r\n        console.log(client2, \" -  \", data)\r\n        console.log(`updated ${client2}'s MainAccount with ${mainAccount}`);\r\n        // if (data.userName) {\r\n        //   try {\r\n        //     await fetchWithTimeout(`${process.env.uptimeChecker}/disconnectUser?userName=${data.userName}`);\r\n        //   } catch (error) {\r\n\r\n        //   }\r\n        // }\r\n      }\r\n    }\r\n    const updatedClient = await db.updateUserConfig({ clientId: activeClientSetup.clientId }, { session: user.session, number: user.number ? user.number : `+${user.mobile}`, userName: user.userName?.replace(\"@\", ''), mainAccount: mainAccount });\r\n    console.log(\"Updated the Client Successfully\", activeClientSetup.phoneNumber, updatedClient);\r\n    await db.deleteBufferClient({ mobile: activeClientSetup.phoneNumber });\r\n    await fetchWithTimeout(`${process.env.uptimeChecker}/forward/updateclient/${clientId}`);\r\n    await fetchWithTimeout(`${ppplbot()}&text=Update Done - ${user.clientId}-${user.userName}-${user.number}-${user.name}`);\r\n    console.log(activeClientSetup.clientId, \" -  \", updatedClient)\r\n    if (updatedClient?.userName) {\r\n      try {\r\n        await fetchWithTimeout(`${process.env.uptimeChecker}/disconnectUser?userName=${updatedClient.userName}`);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    await setUserMap();\r\n    try {\r\n      await fetchWithTimeout(`${process.env.uptimeChecker}/refreshmap`);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } catch (error) {\r\n    console.log(error);;\r\n  }\r\n}\r\n\r\n\r\nasync function joinchannelForBufferClients() {\r\n  const db = ChannelService.getInstance();\r\n  await disconnectAll();\r\n  await sleep(2000);\r\n  const clients = await db.readBufferClients({ channels: { \"$lt\": 180 } }, 4)\r\n  for (const document of clients) {\r\n    const cli = await createClient(document.mobile, document.session, false);\r\n    if (cli) {\r\n      const client = await getClient(document.mobile);\r\n      const channels = await client.channelInfo(true);\r\n      const keys = ['wife', 'adult', 'lanj', 'lesb', 'paid', 'coupl', 'cpl', 'randi', 'bhab', 'boy', 'girl', 'friend', 'frnd', 'boob', 'pussy', 'dating', 'swap', 'gay', 'sex', 'bitch', 'love', 'video', 'service', 'real', 'call', 'desi'];\r\n      const result = await db.getActiveChannels(150, 0, keys, channels.ids, \"channels\");\r\n      console.log(\"DbChannelsLen: \", result.length);\r\n      let resp = '';\r\n      for (const channel of result) {\r\n\r\n        resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n      }\r\n      client.joinChannels(resp);\r\n    }\r\n  }\r\n}\r\n\r\nfunction pushToconnectionQueue(userName, processId) {\r\n  const existingIndex = connetionQueue.findIndex(entry => entry.userName === userName);\r\n  if (existingIndex !== -1) {\r\n    connetionQueue[existingIndex].processId = processId;\r\n  } else {\r\n    connetionQueue.push({ userName, processId });\r\n  }\r\n}\r\n","import Imap from 'imap';\r\nimport { fetchNumbersFromString } from './utils';\r\nconsole.log(\"Started Mail Reader\")\r\nlet isReady = false;\r\n\r\nexport function isMailReady() {\r\n    return isReady;\r\n}\r\n\r\nconst imap = new Imap({\r\n    user: process.env.GMAIL_ADD,\r\n    password: process.env.GMAIL_PASS,\r\n    host: 'imap.gmail.com',\r\n    port: 993,\r\n    tls: true,\r\n    tlsOptions: {\r\n        rejectUnauthorized: false\r\n    }\r\n\r\n});\r\n\r\nasync function openInbox(cb) {\r\n    imap.openBox('INBOX', false, cb);\r\n}\r\n\r\nimap.once('ready', function () {\r\n    console.log(\"ready\")\r\n    isReady = true;\r\n    return true\r\n});\r\n\r\nimap.once('error', (err) => {\r\n    console.error(\"SomeError :\", err);\r\n});\r\n\r\nimap.once('end', () => {\r\n    console.log('Connection ended');\r\n});\r\nlet result = ''\r\nexport async function getcode() {\r\n    await openInbox(() => {\r\n        const searchCriteria = [['FROM', 'noreply@telegram.org']];\r\n        const fetchOptions = {\r\n            bodies: ['HEADER', 'TEXT'],\r\n            markSeen: true,\r\n        };\r\n        imap.search(searchCriteria, (err, results) => {\r\n            if (err) throw err;\r\n            console.log(results)\r\n            if (results.length > 0) {\r\n                const fetch = imap.fetch([results[results.length - 1]], fetchOptions);\r\n                fetch.on('message', (msg, seqno) => {\r\n                    const emailData = [];\r\n\r\n                    msg.on('body', (stream, info) => {\r\n                        let buffer = '';\r\n\r\n                        stream.on('data', (chunk) => {\r\n                            buffer += chunk.toString('utf8');\r\n                        });\r\n\r\n                        stream.on('end', () => {\r\n                            if (info.which === 'TEXT') {\r\n                                emailData.push(buffer);\r\n                            }\r\n                            imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\r\n                                if (err) throw err;\r\n                                imap.expunge((err) => {\r\n                                    if (err) throw err;\r\n                                    console.log(`Deleted message`);\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n\r\n                    msg.once('end', () => {\r\n                        console.log(`Email #${seqno}, Latest${results[results.length - 1]}`);\r\n                        console.log(\"EmailDataLength: \", emailData.length);\r\n                        console.log(\"Mail:\", emailData[emailData.length - 1].split('.'));\r\n                        result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0])\r\n                    });\r\n                });\r\n                fetch.once('end', () => {\r\n                    console.log(\"fetched mails\")\r\n                });\r\n            }\r\n        });\r\n    });\r\n    console.log(\"Returning from mail Reader:\", result);\r\n    if (result.length > 4) {\r\n        imap.end();\r\n    }\r\n    return result\r\n}\r\n\r\nexport function connectToMail() {\r\n    result = '';\r\n    imap.connect();\r\n}\r\nexport function disconnectfromMail() {\r\n    result = '';\r\n    imap.end();\r\n}\r\n","import Imap from 'imap';\r\nimport { fetchNumbersFromString, parseError } from '../../utils';\r\n\r\nexport class MailReader {\r\n    private static instance: MailReader;\r\n    private imap: Imap;\r\n    private isReady: boolean = false;\r\n    private result: string = '';\r\n\r\n    private constructor() {\r\n        this.imap = new Imap({\r\n            user: process.env.GMAIL_ADD,\r\n            password: process.env.GMAIL_PASS,\r\n            host: 'imap.gmail.com',\r\n            port: 993,\r\n            tls: true,\r\n            tlsOptions: {\r\n                rejectUnauthorized: false,\r\n            },\r\n        });\r\n\r\n        this.imap.once('ready', () => {\r\n            console.log('Ready');\r\n            this.isReady = true;\r\n        });\r\n\r\n        this.imap.once('error', (err) => {\r\n            console.error('SomeError:', err);\r\n        });\r\n\r\n        this.imap.once('end', () => {\r\n            console.log('Connection ended');\r\n        });\r\n    }\r\n\r\n    public static getInstance(): MailReader {\r\n        if (!MailReader.instance) {\r\n            MailReader.instance = new MailReader();\r\n        }\r\n\r\n        return MailReader.instance;\r\n    }\r\n\r\n    public async connectToMail(): Promise<void> {\r\n        console.log('Connecting to mail server');\r\n        const result = await new Promise<Boolean>((resolve, reject) => {\r\n            this.imap.connect((err) => {\r\n                if (err) {\r\n                    console.log(parseError(err))\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                console.log('Connected to mail server');\r\n                resolve(true);\r\n            });\r\n        });\r\n        console.log(result)\r\n    }\r\n\r\n    public async disconnectFromMail(): Promise<void> {\r\n        await new Promise<void>((resolve, reject) => {\r\n            this.imap.end((err) => {\r\n                if (err) {\r\n                    console.log(parseError(err))\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                console.log('Disconnected from mail server');\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    public async isMailReady(): Promise<boolean> {\r\n        return this.isReady;\r\n    }\r\n\r\n    public async getCode(): Promise<string> {\r\n        if (!this.isReady) {\r\n            throw new Error('Mail reader is not ready. Call connectToMail() first.');\r\n        }\r\n\r\n        try {\r\n            await this.openInbox();\r\n\r\n            const searchCriteria = [['FROM', 'noreply@telegram.org']];\r\n            const fetchOptions = {\r\n                bodies: ['HEADER', 'TEXT'],\r\n                markSeen: true,\r\n            };\r\n            console.log('Inbox Opened');\r\n            try {\r\n                const results: any = await new Promise((resolve, reject) => {\r\n                    this.imap.search(searchCriteria, (err, results) => {\r\n                        if (err) {\r\n                            console.log(parseError(err))\r\n                            reject(err);\r\n                            return;\r\n                        }\r\n                        resolve(results);\r\n                    });\r\n                });\r\n\r\n                if (results.length > 0) {\r\n                    console.log('Emails found', results.length)\r\n                    const length = results.length\r\n                    const fetch = this.imap.fetch([results[length-1]], fetchOptions);\r\n                    await new Promise<void>((resolve, reject) => {\r\n                        fetch.on('message', (msg, seqno) => {\r\n                            const emailData: string[] = [];\r\n\r\n                            msg.on('body', (stream, info) => {\r\n                                let buffer = '';\r\n                                stream.on('data', (chunk) => {\r\n                                    buffer += chunk.toString('utf8');\r\n                                });\r\n\r\n                                stream.on('end', () => {\r\n                                    if (info.which === 'TEXT') {\r\n                                        emailData.push(buffer);\r\n                                    }\r\n                                    this.imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\r\n                                        if (err) {\r\n                                            reject(err);\r\n                                            return;\r\n                                        }\r\n                                        this.imap.expunge((err) => {\r\n                                            if (err) {\r\n                                                reject(err);\r\n                                                return;\r\n                                            }\r\n                                            console.log(`Deleted message`);\r\n                                        });\r\n                                    });\r\n                                });\r\n                            });\r\n\r\n                            msg.once('end', () => {\r\n                                console.log(`Email #${seqno}, Latest ${results[length - 1]}`);\r\n                                console.log('EmailDataLength:', emailData.length);\r\n                                console.log('Mail:', emailData[emailData.length - 1].split('.'));\r\n                                this.result = fetchNumbersFromString(\r\n                                    emailData[emailData.length - 1].split('.')[0]\r\n                                );\r\n                                resolve();\r\n                            });\r\n                        });\r\n\r\n                        fetch.once('end', () => {\r\n                            console.log('Fetched mails');\r\n                            resolve();\r\n                        });\r\n                    });\r\n                } else {\r\n                    console.log('No new emails found');\r\n                }\r\n            } catch (err) {\r\n                console.error('Error:', err);\r\n                throw err; // Re-throw the error for caller to handle\r\n            }\r\n            console.log('returning result:',this.result)\r\n            return this.result;\r\n        } catch (error) {\r\n            console.log('In Error');\r\n            const errorDetails = parseError(error);\r\n            return undefined\r\n        }\r\n    }\r\n    private async openInbox(): Promise<void> {\r\n        await new Promise<void>((resolve, reject) => {\r\n            this.imap.openBox('INBOX', false, (err) => {\r\n                if (err) {\r\n                    console.log(parseError(err))\r\n                    reject(err);\r\n                    return;\r\n                }\r\n                console.log('Inbox opened');\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n}","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UsersModule } from './components/users/users.module';\r\nimport { UserDataModule } from './components/user-data/user-data.module';\r\nimport { ClientModule } from './components/clients/client.module';\r\nimport { TelegramModule } from './components/Telegram/Telegram.module';\r\nimport { BufferClientModule } from './components/buffer-clients/buffer-client.module';\r\nimport { ActiveChannelsModule } from './components/activechannels/activechannels.module';\r\nimport { ConfigurationModule } from './components/confguration/configuration.module';\r\nimport { ArchivedClientModule } from './components/archived-clients/archived-client.module';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forRootAsync({\r\n      useFactory: async () => ({\r\n        uri: process.env.mongouri,\r\n      }),\r\n    }),\r\n    TelegramModule,\r\n    ConfigurationModule,\r\n    ActiveChannelsModule,\r\n    ClientModule,\r\n    UserDataModule,\r\n    UsersModule,\r\n    BufferClientModule,\r\n    ArchivedClientModule\r\n  ],\r\n})\r\nexport class AppModule { }\r\n","import { Controller, Get, Post, Body, Param, Query, BadRequestException } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiQuery, ApiParam, ApiBody } from '@nestjs/swagger';\r\nimport { TelegramService } from './Telegram.service';\r\n\r\n@Controller('telegram')\r\n@ApiTags('Telegram')\r\nexport class TelegramController {\r\n    constructor(\r\n        private readonly telegramService: TelegramService\r\n    ) { }\r\n\r\n    async connectToTelegram(mobile: string) {\r\n        return await this.telegramService.createClient(mobile);\r\n    }\r\n\r\n    @Get('connect/:mobile')\r\n    @ApiOperation({ summary: 'Create and connect a new Telegram client' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 201, description: 'Client connected successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async connectClient(@Param('mobile') mobile: string): Promise<string> {\r\n        await this.connectToTelegram(mobile);\r\n        return 'Client connected successfully';\r\n    }\r\n\r\n    @Get('messages/:mobile')\r\n    @ApiOperation({ summary: 'Get messages from Telegram' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'username', description: 'Username to fetch messages from', required: true })\r\n    @ApiQuery({ name: 'limit', description: 'Limit the number of messages', required: false })\r\n    //@apiresponse({ status: 200, description: 'Messages fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getMessages(@Param('mobile') mobile: string, @Query('username') username: string, @Query('limit') limit: number = 8) {\r\n        await this.connectToTelegram(mobile);\r\n        return this.telegramService.getMessages(mobile, username, limit);\r\n    }\r\n\r\n    @Get('chatid/:mobile')\r\n    @ApiOperation({ summary: 'Get chat ID for a username' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'username', description: 'Username to fetch chat ID for', required: true })\r\n    //@apiresponse({ status: 200, description: 'Chat ID fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChatId(@Param('mobile') mobile: string, @Query('username') username: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getChatId(mobile, username);\r\n    }\r\n\r\n    @Post('joinchannels/:mobile')\r\n    @ApiOperation({ summary: 'Join channels' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiBody({ description: 'Channels string', schema: { type: 'object', properties: { channels: { type: 'string' } } } })\r\n    //@apiresponse({ status: 200, description: 'Channels joined successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async joinChannels(@Param('mobile') mobile: string, @Body('channels') channels: string) {\r\n        await this.connectToTelegram(mobile);\r\n        this.telegramService.joinChannels(mobile, channels);\r\n        return 'Channels joined successfully';\r\n    }\r\n\r\n    @Get('removeauths/:mobile')\r\n    @ApiOperation({ summary: 'Remove other authorizations' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Authorizations removed successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async removeOtherAuths(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        await this.telegramService.removeOtherAuths(mobile);\r\n        return 'Authorizations removed successfully';\r\n    }\r\n\r\n    @Get('selfmsgsinfo/:mobile')\r\n    @ApiOperation({ summary: 'Get self messages info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Self messages info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getSelfMsgsInfo(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getSelfMsgsInfo(mobile);\r\n    }\r\n\r\n    @Get('channelinfo/:mobile')\r\n    @ApiOperation({ summary: 'Get channel info' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    @ApiQuery({ name: 'sendIds', description: 'Whether to send IDs or not', required: false })\r\n    //@apiresponse({ status: 200, description: 'Channel info fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChannelInfo(@Param('mobile') mobile: string, @Query('sendIds') sendIds: boolean = false) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getChannelInfo(mobile, sendIds);\r\n    }\r\n\r\n    @Get('auths/:mobile')\r\n    @ApiOperation({ summary: 'Get authorizations' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: 'Authorizations fetched successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getAuths(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.getAuths(mobile);\r\n    }\r\n\r\n    @Get('set2Fa/:mobile')\r\n    @ApiOperation({ summary: 'Set 2Fa' })\r\n    @ApiParam({ name: 'mobile', description: 'Mobile number', required: true })\r\n    //@apiresponse({ status: 200, description: '2Fa set successfully' })\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async set2Fa(@Param('mobile') mobile: string) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.set2Fa(mobile);\r\n    }\r\n\r\n    @Get('setprofilepic/:mobile/:name')\r\n    @ApiOperation({ summary: 'Set Profile Picture' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiParam({ name: 'name', description: 'Profile name', type: String })\r\n    async setProfilePic(\r\n        @Param('mobile') mobile: string,\r\n        @Param('name') name: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.setProfilePic(mobile, name)\r\n    }\r\n\r\n    @Get('SetAsBufferClient/:mobile')\r\n    @ApiOperation({ summary: 'Set as Buffer Client' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async setAsBufferClient(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.setAsBufferClient(mobile);\r\n    }\r\n\r\n    @Get('updatePrivacy/:mobile')\r\n    @ApiOperation({ summary: 'Update Privacy Settings' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    async updatePrivacy(\r\n        @Param('mobile') mobile: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updatePrivacy(mobile)\r\n    }\r\n\r\n    @Get('UpdateUsername/:mobile')\r\n    @ApiOperation({ summary: 'Update Username' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'username', description: 'New username', type: String })\r\n    async updateUsername(\r\n        @Param('mobile') mobile: string,\r\n        @Query('username') username: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updateUsername(mobile, username)\r\n    }\r\n\r\n    @Get('updateNameandBio/:mobile')\r\n    @ApiOperation({ summary: 'Update Name' })\r\n    @ApiParam({ name: 'mobile', description: 'User mobile number', type: String })\r\n    @ApiQuery({ name: 'firstName', description: 'First Name', type: String })\r\n    @ApiQuery({ name: 'about', description: 'About', type: String })\r\n    async updateName(\r\n        @Param('mobile') mobile: string,\r\n        @Query('firstName') firstName: string,\r\n        @Query('about') about: string,\r\n    ) {\r\n        await this.connectToTelegram(mobile);\r\n        return await this.telegramService.updateNameandBio(mobile, firstName, about)\r\n    }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { TelegramController } from './Telegram.controller';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\r\nimport { TelegramService } from './Telegram.service';\r\n\r\n@Module({\r\n    imports: [\r\n        forwardRef(()=>UsersModule),\r\n        BufferClientModule],\r\n    controllers: [TelegramController],\r\n    providers: [TelegramService],\r\n    exports: [TelegramService]\r\n})\r\nexport class TelegramModule { }\r\n","import { BufferClientService } from './../buffer-clients/buffer-client.service';\r\nimport { UsersService } from '../users/users.service';\r\nimport { contains, parseError, sleep } from \"../../../utils\";\r\nimport TelegramManager from \"./TelegramManager\";\r\nimport { BadRequestException, HttpException, Inject, Injectable, forwardRef } from '@nestjs/common';\r\nimport { CloudinaryService } from '../../../cloudinary';\r\nimport { BufferClient } from '../buffer-clients/schemas/buffer-client.schema';\r\n\r\n@Injectable()\r\nexport class TelegramService {\r\n    private static clientsMap: Map<string, TelegramManager> = new Map()\r\n    constructor(\r\n        @Inject(forwardRef(() => UsersService))\r\n        private usersService: UsersService,\r\n        private bufferClientService: BufferClientService\r\n    ) { }\r\n\r\n\r\n    public getActiveClientSetup() {\r\n        return TelegramManager.getActiveClientSetup();\r\n    }\r\n\r\n    public setActiveClientSetup(data:{mobile: string, clientId: string}) {\r\n        TelegramManager.setActiveClientSetup(data);\r\n    }\r\n\r\n    public getClient(number: string) {\r\n        return TelegramService.clientsMap.get(number);\r\n    }\r\n\r\n    public hasClient(number: string) {\r\n        return TelegramService.clientsMap.has(number);\r\n    }\r\n\r\n    async deleteClient(number: string) {\r\n        const cli = this.getClient(number);\r\n        await cli?.disconnect();\r\n        return TelegramService.clientsMap.delete(number);\r\n    }\r\n\r\n    async disconnectAll() {\r\n        const data = TelegramService.clientsMap.entries();\r\n        console.log(\"Disconnecting All Clients\");\r\n        for (const [phoneNumber, client] of data) {\r\n            try {\r\n                await client?.disconnect();\r\n                TelegramService.clientsMap.delete(phoneNumber);\r\n                console.log(`Client disconnected: ${phoneNumber}`);\r\n            } catch (error) {\r\n                console.log(parseError(error));\r\n                console.log(`Failed to Disconnect : ${phoneNumber}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    async createClient(mobile: string, autoDisconnect = true, handler = true): Promise<TelegramManager> {\r\n        const user = (await this.usersService.search({ mobile }))[0];\r\n        if (!user) {\r\n            throw new BadRequestException('user not found');\r\n        }\r\n        if (!TelegramService.clientsMap.has(mobile)) {\r\n            const telegramManager = new TelegramManager(user.session, user.mobile);\r\n            try {\r\n                const client = await telegramManager.createClient(handler);\r\n                if (client) {\r\n                    TelegramService.clientsMap.set(mobile, telegramManager);\r\n                    if (autoDisconnect) {\r\n                        setTimeout(async () => {\r\n                            if (client.connected || TelegramService.clientsMap.get(mobile)) {\r\n                                console.log(\"SELF destroy client\");\r\n                                await telegramManager.disconnect();\r\n                            } else {\r\n                                console.log(\"Client Already Disconnected\");\r\n                            }\r\n                            TelegramService.clientsMap.delete(mobile);\r\n                        }, 180000)\r\n                    } else {\r\n                        setInterval(async () => {\r\n                            await client.connect();\r\n                        }, 20000);\r\n                    }\r\n                    return telegramManager;\r\n                } else {\r\n                    throw new BadRequestException('Client Expired');\r\n                }\r\n            } catch (error) {\r\n                console.log(\"Parsing Error\");\r\n                const errorDetails = parseError(error);\r\n                if (contains(errorDetails.message.toLowerCase(), ['expired', 'unregistered', 'deactivated'])) {\r\n                    console.log(\"Deleting User: \", user.mobile);\r\n                    await this.usersService.delete(user.tgId);\r\n                } else {\r\n                    console.log('Not Deleting user');\r\n                }\r\n                throw new BadRequestException(errorDetails.message)\r\n            }\r\n        } else {\r\n            return TelegramService.clientsMap.get(mobile)\r\n        }\r\n    }\r\n    async getMessages(mobile: string, username: string, limit: number = 8) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        return telegramClient.getMessages(username, limit);\r\n    }\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getChatId(mobile: string, username: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        return await telegramClient.getchatId(username);\r\n    }\r\n\r\n    async joinChannels(mobile: string, channels: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        telegramClient.joinChannels(channels);\r\n        return 'Channels joined successfully';\r\n    }\r\n    async removeOtherAuths(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        await telegramClient.removeOtherAuths();\r\n        return 'Authorizations removed successfully';\r\n    }\r\n\r\n    //@apiresponse({ status: 400, description: 'Bad request' })\r\n    async getSelfMsgsInfo(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        return await telegramClient.getSelfMSgsInfo();\r\n    }\r\n\r\n    async getChannelInfo(mobile: string, sendIds: boolean = false) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        return await telegramClient.channelInfo(sendIds);\r\n    }\r\n\r\n    async getAuths(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        return await telegramClient.getAuths();\r\n    }\r\n\r\n    async getMe(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        return await telegramClient.getMe();\r\n    }\r\n\r\n    async set2Fa(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        try {\r\n            await telegramClient.set2fa();\r\n            await telegramClient.disconnect();\r\n            return '2Fa set successfully'\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile);\r\n        await telegramClient.updatePrivacyforDeletedAccount()\r\n    }\r\n\r\n    async deleteProfilePhotos(mobile: string) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile);\r\n        await telegramClient.deleteProfilePhotos()\r\n    }\r\n\r\n    async setProfilePic(\r\n        mobile: string, name: string,\r\n    ) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        try {\r\n            await CloudinaryService.getInstance(name);\r\n            await sleep(2000);\r\n            await telegramClient.updateProfilePic('./dp1.jpg');\r\n            await sleep(1000);\r\n            await telegramClient.updateProfilePic('./dp2.jpg');\r\n            await sleep(1000);\r\n            await telegramClient.updateProfilePic('./dp3.jpg');\r\n            await sleep(1000);\r\n            await telegramClient.disconnect();\r\n            return '2Fa set successfully'\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async setAsBufferClient(\r\n        mobile: string,\r\n        availableDate: string = (new Date(Date.now() - (24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n    ) {\r\n        const user = (await this.usersService.search({ mobile }))[0];\r\n        if (!user) {\r\n            throw new BadRequestException('user not found');\r\n        }\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        try {\r\n            await telegramClient.set2fa();\r\n            await sleep(15000)\r\n            await telegramClient.updateUsername('');\r\n            await sleep(3000)\r\n            await telegramClient.updatePrivacyforDeletedAccount();\r\n            await sleep(3000)\r\n            await telegramClient.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n            await sleep(3000)\r\n            await telegramClient.deleteProfilePhotos();\r\n            await telegramClient.disconnect();\r\n            await this.bufferClientService.create({ ...user as BufferClient, availableDate, createdDate: (new Date(Date.now())).toISOString().split('T')[0] })\r\n            return \"Client set as buffer successfully\";\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async updatePrivacy(\r\n        mobile: string,\r\n    ) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        try {\r\n            await telegramClient.updatePrivacy()\r\n            return \"Privacy updated successfully\";\r\n        } catch (error) {\r\n            const errorDetails = parseError(error)\r\n            throw new HttpException(errorDetails.message, parseInt(errorDetails.status))\r\n        }\r\n    }\r\n\r\n    async updateUsername(\r\n        mobile: string, username: string,\r\n    ) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        try {\r\n            return await telegramClient.updateUsername(username)\r\n        } catch (error) {\r\n            console.log(\"Some Error: \", parseError(error), error);\r\n            throw new Error(\"Failed to update username\");\r\n        }\r\n    }\r\n\r\n    async updateNameandBio(\r\n        mobile: string,\r\n        firstName: string,\r\n        about: string,\r\n    ) {\r\n        const telegramClient = TelegramService.clientsMap.get(mobile)\r\n        try {\r\n            await telegramClient.updateProfile(firstName, about)\r\n            return \"Username updated successfully\";\r\n        } catch (error) {\r\n            console.log(\"Some Error: \", parseError(error), error);\r\n            throw new Error(\"Failed to update username\");\r\n        }\r\n    }\r\n}","import { TelegramClient } from 'telegram';\r\nimport { StringSession } from 'telegram/sessions';\r\nimport { NewMessage } from 'telegram/events';\r\nimport { Api } from 'telegram/tl';\r\nimport axios from 'axios';\r\nimport * as fs from 'fs';\r\nimport { CustomFile } from 'telegram/client/uploads';\r\nimport mongoose from 'mongoose';\r\nimport { ActiveChannelsService } from '../activechannels/activechannels.service';\r\nimport { ActiveChannel, ActiveChannelSchema } from '../activechannels/schemas/active-channel.schema';\r\nimport { contains, parseError } from '../../../utils';\r\nimport { TotalList, sleep } from 'telegram/Helpers';\r\nimport { Dialog } from 'telegram/tl/custom/dialog';\r\nimport { LogLevel } from 'telegram/extensions/Logger';\r\nimport { MailReader } from '../../IMap/IMap';\r\n\r\nclass TelegramManager {\r\n    private session: StringSession;\r\n    private phoneNumber: string;\r\n    private client: TelegramClient | null;\r\n    private channelArray: string[];\r\n    private activeChannelsService: ActiveChannelsService;\r\n    private static activeClientSetup: { mobile: string, clientId: string };\r\n\r\n    constructor(sessionString: string, phoneNumber: string) {\r\n        console.log(sessionString);\r\n        this.activeChannelsService = new ActiveChannelsService(mongoose.model(ActiveChannel.name, ActiveChannelSchema))\r\n        this.session = new StringSession(sessionString);\r\n        this.phoneNumber = phoneNumber;\r\n        this.client = null;\r\n        this.channelArray = [];\r\n    }\r\n\r\n\r\n    public static getActiveClientSetup() {\r\n        return TelegramManager.activeClientSetup;\r\n    }\r\n\r\n    public static setActiveClientSetup(data: { mobile: string, clientId: string }) {\r\n        TelegramManager.activeClientSetup = data;\r\n    }\r\n\r\n    async disconnect(): Promise<void> {\r\n        if (this.client) {\r\n            await this.client.disconnect();\r\n            await this.client.destroy();\r\n        }\r\n        this.session.delete();\r\n    }\r\n\r\n    async getchatId(username: string): Promise<any> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const entity = await this.client.getInputEntity(username);\r\n        return entity;\r\n    }\r\n\r\n    async getMe() {\r\n        const me = <Api.User>await this.client.getMe();\r\n        return me\r\n    }\r\n\r\n    async createClient(handler = true): Promise<TelegramClient> {\r\n        this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\r\n            connectionRetries: 5,\r\n        });\r\n        this.client.setLogLevel(LogLevel.ERROR);\r\n        await this.client.connect();\r\n        const me = <Api.User>await this.client.getMe();\r\n        console.log(\"Connected Client : \", me.phone);\r\n        if (handler && this.client) {\r\n            this.client.addEventHandler(async (event) => { await this.handleEvents(event); }, new NewMessage());\r\n        }\r\n        return this.client\r\n    }\r\n\r\n    async getMessages(entityLike: Api.TypeEntityLike, limit: number = 8): Promise<TotalList<Api.Message>> {\r\n        const messages = await this.client.getMessages(entityLike, { limit });\r\n        return messages;\r\n    }\r\n    async getDialogs(): Promise<TotalList<Dialog>> {\r\n        const chats = await this.client.getDialogs({ limit: 500 });\r\n        console.log(\"TotalChats:\", chats.total);\r\n        return chats\r\n    }\r\n\r\n    async getLastMsgs(limit: number): Promise<string> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const msgs = await this.client.getMessages(\"777000\", { limit });\r\n        let resp = '';\r\n        msgs.forEach((msg) => {\r\n            console.log(msg.text);\r\n            resp += msg.text + \"\\n\";\r\n        });\r\n        return resp;\r\n    }\r\n\r\n    async getSelfMSgsInfo(): Promise<{ photoCount: number; videoCount: number; movieCount: number }> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const self = <Api.User>await this.client.getMe();\r\n        const selfChatId = self.id;\r\n\r\n        let photoCount = 0;\r\n        let videoCount = 0;\r\n        let movieCount = 0;\r\n\r\n        const messageHistory = await this.client.getMessages(selfChatId, { limit: 200 });\r\n        for (const message of messageHistory) {\r\n            if (message.photo) {\r\n                photoCount++;\r\n            } else if (message.video) {\r\n                videoCount++;\r\n            }\r\n            const text = message.text.toLocaleLowerCase();\r\n            if (contains(text, ['movie', 'series', '1080', '720', '640', 'title', 'aac', '265', 'hdrip', 'mkv', 'hq', '480', 'blura', 's0', 'se0', 'uncut'])) {\r\n                movieCount++;\r\n            }\r\n        }\r\n\r\n        return { photoCount, videoCount, movieCount };\r\n    }\r\n\r\n    async channelInfo(sendIds = false): Promise<{ chatsArrayLength: number; canSendTrueCount: number; canSendFalseCount: number; ids: string[] }> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const chats = await this.client.getDialogs({ limit: 600 });\r\n        let canSendTrueCount = 0;\r\n        let canSendFalseCount = 0;\r\n        let totalCount = 0;\r\n        this.channelArray.length = 0;\r\n        console.log(chats.total);\r\n        chats.forEach(async (chat) => {\r\n            if (chat.isChannel || chat.isGroup) {\r\n                try {\r\n                    const chatEntity = <Api.Channel>await chat.entity.toJSON();\r\n                    const { broadcast, defaultBannedRights } = chatEntity;\r\n                    totalCount++;\r\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\r\n                        canSendTrueCount++;\r\n                        this.channelArray.push(chatEntity.username);\r\n                    } else {\r\n                        canSendFalseCount++;\r\n                    }\r\n                } catch (error) {\r\n                    console.log(parseError(error));\r\n                }\r\n            }\r\n        });\r\n        return {\r\n            chatsArrayLength: totalCount,\r\n            canSendTrueCount,\r\n            canSendFalseCount,\r\n            ids: sendIds ? this.channelArray : []\r\n        };\r\n    }\r\n\r\n    async joinChannels(str: string): Promise<void> {\r\n        const channels = str.split('|');\r\n        console.log(this.phoneNumber, \" - channelsLen - \", channels.length);\r\n        for (let i = 0; i < channels.length; i++) {\r\n            const channel = channels[i].trim();\r\n            console.log(this.phoneNumber, \"Trying: \", channel);\r\n            try {\r\n                const joinResult = await this.client?.invoke(\r\n                    new Api.channels.JoinChannel({\r\n                        channel: await this.client?.getEntity(channel)\r\n                    })\r\n                );\r\n                console.log(this.phoneNumber, \" - Joined channel Success - \", channel);\r\n                try {\r\n                    const chatEntity = <Api.Channel>await this.client?.getEntity(channel);\r\n                    const { title, id, broadcast, defaultBannedRights, participantsCount, megagroup, username } = chatEntity;\r\n                    const entity = {\r\n                        title,\r\n                        id: id.toString(),\r\n                        username,\r\n                        megagroup,\r\n                        participantsCount,\r\n                        broadcast\r\n                    };\r\n                    if (!chatEntity.broadcast && !defaultBannedRights?.sendMessages) {\r\n                        entity['canSendMsgs'] = true;\r\n                        try {\r\n                            await this.activeChannelsService.update(entity.id.toString(), entity)\r\n                            console.log(\"updated ActiveChannels\");\r\n                        } catch (error) {\r\n                            console.log(parseError(error));\r\n                            console.log(\"Failed to update ActiveChannels\");\r\n                        }\r\n                    } else {\r\n                        await this.activeChannelsService.remove(entity.id.toString());\r\n                        // await db.removeOnefromActiveChannel({ username: channel.startsWith(\"@\") ? channel : `@${channel}` });\r\n                        // await db.removeOnefromChannel({ username: channel.startsWith(\"@\") ? channel : `@${channel}` });\r\n                        console.log(\"Removed Channel- \", channel);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(this.phoneNumber, \" - Failed - \", error);\r\n                }\r\n            } catch (error) {\r\n                console.log(\"Channels ERR: \", error);\r\n                if (error.toString().includes(\"No user has\") || error.toString().includes(\"USERNAME_INVALID\")) {\r\n                    const activeChannel = await this.activeChannelsService.search({ username: channel.replace('@', '') })\r\n                    await this.activeChannelsService.remove(activeChannel[0]?.channelId);\r\n                    // await db.removeOnefromChannel({ username: channel.startsWith(\"@\") ? channel : `@${channel}` });\r\n                    console.log(\"Removed Channel- \", channel);\r\n                }\r\n            }\r\n            console.log(this.phoneNumber, \" - On waiting period\");\r\n            await new Promise(resolve => setTimeout(resolve, 3 * 60 * 1000));\r\n            console.log(this.phoneNumber, \" - Will Try next\");\r\n        }\r\n        console.log(this.phoneNumber, \" - finished joining channels\");\r\n        if (this.client) {\r\n            await this.client.disconnect();\r\n            // await deleteClient(this.phoneNumber);\r\n        }\r\n    }\r\n\r\n    async removeOtherAuths(): Promise<void> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\r\n        const updatedAuthorizations = result.authorizations.map((auth) => {\r\n            if (auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\r\n                auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\r\n                auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\r\n                auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru')\r\n                || auth.deviceModel.toLowerCase().includes('windows')) {\r\n                return auth;\r\n            } else {\r\n                this.client?.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\r\n                return null;\r\n            }\r\n        }).filter(Boolean);\r\n        console.log(updatedAuthorizations);\r\n    }\r\n\r\n    async getAuths(): Promise<any> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations());\r\n        return result;\r\n    }\r\n\r\n    async getAllChats(): Promise<any[]> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const chats = await this.client.getDialogs({ limit: 500 });\r\n        console.log(\"TotalChats:\", chats.total);\r\n        const chatData = [];\r\n        for (const chat of chats) {\r\n            const chatEntity = await chat.entity.toJSON();\r\n            chatData.push(chatEntity);\r\n        }\r\n        return chatData;\r\n    }\r\n\r\n    async handleEvents(event) {\r\n        if (event.isPrivate) {\r\n            if (event.message.chatId.toString() == \"777000\") {\r\n                console.log(event.message.text.toLowerCase());\r\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nSetup - ', TelegramManager.activeClientSetup);\r\n                if (TelegramManager.activeClientSetup && this.phoneNumber === TelegramManager.activeClientSetup?.mobile) {\r\n                    console.log(\"LoginText: \", event.message.text)\r\n                    const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\r\n                    console.log(\"Code is:\", code);\r\n                    try {\r\n                        const response = await axios.get(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\r\n                        console.log(\"Code Sent back\");\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                    }\r\n                } else {\r\n                    const ppplbot = `https://api.telegram.org/bot${process.env.ramyaredd1bot}/sendMessage`;\r\n                    const payload = {\r\n                        \"chat_id\": \"-1001801844217\",\r\n                        \"text\": event.message.text\r\n                    };\r\n                    axios.post(ppplbot, payload)\r\n                        .then((response) => {\r\n                        })\r\n                        .catch((error) => {\r\n                            console.log(parseError(error))\r\n                            console.log(parseError(error))\r\n                        });\r\n                    await event.message.delete({ revoke: true });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n        }\r\n        catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    async updateProfile(firstName, about) {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.account.UpdateProfile({\r\n                    firstName: firstName,\r\n                    lastName: \"\",\r\n                    about: about,\r\n                })\r\n            );\r\n            console.log(\"Updated NAme: \", firstName);\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n    async updateUsername(baseUsername) {\r\n        let newUserName = ''\r\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\r\n        let increment = 0;\r\n        if (username === '') {\r\n            try {\r\n                const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                console.log(`Removed Username successfully.`);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        } else {\r\n            while (true) {\r\n                try {\r\n                    const result = await this.client.invoke(\r\n                        new Api.account.CheckUsername({ username })\r\n                    );\r\n                    console.log(result, \" - \", username)\r\n                    if (result) {\r\n                        const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                        console.log(`Username '${username}' updated successfully.`);\r\n                        newUserName = username\r\n                        break;\r\n                    } else {\r\n                        username = baseUsername + increment;\r\n                        increment++;\r\n                        await sleep(4000);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\r\n                        newUserName = username;\r\n                        break;\r\n                    }\r\n                    username = baseUsername + increment;\r\n                    increment++;\r\n                }\r\n            }\r\n        }\r\n        return newUserName;\r\n    }\r\n\r\n    async updatePrivacy() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout(),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n        catch (e) {\r\n            throw e\r\n        }\r\n    }\r\n    async getFileUrl(url: string, filename: string): Promise<string> {\r\n        const response = await axios.get(url, { responseType: 'stream' });\r\n        const filePath = `/tmp/${filename}`;\r\n        await new Promise((resolve, reject) => {\r\n            const writer = fs.createWriteStream(filePath);\r\n            response.data.pipe(writer);\r\n            writer.on('finish', resolve);\r\n            writer.on('error', reject);\r\n        });\r\n        return filePath;\r\n    }\r\n\r\n    async updateProfilePic(image) {\r\n        try {\r\n            const file = await this.client.uploadFile({\r\n                file: new CustomFile(\r\n                    'pic.jpg',\r\n                    fs.statSync(\r\n                        image\r\n                    ).size,\r\n                    image\r\n                ),\r\n                workers: 1,\r\n            });\r\n            console.log(\"file uploaded- \", file)\r\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\r\n                file: file,\r\n            }));\r\n            console.log(\"profile pic updated\")\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n    async hasPassword() {\r\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\r\n        return passwordInfo.hasPassword\r\n    }\r\n\r\n    async set2fa() {\r\n        if (!(await this.hasPassword())) {\r\n            const imapService = MailReader.getInstance();\r\n            const twoFaDetails = {\r\n                email: \"storeslaksmi@gmail.com\",\r\n                hint: \"password - India143\",\r\n                newPassword: \"Ajtdmwajt1@\",\r\n            }\r\n            try {\r\n                imapService.connectToMail();\r\n                const intervalParentId = setInterval(async () => {\r\n                    const isReady = imapService.isMailReady();\r\n                    if (isReady) {\r\n                        clearInterval(intervalParentId);\r\n                        await this.client.updateTwoFaSettings({\r\n                            isCheckPassword: false,\r\n                            email: twoFaDetails.email,\r\n                            hint: twoFaDetails.hint,\r\n                            newPassword: twoFaDetails.newPassword,\r\n                            emailCodeCallback: async (length) => {\r\n                                console.log(\"code sent\");\r\n                                return new Promise(async (resolve) => {\r\n                                    let retry = 0\r\n                                    const intervalId = setInterval(async () => {\r\n                                        console.log(\"checking code\");\r\n                                        retry++\r\n                                        const isReady = imapService.isMailReady();\r\n                                        if (isReady && retry < 4) {\r\n                                            const code = await imapService.getCode();\r\n                                            console.log('Code: ', code)\r\n                                            if (code) {\r\n                                                clearInterval(intervalId);\r\n                                                imapService.disconnectFromMail()\r\n                                                resolve(code);\r\n                                            } else {\r\n                                                console.log('Code: ', code)\r\n                                            }\r\n                                        } else {\r\n                                            clearInterval(intervalId);\r\n                                            await this.client.disconnect();\r\n                                            imapService.disconnectFromMail()\r\n                                            resolve(undefined);\r\n                                        }\r\n                                    }, 10000);\r\n                                });\r\n                            },\r\n                            onEmailCodeError: (e) => { console.log(parseError(e)); return Promise.resolve(\"error\") }\r\n                        })\r\n                        return twoFaDetails\r\n                    }\r\n                }, 5000);\r\n            } catch (e) {\r\n                console.log(e)\r\n                parseError(e)\r\n            }\r\n        }\r\n    }\r\n\r\n    async sendPhotoChat(id: string, url: string, caption: string, filename: string): Promise<void> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const filePath = await this.getFileUrl(url, filename);\r\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\r\n        await this.client.sendFile(id, { file, caption });\r\n    }\r\n\r\n    async sendFileChat(id: string, url: string, caption: string, filename: string): Promise<void> {\r\n        if (!this.client) throw new Error('Client is not initialized');\r\n        const filePath = await this.getFileUrl(url, filename);\r\n        const file = new CustomFile(filePath, fs.statSync(filePath).size, filename);\r\n        await this.client.sendFile(id, { file, caption });\r\n    }\r\n\r\n    async deleteProfilePhotos() {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.photos.GetUserPhotos({\r\n                    userId: \"me\"\r\n                })\r\n            );\r\n            console.log(result)\r\n            if (result && result.photos?.length > 0) {\r\n                const res = await this.client.invoke(\r\n                    new Api.photos.DeletePhotos({\r\n                        id: <Api.TypeInputPhoto[]><unknown>result.photos\r\n                    }))\r\n            }\r\n            console.log(\"Deleted profile Photos\");\r\n        } catch (error) {\r\n            throw error\r\n        }\r\n    }\r\n}\r\nexport default TelegramManager;\r\n","// src/activechannels/activechannels.controller.ts\r\nimport { Controller, Get, Post, Body, Patch, Param, Delete, NotFoundException, Query, BadRequestException } from '@nestjs/common';\r\nimport { ActiveChannelsService } from './activechannels.service';\r\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\r\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\r\nimport { ActiveChannel } from './schemas/active-channel.schema';\r\nimport { AddReactionDto } from './dto/add-reaction.dto';\r\n\r\n@ApiTags('Active Channels')\r\n@Controller('active-channels')\r\nexport class ActiveChannelsController {\r\n  constructor(private readonly activeChannelsService: ActiveChannelsService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new active channel' })\r\n  async create(@Body() createActiveChannelDto: CreateActiveChannelDto) {\r\n    return this.activeChannelsService.create(createActiveChannelDto);\r\n  }\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search channels by filters' })\r\n  @ApiQuery({ name: 'channelId', required: false, type: String })\r\n  @ApiQuery({ name: 'broadcast', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'canSendMsgs', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'participantsCount', required: false, type: Number })\r\n  @ApiQuery({ name: 'restricted', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'sendMessages', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'title', required: false, type: String })\r\n  @ApiQuery({ name: 'username', required: false, type: String })\r\n  @ApiQuery({ name: 'wordRestriction', required: false, type: Number })\r\n  @ApiQuery({ name: 'dMRestriction', required: false, type: Number })\r\n  @ApiQuery({ name: 'availableMsgs', required: false, type: [String] })\r\n  @ApiQuery({ name: 'reactions', required: false, type: [String] })\r\n  @ApiQuery({ name: 'banned', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'reactRestricted', required: false, type: Boolean })\r\n  @ApiQuery({ name: 'megagroup', required: false, type: Boolean })\r\n  search(@Query() query: any): Promise<ActiveChannel[]> {\r\n    console.log(query);\r\n    return this.activeChannelsService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all active channels' })\r\n  async findAll() {\r\n    return this.activeChannelsService.findAll();\r\n  }\r\n\r\n  @Get(':channelId')\r\n  @ApiOperation({ summary: 'Get an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'Return the active channel', type: ActiveChannel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async findOne(@Param('channelId') channelId: string) {\r\n    return this.activeChannelsService.findOne(channelId);\r\n  }\r\n\r\n  @Patch(':channelId')\r\n  @ApiOperation({ summary: 'Update an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully updated.', type: ActiveChannel })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async update(@Param('channelId') channelId: string, @Body() updateActiveChannelDto: UpdateActiveChannelDto) {\r\n    return this.activeChannelsService.update(channelId, updateActiveChannelDto);\r\n  }\r\n\r\n  @Delete(':channelId')\r\n  @ApiOperation({ summary: 'Delete an active channel by channelId' })\r\n  //@apiresponse({ status: 200, description: 'The channel has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'Channel not found' })\r\n  async remove(@Param('channelId') channelId: string) {\r\n    return this.activeChannelsService.remove(channelId);\r\n  }\r\n\r\n  @Post(':channelId/reactions')\r\n  @ApiOperation({ summary: 'Add reaction to chat group' })\r\n  addReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\r\n    if (!addReactionDto.reactions) {\r\n      throw new BadRequestException('Reaction is required');\r\n    }\r\n    return this.activeChannelsService.addReactions(channelId, addReactionDto.reactions);\r\n  }\r\n\r\n  @Get(':channelId/reactions/random')\r\n  @ApiOperation({ summary: 'Get a random reaction from chat group' })\r\n  getRandomReaction(@Param('channelId') channelId: string): Promise<string> {\r\n    return this.activeChannelsService.getRandomReaction(channelId);\r\n  }\r\n\r\n  @Delete(':channelId/reactions')\r\n  @ApiOperation({ summary: 'Remove reaction from chat group' })\r\n  removeReaction(@Param('channelId') channelId: string, @Body() addReactionDto: AddReactionDto): Promise<ActiveChannel> {\r\n    if (!addReactionDto.reactions) {\r\n      throw new BadRequestException('Reaction is required');\r\n    }\r\n    return this.activeChannelsService.removeReaction(channelId, addReactionDto.reactions[0]);\r\n  }\r\n}\r\n","// src/activechannels/activechannels.module.ts\r\nimport { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ActiveChannelsService } from './activechannels.service';\r\nimport { ActiveChannelsController } from './activechannels.controller';\r\nimport { ActiveChannel, ActiveChannelSchema } from './schemas/active-channel.schema';\r\n\r\n@Module({\r\n  imports: [\r\n    MongooseModule.forFeature([{ name: ActiveChannel.name, schema: ActiveChannelSchema }]),\r\n  ],\r\n  controllers: [ActiveChannelsController],\r\n  providers: [ActiveChannelsService],\r\n})\r\nexport class ActiveChannelsModule {}\r\n","// src/activechannels/activechannels.service.ts\r\nimport { ConflictException, Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateActiveChannelDto } from './dto/create-active-channel.dto';\r\nimport { UpdateActiveChannelDto } from './dto/update-active-channel.dto';\r\nimport { ActiveChannel } from './schemas/active-channel.schema';\r\n\r\n@Injectable()\r\nexport class ActiveChannelsService {\r\n  constructor(\r\n    @InjectModel(ActiveChannel.name) private activeChannelModel: Model<ActiveChannel>,\r\n  ) { }\r\n\r\n  async create(createActiveChannelDto: CreateActiveChannelDto): Promise<ActiveChannel> {\r\n    const createdChannel = new this.activeChannelModel(createActiveChannelDto);\r\n    return createdChannel.save();\r\n  }\r\n\r\n  async findAll(): Promise<ActiveChannel[]> {\r\n    return this.activeChannelModel.find().exec();\r\n  }\r\n\r\n  async findOne(channelId: string): Promise<ActiveChannel> {\r\n    const channel = await this.activeChannelModel.findOne({ channelId }).exec();\r\n    return channel;\r\n  }\r\n\r\n  async update(channelId: string, updateActiveChannelDto: UpdateActiveChannelDto): Promise<ActiveChannel> {\r\n    const updatedChannel = await this.activeChannelModel.findOneAndUpdate(\r\n      { channelId },\r\n      updateActiveChannelDto,\r\n      { new: true },\r\n    ).exec();\r\n    return updatedChannel;\r\n  }\r\n\r\n  async remove(channelId: string): Promise<void> {\r\n    const result = await this.activeChannelModel.findOneAndDelete({ channelId }).exec();\r\n  }\r\n\r\n  async search(filter: any): Promise<ActiveChannel[]> {\r\n    console.log(filter)\r\n    return this.activeChannelModel.find(filter).exec();\r\n  }\r\n\r\n  async addReactions(channelId: string, reactions: string[]): Promise<ActiveChannel> {\r\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\r\n      $addToSet: { availableMsgs: reactions }\r\n    })\r\n    return channel;\r\n  }\r\n\r\n  async getRandomReaction(channelId: string): Promise<string> {\r\n    const channel = await this.activeChannelModel.findOne({ channelId }).exec();\r\n    if (!channel) {\r\n      return undefined;\r\n    }\r\n    if (channel.reactions.length === 0) {\r\n      return undefined;\r\n    }\r\n    const randomIndex = Math.floor(Math.random() * channel.reactions.length);\r\n    return channel.reactions[randomIndex];\r\n  }\r\n\r\n  async removeReaction(channelId: string, reaction: string): Promise<ActiveChannel> {\r\n    const channel = await this.activeChannelModel.findOneAndUpdate({ channelId }, {\r\n      $pull: { reactions: reaction }\r\n    })\r\n    return channel;\r\n  }\r\n}\r\n","import { ApiProperty,  } from '@nestjs/swagger';\r\n\r\nexport class AddReactionDto  {\r\n    @ApiProperty({required: true})\r\n    reactions: string[]\r\n}\r\n","// src/activechannels/dto/create-activechannel.dto.ts\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateActiveChannelDto {\r\n  @ApiProperty()\r\n  channelId: string;\r\n\r\n  @ApiProperty({ default: false })\r\n  broadcast: boolean;\r\n\r\n  @ApiProperty({ default: true })\r\n  canSendMsgs: boolean;\r\n\r\n  @ApiProperty({ default: 300 })\r\n  participantsCount: number;\r\n\r\n  @ApiProperty({ default: false })\r\n  restricted: boolean;\r\n\r\n  @ApiProperty({ default: true })\r\n  sendMessages: boolean;\r\n\r\n  @ApiProperty({ default: false })\r\n  reactRestricted?: boolean;\r\n\r\n  @ApiProperty()\r\n  title: string;\r\n\r\n  @ApiProperty()\r\n  username: string;\r\n\r\n  @ApiProperty({ default: 0 })\r\n  wordRestriction?: number;\r\n\r\n  @ApiProperty({ default: 0 })\r\n  dMRestriction?: number;\r\n\r\n  @ApiProperty({ type: [String], default: [] })\r\n  availableMsgs?: string[];\r\n\r\n  @ApiProperty({ type: [String], default: [] })\r\n  reactions?: string[];\r\n\r\n  @ApiProperty({ default: false })\r\n  banned?: boolean;\r\n\r\n  @ApiProperty({ default: true , required: false})\r\n  megagroup?: boolean;\r\n}\r\n","// src/activechannels/dto/update-activechannel.dto.ts\r\nimport { PartialType } from '@nestjs/swagger';\r\nimport { CreateActiveChannelDto } from './create-active-channel.dto';\r\n\r\nexport class UpdateActiveChannelDto extends PartialType(CreateActiveChannelDto) {}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\nimport * as mongoose from 'mongoose';\r\n\r\n@Schema({ collection: 'activeChannels', versionKey: false, autoIndex: true })  // Specify the collection name here\r\nexport class ActiveChannel extends Document {\r\n  @Prop({ required: true, unique: true })\r\n  channelId: string;\r\n\r\n  @Prop({ default: false })\r\n  broadcast: boolean;\r\n\r\n  @Prop({ default: true })\r\n  canSendMsgs: boolean;\r\n\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  participantsCount: number;\r\n\r\n  @Prop({ default: false })\r\n  restricted: boolean;\r\n\r\n  @Prop({ default: false })\r\n  sendMessages: boolean;\r\n\r\n  @Prop({ required: true })\r\n  title: string;\r\n\r\n  @Prop({ required: false , default: null})\r\n  username: string;\r\n\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  wordRestriction: number;\r\n\r\n  @Prop({ type: mongoose.Schema.Types.Number, default: 0 })\r\n  dMRestriction: number;\r\n\r\n  @Prop({ type: [String], default: [] })\r\n  availableMsgs: string[];\r\n\r\n  @Prop({ type: [String], default: [] })\r\n  reactions: string[];\r\n\r\n  @Prop({ default: false })\r\n  banned: boolean;\r\n\r\n  @Prop({ default: true })\r\n  megagroup: boolean;\r\n\r\n  @Prop({ default: false })\r\n  reactRestricted: boolean;\r\n}\r\n\r\nexport const ActiveChannelSchema = SchemaFactory.createForClass(ActiveChannel);\r\n","import { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\r\nimport { Client, ClientDocument } from '../clients/schemas/client.schema';\r\n\r\n@Injectable()\r\nexport class ArchivedClientService {\r\n    constructor(@InjectModel('ArchivedArchivedClientsModule') private archivedclientModel: Model<ClientDocument>,\r\n    ) { }\r\n\r\n    async create(createClientDto: CreateClientDto): Promise<Client> {\r\n        const createdUser = new this.archivedclientModel(createClientDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<Client[]> {\r\n        const results: Client[] = await this.archivedclientModel.find().exec();\r\n        return results\r\n    }\r\n\r\n    async findOne(mobile: string): Promise<Client> {\r\n        const user = await this.archivedclientModel.findOne({ mobile }).exec();\r\n        return user;\r\n    }\r\n\r\n    async update(mobile: string, updateClientDto: Partial<Client>): Promise<Client> {\r\n        const updatedUser = await this.archivedclientModel.findOneAndUpdate({ mobile }, { $set: updateClientDto }, { new: true }).exec();\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(mobile: string): Promise<Client> {\r\n        const deletedUser = await this.archivedclientModel.findOneAndDelete({ mobile }).exec();\r\n        if (!deletedUser) {\r\n            throw new NotFoundException(`Client with ID \"${mobile}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<Client[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.archivedclientModel.find(filter).exec();\r\n    }\r\n\r\n    async executeQuery(query: any): Promise<any> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            return await this.archivedclientModel.find(query).exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n}\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { Client } from '../clients/schemas/client.schema';\r\nimport { ArchivedClientService } from './archibved-client.service';\r\nimport { CreateClientDto } from '../clients/dto/create-client.dto';\r\nimport { SearchClientDto } from '../clients/dto/search-client.dto';\r\n\r\n@ApiTags('Archived Clients')\r\n@Controller('ArchivedClients')\r\nexport class ArchivedClientController {\r\n  constructor(private readonly archivedclientService: ArchivedClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    return this.archivedclientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    return this.archivedclientService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async findAll(): Promise<Client[]> {\r\n    return this.archivedclientService.findAll();\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.findOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: Partial<Client>): Promise<Client> {\r\n    return this.archivedclientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('mobile') mobile: string): Promise<Client> {\r\n    return this.archivedclientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\r\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\r\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\r\n  @ApiBody({type: Object})\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.archivedclientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ClientSchema } from '../clients/schemas/client.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ArchivedClientService } from './archibved-client.service';\r\nimport { ArchivedClientController } from './archived-client.controller';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ collection: 'ArchivedClients', name: 'ArchivedArchivedClientsModule', schema: ClientSchema }]),\r\n    // forwardRef(() => TelegramModule)\r\n  ],\r\n  controllers: [ArchivedClientController],\r\n  providers: [ArchivedClientService],\r\n  exports:[ArchivedClientService]\r\n})\r\nexport class ArchivedClientModule { }\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { BufferClientService } from './buffer-client.service';\r\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\r\nimport { SearchBufferClientDto } from './dto/search-buffer- client.dto';\r\nimport { BufferClient } from './schemas/buffer-client.schema';\r\n\r\n@ApiTags('Buffer Clients')\r\n@Controller('bufferclients')\r\nexport class BufferClientController {\r\n  constructor(private readonly clientService: BufferClientService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  async create(@Body() createClientDto: CreateBufferClientDto): Promise<BufferClient> {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  async search(@Query() query: SearchBufferClientDto): Promise<BufferClient[]> {\r\n    return this.clientService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  async findAll(): Promise<BufferClient[]> {\r\n    return this.clientService.findAll();\r\n  }\r\n\r\n  @Get(':mobile')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  async findOne(@Param('mobile') mobile: string): Promise<BufferClient> {\r\n    return this.clientService.findOne(mobile);\r\n  }\r\n\r\n  @Patch(':mobile')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  async update(@Param('mobile') mobile: string, @Body() updateClientDto: Partial<BufferClient>): Promise<BufferClient> {\r\n    return this.clientService.update(mobile, updateClientDto);\r\n  }\r\n\r\n  @Delete(':mobile')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  async remove(@Param('mobile') mobile: string): Promise<void> {\r\n    return this.clientService.remove(mobile);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  @ApiBody({type: Object})\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.clientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { BufferClientService } from './buffer-client.service';\r\nimport { BufferClientController } from './buffer-client.controller';\r\nimport { BufferClientSchema } from './schemas/buffer-client.schema';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: 'bufferClientModule', schema: BufferClientSchema, collection: 'bufferClients' }])],\r\n  controllers: [BufferClientController],\r\n  providers: [BufferClientService],\r\n  exports: [BufferClientService]\r\n})\r\nexport class BufferClientModule { }\r\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { CreateBufferClientDto } from './dto/create-buffer-client.dto';\r\nimport { BufferClient } from './schemas/buffer-client.schema';\r\n\r\n@Injectable()\r\nexport class BufferClientService {\r\n    constructor(@InjectModel('bufferClientModule') private bufferClientModel: Model<BufferClient>) { }\r\n\r\n    async create(bufferClient: CreateBufferClientDto): Promise<BufferClient> {\r\n        const newUser = new this.bufferClientModel(bufferClient);\r\n        return newUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<BufferClient[]> {\r\n        return this.bufferClientModel.find().exec();\r\n    }\r\n\r\n    async findOne(mobile: string): Promise<BufferClient> {\r\n        const user = await this.bufferClientModel.findOne({ mobile }).exec();\r\n        if (!user) {\r\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async update(mobile: string, user: Partial<BufferClient>): Promise<BufferClient> {\r\n        delete user['_id']\r\n        const existingUser = await this.bufferClientModel.findOneAndUpdate({ mobile }, { user }, { new: true }).exec();\r\n        if (!existingUser) {\r\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\r\n        }\r\n        return existingUser;\r\n    }\r\n\r\n    async remove(mobile: string): Promise<void> {\r\n        const result = await this.bufferClientModel.deleteOne({ mobile }).exec();\r\n        if (result.deletedCount === 0) {\r\n            throw new NotFoundException(`BufferClient with mobile ${mobile} not found`);\r\n        }\r\n    }\r\n    async search(filter: any): Promise<BufferClient[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.bufferClientModel.find(filter).exec();\r\n    }\r\n\r\n    async executeQuery(query: any): Promise<BufferClient[]> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            return await this.bufferClientModel.find(query).exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\nimport {  IsString } from 'class-validator';\r\n\r\nexport class CreateBufferClientDto {\r\n  @ApiProperty({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsString()\r\n  readonly tgId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsString()\r\n  readonly mobile: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Date of the session',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly createdDate: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Date of the session',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsString()\r\n  readonly availableDate: string;\r\n\r\n  @ApiProperty({\r\n    description: 'Session identifier',\r\n    example: 'session123',\r\n  })\r\n  @IsString()\r\n  readonly session: string;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { IsString, IsBoolean, IsOptional } from 'class-validator';\r\n\r\nexport class SearchBufferClientDto {\r\n  @ApiPropertyOptional({\r\n    description: 'Telegram ID of the client',\r\n    example: '123456789',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly tgId?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Mobile number of the client',\r\n    example: '+1234567890',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly mobile?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'createdDate of the bufferClient',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly createdDate?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'availableDate of the bufferClient',\r\n    example: '2023-06-22',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly availableDate?: string;\r\n\r\n  @ApiPropertyOptional({\r\n    description: 'Session identifier',\r\n    example: 'session123',\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  readonly session?: string;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\n@Schema({ collection: 'bufferClients', versionKey: false, autoIndex: true })  // Specify the collection name here\r\nexport class BufferClient extends Document {\r\n  @Prop({ required: true, unique: true })\r\n  tgId: string;\r\n\r\n  @Prop({ required: true, unique: true })\r\n  mobile: string;\r\n\r\n  @Prop({ required: true })\r\n  date: string;\r\n\r\n  @Prop({ required: true })\r\n  session: string;\r\n\r\n  @Prop({ required: true , type: Boolean, default: false})\r\n  twoFa: boolean;\r\n\r\n  @Prop({ required: false, default: null})\r\n  password: string;\r\n}\r\n\r\nexport const BufferClientSchema = SchemaFactory.createForClass(BufferClient);\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { ClientService } from './client.service';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { Client } from './schemas/client.schema';\r\nimport { SearchClientDto } from './dto/search-client.dto';\r\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\r\n\r\n@ApiTags('Clients')\r\n@Controller('client')\r\nexport class ClientController {\r\n  constructor(private readonly clientService: ClientService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async create(@Body() createClientDto: CreateClientDto): Promise<Client> {\r\n    return this.clientService.create(createClientDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\r\n  async search(@Query() query: SearchClientDto): Promise<Client[]> {\r\n    return this.clientService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async findAll(): Promise<Client[]> {\r\n    return this.clientService.findAll();\r\n  }\r\n  @Get('/update')\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async updateDocs(): Promise<any> {\r\n    return this.clientService.updatedocs();\r\n  }\r\n\r\n  @Get(':clientId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('clientId') clientId: string): Promise<Client> {\r\n    return this.clientService.findOne(clientId);\r\n  }\r\n\r\n  @Get('setupClient/:clientId')\r\n  @ApiOperation({ summary: 'SetUp Client data' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async setupClient(@Param('clientId') clientId: string, @Query() setupClientQueryDto: SetupClientQueryDto) {\r\n    return this.clientService.setupClient(clientId, setupClientQueryDto);\r\n  }\r\n\r\n  @Patch(':clientId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('clientId') clientId: string, @Body() updateClientDto: Partial<Client>): Promise<Client> {\r\n    return this.clientService.update(clientId, updateClientDto);\r\n  }\r\n\r\n  @Delete(':clientId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('clientId') clientId: string): Promise<Client> {\r\n    return this.clientService.remove(clientId);\r\n  }\r\n  \r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\r\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\r\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\r\n  @ApiBody({type: Object})\r\n  async executeQuery(@Body() query: object): Promise<any> {\r\n    try {\r\n      return await this.clientService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { Client, ClientSchema } from './schemas/client.schema';\r\nimport { ClientService } from './client.service';\r\nimport { ClientController } from './client.controller';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { BufferClientModule } from '../buffer-clients/buffer-client.module';\r\nimport { UsersModule } from '../users/users.module';\r\nimport { ArchivedClientModule } from '../archived-clients/archived-client.module';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: Client.name, schema: ClientSchema }]),\r\n    forwardRef(()=>TelegramModule),\r\n    BufferClientModule,\r\n    forwardRef(()=>UsersModule),\r\n    forwardRef(()=>ArchivedClientModule),\r\n  ],\r\n  controllers: [ClientController],\r\n  providers: [ClientService],\r\n  exports: [ClientService]\r\n})\r\nexport class ClientModule { }\r\n","import { TelegramService } from './../Telegram/Telegram.service';\r\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { Client, ClientDocument } from './schemas/client.schema';\r\nimport { CreateClientDto } from './dto/create-client.dto';\r\nimport { SetupClientQueryDto } from './dto/setup-client.dto';\r\nimport { BufferClientService } from '../buffer-clients/buffer-client.service';\r\nimport { sleep } from 'telegram/Helpers';\r\nimport { UsersService } from '../users/users.service';\r\nimport { ArchivedClientService } from '../archived-clients/archibved-client.service';\r\nimport { fetchNumbersFromString, fetchWithTimeout } from '../../../utils';\r\n\r\n@Injectable()\r\nexport class ClientService {\r\n    private clientsMap: Map<string, Client> = new Map();\r\n    constructor(@InjectModel(Client.name) private clientModel: Model<ClientDocument>,\r\n        @Inject(forwardRef(() => TelegramService))\r\n        private telegramService: TelegramService,\r\n        private bufferClientService: BufferClientService,\r\n        @Inject(forwardRef(() => UsersService))\r\n        private usersService: UsersService,\r\n        @Inject(forwardRef(() => ArchivedClientService))\r\n        private archivedClientService: ArchivedClientService,\r\n    ) { }\r\n\r\n    async create(createClientDto: CreateClientDto): Promise<Client> {\r\n        const createdUser = new this.clientModel(createClientDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<Client[]> {\r\n        const clientMapLength = this.clientsMap.size\r\n        console.log(clientMapLength)\r\n        if (clientMapLength < 3) {\r\n            const results: Client[] = await this.clientModel.find({}).exec();\r\n            for (const client of results) {\r\n                this.clientsMap.set(client.clientId, client)\r\n            }\r\n            return results\r\n        } else {\r\n            return Array.from(this.clientsMap.values())\r\n        }\r\n    }\r\n\r\n    async findOne(clientId: string): Promise<Client> {\r\n        const client = this.clientsMap.get(clientId)\r\n        if (client) {\r\n            return client;\r\n        } else {\r\n            const user = await this.clientModel.findOne({ clientId }).exec();\r\n            this.clientsMap.set(clientId, user);\r\n            if (!user) {\r\n                throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\r\n            }\r\n            return user;\r\n        }\r\n    }\r\n\r\n    async updatedocs() {\r\n        console.log(\"here\")\r\n        const clients = await this.findAll();\r\n        console.log(clients.length)\r\n        for (const client of clients) {\r\n            const data: any = { ...client }\r\n            // console.log(data)\r\n            // console.log(data.number);\r\n            await this.clientModel.findByIdAndUpdate(client._id, { mobile: data._doc.number.replace('+', '') })\r\n        }\r\n    }\r\n    async update(clientId: string, updateClientDto: Partial<Client>): Promise<Client> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.clientModel.findOneAndUpdate({ clientId }, { $set: updateClientDto }, { new: true }).exec();\r\n        this.clientsMap.set(clientId, updatedUser);\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(clientId: string): Promise<Client> {\r\n        const deletedUser = await this.clientModel.findOneAndDelete({ clientId }).exec();\r\n        if (!deletedUser) {\r\n            throw new NotFoundException(`Client with ID \"${clientId}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<Client[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.clientModel.find(filter).exec();\r\n    }\r\n\r\n    async setupClient(clientId: string, setupClientQueryDto: SetupClientQueryDto) {\r\n        const existingClient = await this.findOne(clientId);\r\n        const existingClientMobile = existingClient.mobile\r\n        const existingClientUser = (await this.usersService.search({ mobile: existingClientMobile }))[0];\r\n        await this.telegramService.createClient(existingClientMobile, false, true)\r\n        if (setupClientQueryDto.formalities) {\r\n            await this.telegramService.updateUsername(existingClientMobile, '');\r\n            await sleep(2000)\r\n            await this.telegramService.updatePrivacyforDeletedAccount(existingClientMobile)\r\n            await sleep(2000)\r\n            await this.telegramService.deleteProfilePhotos(existingClientMobile)\r\n        }\r\n\r\n        const today = (new Date(Date.now())).toISOString().split('T')[0]\r\n        if (setupClientQueryDto.archiveOld) {\r\n            const availableDate = (new Date(Date.now() + (setupClientQueryDto.days * 24 * 60 * 60 * 1000))).toISOString().split('T')[0]\r\n            await this.bufferClientService.create({\r\n                mobile: existingClientMobile,\r\n                createdDate: today,\r\n                availableDate,\r\n                session: existingClientUser.session,\r\n                tgId: existingClientUser.tgId\r\n            })\r\n        }\r\n\r\n        const query = { date: { $lte: today } }\r\n        const newBufferClient = (await this.bufferClientService.executeQuery(query))[0];\r\n        if (newBufferClient) {\r\n            this.telegramService.setActiveClientSetup({ mobile: newBufferClient.mobile, clientId })\r\n            await this.telegramService.createClient(newBufferClient.mobile);\r\n            const username = (clientId?.match(/[a-zA-Z]+/g)).toString();\r\n            const userCaps = username[0].toUpperCase() + username.slice(1);\r\n            const updatedUsername = await this.telegramService.updateUsername(newBufferClient.mobile, `${userCaps}_Redd`);\r\n            await this.telegramService.updateNameandBio(existingClientMobile, 'Deleted Account', `New Acc: @${updatedUsername}`);\r\n        }\r\n        const newClientMe = await this.telegramService.getMe(existingClientMobile)\r\n        const archivedClient = await this.archivedClientService.findOne(newBufferClient.mobile)\r\n        if (archivedClient) {\r\n            await this.updateClient(archivedClient.session, newClientMe.phone, newClientMe.username, clientId)\r\n        } else {\r\n            await this.generateNewSession(newBufferClient.mobile)\r\n        }\r\n    }\r\n\r\n    async updateClient(session: string, mobile: string, userName: string, clientId: string) {\r\n        await this.update(clientId, { session: session, mobile, userName, mainAccount: userName });\r\n        if (fetchNumbersFromString(clientId) == '2') {\r\n            const client2 = clientId.replace(\"1\", \"2\")\r\n            await this.update(client2, { mainAccount: userName });\r\n        }\r\n    }\r\n\r\n    async generateNewSession(phoneNumber) {\r\n        try {\r\n            console.log(\"String Generation started\");\r\n            await sleep(1000);\r\n            const response = await fetchWithTimeout(`https://tgsignup.onrender.com/login?phone=${phoneNumber}&force=${true}`, { timeout: 15000 }, 1);\r\n            if (response) {\r\n                console.log(`Code Sent successfully`, response);\r\n                // await fetchWithTimeout(`${ppplbot()}&text=${encodeURIComponent(`Code Sent successfully-${response}-${phoneNumber}`)}`);\r\n            } else {\r\n                console.log(`Failed to send Code-${JSON.stringify(response)}`);\r\n                await sleep(5000);\r\n                await this.generateNewSession(phoneNumber);\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async executeQuery(query: any): Promise<any> {\r\n        try {\r\n            if (!query) {\r\n                throw new BadRequestException('Query is invalid.');\r\n            }\r\n            return await this.clientModel.find(query).exec();\r\n        } catch (error) {\r\n            throw new InternalServerErrorException(error.message);\r\n        }\r\n    }\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateClientDto {\r\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\r\n    readonly channelLink: string;\r\n  \r\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\r\n    readonly dbcoll: string;\r\n  \r\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\r\n    readonly link: string;\r\n  \r\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\r\n    readonly name: string;\r\n  \r\n    @ApiProperty({ example: '+916265240911', description: 'Phone number of the user' })\r\n    readonly number: string;\r\n  \r\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\r\n    readonly password: string;\r\n  \r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\r\n    readonly repl: string;\r\n  \r\n    @ApiProperty({ example: '1BQANOTEuMTA4LjUg==', description: 'Session token' })\r\n    readonly session: string;\r\n  \r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\r\n    readonly userName: string;\r\n  \r\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\r\n    readonly clientId: string;\r\n  \r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\r\n    readonly deployKey: string;\r\n  \r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\r\n    readonly mainAccount: string;\r\n  \r\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\r\n    readonly product: string;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class SearchClientDto {\r\n    @ApiPropertyOptional({ description: 'Client ID of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    clientId?: string;\r\n    \r\n    @ApiPropertyOptional({ description: 'Database collection name' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    dbcoll?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Channel link of the client' })\r\n    channelLink?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Link of the client' })\r\n    link?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Name of the client' })\r\n    name?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Phone number of the client' })\r\n    number?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Password of the client' })\r\n    password?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Repl link of the client' })\r\n    repl?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Clientname of the client' })\r\n    clientName?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Deployment key URL' })\r\n    deployKey?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Main account of the client' })\r\n    @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n    mainAccount?: string;\r\n\r\n    @ApiPropertyOptional({ description: 'Product associated with the client' })\r\n    product?: string;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { IsOptional, IsString, IsBoolean, IsNumber } from 'class-validator';\r\n\r\nexport class SetupClientQueryDto {\r\n    @ApiPropertyOptional()\r\n    @IsOptional()\r\n    @IsNumber()\r\n    days?: number = 0;\r\n\r\n    @ApiPropertyOptional()\r\n    @IsOptional()\r\n    @IsBoolean()\r\n    archiveOld?: boolean = true;\r\n\r\n    @ApiPropertyOptional()\r\n    @IsOptional()\r\n    @IsString()\r\n    mobile?: string;\r\n\r\n    @ApiPropertyOptional()\r\n    @IsOptional()\r\n    @IsBoolean()\r\n    formalities?: boolean = true;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type ClientDocument = Client & Document;\r\n\r\n@Schema({ collection: 'clients', versionKey: false, autoIndex: true })\r\nexport class Client extends Document{\r\n    @ApiProperty({ example: 'paid_giirl_shruthiee', description: 'Channel link of the user' })\r\n    @Prop({ required: true })\r\n    channelLink: string;\r\n  \r\n    @ApiProperty({ example: 'shruthi', description: 'Database collection name' })\r\n    @Prop({ required: true })\r\n    dbcoll: string;\r\n  \r\n    @ApiProperty({ example: 'PaidGirl.netlify.app/Shruthi1', description: 'Link of the user' })\r\n    @Prop({ required: true })\r\n    link: string;\r\n  \r\n    @ApiProperty({ example: 'Shruthi Reddy', description: 'Name of the user' })\r\n    @Prop({ required: true })\r\n    name: string;\r\n  \r\n    @ApiProperty({ example: '916265240911', description: 'mobile number of the user' })\r\n    @Prop({ required: true })\r\n    mobile: string;\r\n  \r\n    @ApiProperty({ example: 'Ajtdmwajt1@', description: 'Password of the user' })\r\n    @Prop({ required: true })\r\n    password: string;\r\n  \r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me', description: 'Repl link of the user' })\r\n    @Prop({ required: true })\r\n    repl: string;\r\n  \r\n    @ApiProperty({ example: '1BQANOTEuM==', description: 'Session token' })\r\n    @Prop({ required: true })\r\n    session: string;\r\n  \r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Username of the user' })\r\n    @Prop({ required: true })\r\n    userName: string;\r\n  \r\n    @ApiProperty({ example: 'shruthi1', description: 'Client ID of the user' })\r\n    @Prop({ required: true })\r\n    clientId: string;\r\n  \r\n    @ApiProperty({ example: 'https://shruthi1.glitch.me/exit', description: 'Deployment key URL' })\r\n    @Prop({ required: true })\r\n    deployKey: string;\r\n  \r\n    @ApiProperty({ example: 'ShruthiRedd2', description: 'Main account of the user' })\r\n    @Prop({ required: true })\r\n    mainAccount: string;\r\n  \r\n    @ApiProperty({ example: 'booklet_10', description: 'Product associated with the user' })\r\n    @Prop({ required: true })\r\n    product: string;\r\n}\r\n\r\nexport const ClientSchema = SchemaFactory.createForClass(Client);\r\n","import { Controller, Get, Body, Param, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiBody } from '@nestjs/swagger';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@ApiTags('Configuration')\r\n@Controller('Configuration')\r\nexport class ConfigurationController {\r\n  constructor(private readonly configurationService: ConfigurationService) {}\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get configuration data' })\r\n  async findOne(): Promise<any>{\r\n    return this.configurationService.findOne();\r\n  }\r\n\r\n  @Patch()\r\n  @ApiOperation({ summary: 'Update configuration' })\r\n  @ApiBody({type: Object})\r\n  async update( @Body() updateClientDto: any): Promise<any> {\r\n    return this.configurationService.update( updateClientDto);\r\n  }\r\n\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { ConfigurationController } from './configuration.controller';\r\nimport { ConfigurationService } from './configuration.service';\r\nimport { ConfigurationSchema } from './configuration.schema';\r\n\r\n@Module({\r\n    imports: [MongooseModule.forFeature([{\r\n        name: 'configurationModule', collection: 'configuration', schema: ConfigurationSchema\r\n    }])],\r\n    controllers: [ConfigurationController],\r\n    providers: [ConfigurationService],\r\n})\r\nexport class ConfigurationModule { }\r\n","import { Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose, { Document } from 'mongoose';\r\n\r\nexport type ConfigurationDocument = Configuration & Document;\r\n\r\n@Schema({versionKey: false, autoIndex: true,strict: false })\r\nexport class Configuration {}\r\n\r\nexport const ConfigurationSchema = SchemaFactory.createForClass(Configuration);\r\nConfigurationSchema.add({ type: mongoose.Schema.Types.Mixed });\r\n\r\n","import { Injectable, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { Configuration } from './configuration.schema';\r\n\r\n@Injectable()\r\nexport class ConfigurationService {\r\n    constructor(@InjectModel('configurationModule') private configurationModel: Model<Configuration>) { }\r\n\r\n    async findOne(): Promise<any> {\r\n        const user = await this.configurationModel.findOne({}).exec();\r\n        if (!user) {\r\n            throw new NotFoundException(`configurationModel not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async update(updateClientDto: any): Promise<any> {\r\n        delete updateClientDto['_id']\r\n        const updatedUser = await this.configurationModel.findOneAndUpdate(\r\n            {}, // Assuming you want to update the first document found in the collection\r\n            { $set: {...updateClientDto} },\r\n            { new: true, upsert: true }\r\n        ).exec();\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`configurationModel not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n}\r\n","import { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateUserDataDto {\r\n    @ApiProperty({ example: '5787751360', description: 'Chat ID' })\r\n    chatId: string;\r\n\r\n    @ApiProperty({ example: 1, description: 'Total count' })\r\n    totalCount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Picture count' })\r\n    picCount: number;\r\n\r\n    @ApiProperty({ example: 1718802722566, description: 'Last message timestamp' })\r\n    lastMsgTimeStamp: number;\r\n\r\n    @ApiProperty({ example: 1718802742567, description: 'Limit time' })\r\n    limitTime: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Paid count' })\r\n    paidCount: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Profile count' })\r\n    prfCount: number;\r\n\r\n    @ApiProperty({ example: 1, description: 'Can reply' })\r\n    canReply: number;\r\n\r\n    @ApiProperty({ example: 0, description: 'Pay amount' })\r\n    payAmount: number;\r\n\r\n    @ApiProperty({ example: 'بـِـعٰ۬ێډ الۿٰٕقاوٰ۬ێ ٴ🦅', description: 'Username' })\r\n    username: string;\r\n\r\n    @ApiProperty({ example: '-7250939091939055173', description: 'Access hash' })\r\n    accessHash: string;\r\n\r\n    @ApiProperty({ example: true, description: 'Paid reply status' })\r\n    paidReply: boolean;\r\n\r\n    @ApiProperty({ example: false, description: 'Demo given status' })\r\n    demoGiven: boolean;\r\n\r\n    @ApiProperty({ example: false, description: 'Second show status' })\r\n    secondShow: boolean;\r\n\r\n    @ApiProperty({ example: 'sneha', description: 'Profile name' })\r\n    profile: string;\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform, TransformFnParams } from 'class-transformer';\r\n\r\nexport class SearchDto {\r\n  @ApiPropertyOptional({ description: 'Total count', type: Number })\r\n  totalCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Picture count', type: Number })\r\n  picCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Last message timestamp', type: Number })\r\n  lastMsgTimeStamp?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Limit time', type: Number })\r\n  limitTime?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Paid count', type: Number })\r\n  paidCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Profile count', type: Number })\r\n  prfCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Can reply', type: Number })\r\n  canReply?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Pay amount', type: Number })\r\n  payAmount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Username' })\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Access hash' })\r\n  accessHash?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Paid reply status', type: Boolean })\r\n  paidReply?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Demo given status', type: Boolean })\r\n  demoGiven?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Second show status', type: Boolean })\r\n  secondShow?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Profile name' })\r\n  @Transform(({ value }: TransformFnParams) => value?.trim().toLowerCase())\r\n  profile?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Chat ID' })\r\n  chatId?: string;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport { Document } from 'mongoose';\r\n\r\nexport type UserDataDocument = UserData & Document;\r\n\r\n@Schema({ collection: 'userData', versionKey: false, autoIndex: true })\r\nexport class UserData {\r\n    @Prop({ required: true })\r\n    chatId: string;\r\n\r\n    @Prop({ required: true })\r\n    totalCount: number;\r\n\r\n    @Prop({ required: true })\r\n    picCount: number;\r\n\r\n    @Prop({ required: true })\r\n    lastMsgTimeStamp: number;\r\n\r\n    @Prop({ required: true })\r\n    limitTime: number;\r\n\r\n    @Prop({ required: true })\r\n    paidCount: number;\r\n\r\n    @Prop({ required: true })\r\n    prfCount: number;\r\n\r\n    @Prop({ required: true })\r\n    canReply: number;\r\n\r\n    @Prop({ required: true })\r\n    payAmount: number;\r\n\r\n    @Prop({ required: true })\r\n    username: string;\r\n\r\n    @Prop({ required: true })\r\n    accessHash: string;\r\n\r\n    @Prop({ required: true })\r\n    paidReply: boolean;\r\n\r\n    @Prop({ required: true })\r\n    demoGiven: boolean;\r\n\r\n    @Prop({ required: true })\r\n    secondShow: boolean;\r\n\r\n    @Prop({ required: true })\r\n    profile: string;\r\n}\r\n\r\nexport const UserDataSchema = SchemaFactory.createForClass(UserData);\r\n","import { Controller, Get, Post, Body, Param, Delete, Query, Patch } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';\r\nimport { UserDataService } from './user-data.service';\r\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\r\nimport { UserData } from './schemas/user-data.schema';\r\nimport { SearchDto } from './dto/search-user-data.dto';\r\n\r\n@ApiTags('UserData of TG clients')\r\n@Controller('userData')\r\nexport class UserDataController {\r\n  constructor(private readonly userDataService: UserDataService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create user data' })\r\n  //@apiresponse({ status: 201, description: 'The user data has been successfully created.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async create(@Body() createUserDataDto: CreateUserDataDto): Promise<UserData> {\r\n    return this.userDataService.create(createUserDataDto);\r\n  }\r\n\r\n  @Get('search')\r\n  @ApiOperation({ summary: 'Search user data' })\r\n  //@apiresponse({ status: 200, description: 'Return the searched user data.' })\r\n\r\n  async search(@Query() query: SearchDto): Promise<UserData[]> {\r\n    return this.userDataService.search(query);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all user data' })\r\n  //@apiresponse({ status: 200, description: 'Return all user data.' })\r\n  //@apiresponse({ status: 403, description: 'Forbidden.' })\r\n  async findAll(): Promise<UserData[]> {\r\n    return this.userDataService.findAll();\r\n  }\r\n\r\n  @Get(':chatId')\r\n  @ApiOperation({ summary: 'Get user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'Return the user data.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async findOne(@Param('chatId') chatId: string): Promise<UserData> {\r\n    return this.userDataService.findOne(chatId);\r\n  }\r\n\r\n  @Patch(':chatId')\r\n  @ApiOperation({ summary: 'Update user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully updated.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async update(@Param('chatId') chatId: string, @Body() updateUserDataDto: Partial<UserData>): Promise<UserData> {\r\n    return this.userDataService.update(chatId, updateUserDataDto);\r\n  }\r\n\r\n  @Delete(':chatId')\r\n  @ApiOperation({ summary: 'Delete user data by ID' })\r\n  //@apiresponse({ status: 200, description: 'The user data has been successfully deleted.' })\r\n  //@apiresponse({ status: 404, description: 'User data not found.' })\r\n  async remove(@Param('chatId') chatId: string): Promise<UserData> {\r\n    return this.userDataService.remove(chatId);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\r\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\r\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\r\n  async executeQuery(@Body() query: any): Promise<any> {\r\n    try {\r\n      return await this.userDataService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n}\r\n","import { Module } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UserData, UserDataSchema } from './schemas/user-data.schema';\r\nimport { UserDataService } from './user-data.service';\r\nimport { UserDataController } from './user-data.controller';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: UserData.name, schema: UserDataSchema }])],\r\n  controllers: [UserDataController],\r\n  providers: [UserDataService],\r\n})\r\nexport class UserDataModule {}\r\n","import { BadRequestException, Injectable, InternalServerErrorException, NotFoundException } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { UserData, UserDataDocument } from './schemas/user-data.schema';\r\nimport { CreateUserDataDto } from './dto/create-user-data.dto';\r\n\r\n@Injectable()\r\nexport class UserDataService {\r\n    constructor(@InjectModel(UserData.name) private userDataModel: Model<UserDataDocument>) { }\r\n\r\n    async create(createUserDataDto: CreateUserDataDto): Promise<UserData> {\r\n        const createdUser = new this.userDataModel(createUserDataDto);\r\n        return createdUser.save();\r\n    }\r\n\r\n    async findAll(): Promise<UserData[]> {\r\n        return this.userDataModel.find().exec();\r\n    }\r\n\r\n    async findOne(chatId: string): Promise<UserData> {\r\n        const user = await this.userDataModel.findOne({chatId}).exec();\r\n        if (!user) {\r\n            throw new NotFoundException(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return user;\r\n    }\r\n\r\n    async update(chatId: string, updateUserDataDto: Partial<UserData>): Promise<UserData> {\r\n        delete updateUserDataDto['_id']\r\n        const updatedUser = await this.userDataModel.findOneAndUpdate({chatId}, { $set: updateUserDataDto }, { new: true }).exec();\r\n        if (!updatedUser) {\r\n            throw new NotFoundException(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return updatedUser;\r\n    }\r\n\r\n    async remove(chatId: string): Promise<UserData> {\r\n        const deletedUser = await this.userDataModel.findOneAndDelete({chatId}).exec();\r\n        if (!deletedUser) {\r\n            throw new NotFoundException(`UserData with ID \"${chatId}\" not found`);\r\n        }\r\n        return deletedUser;\r\n    }\r\n\r\n    async search(filter: any): Promise<UserData[]> {\r\n        console.log(filter)\r\n        if (filter.firstName) {\r\n            filter.firstName = { $regex: new RegExp(filter.firstName, 'i') }\r\n        }\r\n        console.log(filter)\r\n        return this.userDataModel.find(filter).exec();\r\n    }\r\n\r\n  async executeQuery(query: any): Promise<any> {\r\n    try {\r\n      if (!query) {\r\n        throw new BadRequestException('Query is invalid.');\r\n      }\r\n      return await this.userDataModel.find(query).exec();\r\n    } catch (error) {\r\n      throw new InternalServerErrorException(error.message);\r\n    }\r\n  }\r\n}\r\n","import { ApiPropertyOptional } from '@nestjs/swagger';\r\nimport { Transform } from 'class-transformer';\r\nimport { IsOptional, IsBoolean, IsNumber, IsString } from 'class-validator';\r\n\r\nexport class SearchUserDto {\r\n  @ApiPropertyOptional({ description: 'Filter by Telegram ID' })\r\n  @IsOptional()\r\n  @IsString()\r\n  tgId?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by mobile number' })\r\n  @IsOptional()\r\n  @IsString()\r\n  mobile?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by twoFA status' })\r\n  @Transform(({ value }) => value === 'true' || value === '1' || value === true)\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  twoFA?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by session' })\r\n  @IsOptional()\r\n  @IsString()\r\n  session?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by first name' })\r\n  @IsOptional()\r\n  @IsString()\r\n  firstName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last name' })\r\n  @IsOptional()\r\n  @IsString()\r\n  lastName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by username' })\r\n  @IsOptional()\r\n  @IsString()\r\n  userName?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by channels count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  channels?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by personal chats count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  personalChats?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by demo given status' })\r\n  @Transform(({ value }) => value === 'true' || value === '1' || value === true)\r\n  @IsOptional()\r\n  @IsBoolean()\r\n  demoGiven?: boolean;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by messages count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  msgs?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by total chats count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  totalChats?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last active timestamp' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  lastActive?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by date' })\r\n  @IsOptional()\r\n  @IsString()\r\n  date?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by last updated timestamp' })\r\n  @IsOptional()\r\n  @IsString()\r\n  lastUpdated?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by movie count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  movieCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  photoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  videoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by gender' })\r\n  @IsOptional()\r\n  @IsString()\r\n  gender?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by username' })\r\n  @IsOptional()\r\n  @IsString()\r\n  username?: string;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by other photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  otherPhotoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by other video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  otherVideoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by own photo count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  ownPhotoCount?: number;\r\n\r\n  @ApiPropertyOptional({ description: 'Filter by own video count' })\r\n  @IsOptional()\r\n  @IsNumber()\r\n  ownVideoCount?: number;\r\n}\r\n","import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\r\nimport mongoose from 'mongoose';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\n@Schema({ collection: 'users', versionKey: false, autoIndex: true })\r\nexport class User extends mongoose.Document {\r\n  @ApiProperty()\r\n  @Prop()\r\n  mobile: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  session: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  firstName: string;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  lastName: string | null;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  userName: string | null;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  channels: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  personalChats: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  demoGiven: boolean;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  msgs: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  totalChats: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  lastActive: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  date: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  tgId: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  lastUpdated: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  movieCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  photoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  videoCount: number;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  gender: string | null;\r\n\r\n  @ApiProperty({ required: false })\r\n  @Prop()\r\n  username: string | null;\r\n\r\n  @Prop({ required: true , type: Boolean})\r\n  twoFa: boolean;\r\n\r\n  @Prop({ required: true })\r\n  password: string;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  otherPhotoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  otherVideoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  ownPhotoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  ownVideoCount: number;\r\n\r\n  @ApiProperty()\r\n  @Prop()\r\n  contacts: number;\r\n\r\n  @ApiProperty()\r\n  @Prop({\r\n    type: mongoose.Schema.Types.Mixed,\r\n    default: {\r\n      outgoing: 0,\r\n      incoming: 0,\r\n      video: 0,\r\n      chatCallCounts: [],\r\n      totalCalls: 0,\r\n    },\r\n  })\r\n  calls: {\r\n    outgoing: number;\r\n    incoming: number;\r\n    video: number;\r\n    chatCallCounts: any[];\r\n    totalCalls: number;\r\n  };\r\n}\r\n\r\nexport const UserSchema = SchemaFactory.createForClass(User);\r\n","import { Controller, Get, Post, Body, Param, Patch, Delete, Query } from '@nestjs/common';\r\nimport { UsersService } from './users.service';\r\nimport { User } from './schemas/user.schema';\r\nimport { ApiTags, ApiOperation, ApiParam, ApiQuery, ApiResponse } from '@nestjs/swagger';\r\nimport { SearchUserDto } from './dto/search-user.dto';\r\n\r\n@ApiTags('Telegram Users') // Tag to categorize all endpoints in this controller\r\n@Controller('users')\r\nexport class UsersController {\r\n  constructor(private readonly usersService: UsersService) { }\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Create a new user' })\r\n  async create(@Body() createUserDto: User) {\r\n    return this.usersService.create(createUserDto);\r\n  }\r\n\r\n  @Get('/search')\r\n  @ApiOperation({ summary: 'Search users based on various parameters' })\r\n  async search(@Query() queryParams: SearchUserDto): Promise<User[]> {\r\n    return this.usersService.search(queryParams);\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all users' })\r\n  async findAll() {\r\n    return this.usersService.findAll();\r\n  }\r\n\r\n  @Get(':tgId')\r\n  @ApiOperation({ summary: 'Get a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async findOne(@Param('tgId') tgId: string) {\r\n    return this.usersService.findOne(tgId);\r\n  }\r\n\r\n  @Patch(':tgId')\r\n  @ApiOperation({ summary: 'Update a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async update(@Param('tgId') tgId: string, @Body() updateUserDto: Partial<User>) {\r\n    return this.usersService.update(tgId, updateUserDto);\r\n  }\r\n\r\n  @Delete(':tgId')\r\n  @ApiOperation({ summary: 'Delete a user by tgId' })\r\n  @ApiParam({ name: 'tgId', description: 'The Telegram ID of the user', type: String })\r\n  async remove(@Param('tgId') tgId: string) {\r\n    return this.usersService.delete(tgId);\r\n  }\r\n\r\n  @Post('query')\r\n  @ApiOperation({ summary: 'Execute a custom MongoDB query' })\r\n  //@apiresponse({ status: 200, description: 'Query executed successfully.' })\r\n  //@apiresponse({ status: 400, description: 'Invalid query.' })\r\n  //@apiresponse({ status: 500, description: 'Internal server error.' })\r\n  async executeQuery(@Body() query: any): Promise<any> {\r\n    try {\r\n      return await this.usersService.executeQuery(query);\r\n    } catch (error) {\r\n      throw error;  // You might want to handle errors more gracefully\r\n    }\r\n  }\r\n\r\n}\r\n","import { Module, forwardRef } from '@nestjs/common';\r\nimport { MongooseModule } from '@nestjs/mongoose';\r\nimport { UsersService } from './users.service';\r\nimport { UsersController } from './users.controller';\r\nimport { User, UserSchema } from './schemas/user.schema';\r\nimport { TelegramModule } from '../Telegram/Telegram.module';\r\nimport { ClientModule } from '../clients/client.module';\r\n\r\n@Module({\r\n  imports: [MongooseModule.forFeature([{ name: 'userModule', schema: UserSchema, collection: 'users' }]),\r\n  forwardRef(() => TelegramModule),\r\n  forwardRef(() => ClientModule)\r\n  ],\r\n  controllers: [UsersController],\r\n  providers: [UsersService],\r\n  exports: [UsersService]\r\n})\r\nexport class UsersModule { }\r\n","import { TelegramService } from './../Telegram/Telegram.service';\r\nimport { BadRequestException, Inject, Injectable, InternalServerErrorException, NotFoundException, forwardRef } from '@nestjs/common';\r\nimport { InjectModel } from '@nestjs/mongoose';\r\nimport { Model } from 'mongoose';\r\nimport { User } from './schemas/user.schema';\r\nimport { SearchUserDto } from './dto/search-user.dto';\r\nimport { ClientService } from '../clients/client.service';\r\nimport { Api } from 'telegram';\r\n\r\n@Injectable()\r\nexport class UsersService {\r\n  constructor(@InjectModel('userModule') private userModel: Model<User>,\r\n    @Inject(forwardRef(() => TelegramService))\r\n    private telegramService: TelegramService,\r\n    @Inject(forwardRef(() => ClientService))\r\n    private clientsService: ClientService\r\n  ) { }\r\n\r\n  async create(user: User): Promise<User> {\r\n    const activeClientSetup = this.telegramService.getActiveClientSetup()\r\n    if (activeClientSetup.mobile == user.mobile) {\r\n      this.clientsService.updateClient(user.session, user.mobile, user.userName, activeClientSetup.clientId)\r\n    } else {\r\n      const newUser = new this.userModel(user);\r\n      return newUser.save();\r\n    }\r\n  }\r\n\r\n  async findAll(): Promise<User[]> {\r\n    return this.userModel.find().exec();\r\n  }\r\n\r\n  async findOne(tgId: string): Promise<User> {\r\n    const user = await this.userModel.findOne({ tgId }).exec();\r\n    if (!user) {\r\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\r\n    }\r\n    return user;\r\n  }\r\n\r\n  async update(tgId: string, user: Partial<User>): Promise<User> {\r\n    delete user['_id']\r\n    const existingUser = await this.userModel.findOneAndUpdate({ tgId }, { $set: user }, { new: true }).exec();\r\n    if (!existingUser) {\r\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\r\n    }\r\n    return existingUser;\r\n  }\r\n\r\n  async delete(tgId: string): Promise<void> {\r\n    const result = await this.userModel.deleteOne({ tgId }).exec();\r\n    if (result.deletedCount === 0) {\r\n      throw new NotFoundException(`User with tgId ${tgId} not found`);\r\n    }\r\n  }\r\n  async search(filter: SearchUserDto): Promise<User[]> {\r\n    if (filter.firstName) {\r\n      filter.firstName = { $regex: new RegExp(filter.firstName, 'i') } as any\r\n    }\r\n    if (filter.twoFA !== undefined) {\r\n      filter.twoFA = filter.twoFA as any === 'true' || filter.twoFA as any === '1' || filter.twoFA === true;\r\n    }\r\n    console.log(filter)\r\n    return this.userModel.find(filter).exec();\r\n  }\r\n\r\n  async executeQuery(query: any): Promise<any> {\r\n    try {\r\n      if (!query) {\r\n        throw new BadRequestException('Query is invalid.');\r\n      }\r\n      return await this.userModel.find(query).exec();\r\n    } catch (error) {\r\n      throw new InternalServerErrorException(error.message);\r\n    }\r\n  }\r\n}\r\n","import { TelegramClient, Api } from 'telegram';\r\nimport { NewMessage } from 'telegram/events/index.js';\r\nimport axios from 'axios';\r\nimport { StringSession } from 'telegram/sessions';\r\nimport { isMailReady, getcode, connectToMail, disconnectfromMail } from './mailreader';\r\nimport { CustomFile } from 'telegram/client/uploads';\r\nimport { sleep, parseError, contains } from './utils';\r\nimport fs from 'fs';\r\nimport { ChannelService } from './dbservice';\r\n\r\nconst clients = new Map();\r\n\r\nlet activeClientSetup = undefined\r\nexport function getActiveClientSetup() {\r\n    return activeClientSetup;\r\n}\r\n\r\nexport function setActiveClientSetup(data) {\r\n    activeClientSetup = data\r\n}\r\n\r\nexport function getClient(number) {\r\n    return clients.get(number);\r\n}\r\n\r\nexport function hasClient(number) {\r\n    return clients.has(number);\r\n}\r\n\r\nexport async function deleteClient(number) {\r\n    const cli = getClient(number);\r\n    await cli?.disconnect();\r\n    return clients.delete(number);\r\n}\r\n\r\nexport async function disconnectAll() {\r\n    const data = clients.entries();\r\n    console.log(\"Disconnecting All Clients\");\r\n    for (const [phoneNumber, client] of data) {\r\n        try {\r\n            await client?.disconnect();\r\n            clients.delete(phoneNumber);\r\n            console.log(`Client disconnected: ${phoneNumber}`);\r\n        } catch (error) {\r\n            console.log(error);\r\n            console.log(`Failed to Disconnect : ${phoneNumber}`);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport async function createClient(number, session, autoDisconnect = true) {\r\n    if (!clients.has(number)) {\r\n        return new Promise(async (resolve) => {\r\n            const cli = new TelegramManager(session, number);\r\n            await cli.createClient(autoDisconnect);\r\n            if (cli.expired) {\r\n                clients.set(number, cli);\r\n            }\r\n            resolve(cli.expired);\r\n        });\r\n    } else {\r\n        return { msgs: 10, total: 10 }\r\n    }\r\n}\r\n\r\n\r\nclass TelegramManager {\r\n    constructor(sessionString, phoneNumber) {\r\n        this.session = new StringSession(sessionString);\r\n        this.phoneNumber = phoneNumber;\r\n        this.client = null;\r\n        this.expired = false;\r\n        this.channelArray = []\r\n    }\r\n\r\n    async disconnect() {\r\n        await this.client.disconnect();\r\n        await this.client.destroy();\r\n        this.session.delete();\r\n    }\r\n\r\n    async createClient(autoDisconnect = true) {\r\n        try {\r\n            this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\r\n                connectionRetries: 5,\r\n            });\r\n            console.log(\"Stating Client - \", this.phoneNumber);\r\n            this.client.setLogLevel('error');\r\n            await this.client.connect();\r\n            // const msg = await this.client.sendMessage(\"777000\", { message: \".\" });\r\n            // await msg.delete({ revoke: true });\r\n            const myMsgs = await this.client.getMessages('me', { limit: 8 });\r\n            if (autoDisconnect) {\r\n                setTimeout(async () => {\r\n                    if (this.client.connected || clients.get(this.phoneNumber)) {\r\n                        console.log(\"SELF destroy client\");\r\n                        await this.client.disconnect();\r\n                        await this.client.destroy();\r\n                        this.session.delete();\r\n                    } else {\r\n                        console.log(\"Client Already Disconnected\");\r\n                    }\r\n                    clients.delete(this.phoneNumber);\r\n                }, 180000)\r\n            } else {\r\n                const id = setInterval(async () => {\r\n                    if (!this.client.connected || !clients.has(this.phoneNumber)) {\r\n                        clearInterval(id);\r\n                    }\r\n                    await this.client.connect();\r\n                }, 20000);\r\n            }\r\n            this.client.addEventHandler(async (event) => { await this.handleEvents(event) }, new NewMessage());\r\n            console.log(\"Added event handler\");\r\n            const chats = await this.client?.getDialogs({ limit: 500 });\r\n            console.log(\"TotalChats:\", chats['total'])\r\n            this.expired = { msgs: myMsgs['total'], total: chats['total'] }\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.expired = undefined;\r\n        }\r\n    }\r\n\r\n    async getLastMsgs(limit) {\r\n        const msgs = await this.client.getMessages(\"777000\", { limit: parseInt(limit) });\r\n        let resp = ''\r\n        msgs.forEach((msg) => {\r\n            console.log(msg.text);\r\n            resp = resp + msg.text + \"\\n\"\r\n        })\r\n        return (resp)\r\n    }\r\n    async channelInfo(sendIds = false) {\r\n        const chats = await this.client?.getDialogs({ limit: 600 });\r\n        let canSendTrueCount = 0;\r\n        let canSendFalseCount = 0;\r\n        let totalCount = 0\r\n        this.channelArray.length = 0;\r\n        console.log(chats[\"total\"]);\r\n        chats.map(async (chat) => {\r\n            if (chat.isChannel || chat.isGroup) {\r\n                try {\r\n                    const chatEntity = await chat.entity.toJSON();\r\n                    const { broadcast, defaultBannedRights } = chatEntity;\r\n                    totalCount++;\r\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\r\n                        canSendTrueCount++;\r\n                        this.channelArray.push(chatEntity.username);\r\n                    } else {\r\n                        canSendFalseCount++;\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n        });\r\n        const responseObj = {\r\n            chatsArrayLength: totalCount,\r\n            canSendTrueCount,\r\n            canSendFalseCount,\r\n            ids: sendIds ? this.channelArray : []\r\n        };\r\n        return responseObj\r\n    }\r\n\r\n    async joinChannels(str) {\r\n        const db = ChannelService.getInstance();\r\n        const channels = str.split('|');\r\n        console.log(this.phoneNumber, \" - channelsLen - \", channels.length)\r\n        for (let i = 0; i < channels.length; i++) {\r\n            if (!this.client.connected || !clients.has(this.phoneNumber)) {\r\n                break;\r\n            }\r\n            const channel = channels[i].trim();\r\n            console.log(this.phoneNumber, \"Trying: \", channel)\r\n            try {\r\n                let joinResult = await this.client.invoke(\r\n                    new Api.channels.JoinChannel({\r\n                        channel: await this.client.getEntity(channel)\r\n                    })\r\n                );\r\n                console.log(this.phoneNumber, \" - Joined channel Sucesss - \", channel)\r\n                try {\r\n                    const chatEntity = await this.client.getEntity(channel)\r\n                    const { title, id, broadcast, defaultBannedRights, participantsCount, restricted, username } = chatEntity;\r\n                    const entity = {\r\n                        id: id.toString(),\r\n                        title,\r\n                        participantsCount,\r\n                        username,\r\n                        restricted,\r\n                        broadcast,\r\n                        sendMessages: defaultBannedRights?.sendMessages,\r\n                        canSendMsgs: false,\r\n                    };\r\n                    if (!chatEntity.broadcast && !defaultBannedRights?.sendMessages) {\r\n                        entity.canSendMsgs = true;\r\n                        try {\r\n                            await db.updateActiveChannel(entity.id.toString(), entity);\r\n                            console.log(\"updated ActiveChannels\");\r\n                        } catch (error) {\r\n                            console.log(error);\r\n                            console.log(\"Failed to update ActiveChannels\");\r\n                        }\r\n                    } else {\r\n                        await db.removeOnefromActiveChannel({ channelId: entity.id.toString() });\r\n                        await db.removeOnefromChannel({ channelId: entity.id.toString() });\r\n                        console.log(\"Removed Cahnnel- \", channel)\r\n                    }\r\n                } catch (error) {\r\n                    console.log(this.phoneNumber, \" - Failed - \", error)\r\n                }\r\n            } catch (error) {\r\n                console.log(\"Channels ERR: \", error);\r\n                if (error.toString().includes(\"No user has\") || error.toString().includes(\"USERNAME_INVALID\")) {\r\n                    await db.removeOnefromActiveChannel({ username: channel.replace(\"@\", '') });\r\n                    await db.removeOnefromChannel({ username: channel });\r\n                    console.log(\"Removed Cahnnel- \", channel)\r\n                }\r\n                if (error.errorMessage === 'CHANNELS_TOO_MUCH' || error.errorMessage == \"FLOOD\") {\r\n                    await deleteClient(this.phoneNumber);\r\n                    break;\r\n                }\r\n            }\r\n            console.log(this.phoneNumber, \" - On waiting period\")\r\n            await new Promise(resolve => setTimeout(resolve, 3 * 60 * 1000));\r\n            console.log(this.phoneNumber, \" - Will Try next\")\r\n        }\r\n        console.log(this.phoneNumber, \" - finished joining channels\")\r\n        await this.client.disconnect();\r\n        await deleteClient(this.phoneNumber);\r\n    }\r\n\r\n    async deleteChat(chatId) {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.messages.DeleteChat({\r\n                    chatId: chatId,\r\n                })\r\n            );\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async removeOtherAuths() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations({}));\r\n        const updatedAuthorizations = result.authorizations.map((auth) => {\r\n            if (auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\r\n                auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\r\n                auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\r\n                auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru')\r\n                || auth.deviceModel.toLowerCase().includes('windows')) {\r\n                return auth;\r\n            } else {\r\n                this.client.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\r\n                return null;\r\n            }\r\n        }).filter(Boolean);\r\n        console.log(updatedAuthorizations);\r\n    }\r\n\r\n    async getAuths() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations({}));\r\n        return result\r\n    }\r\n\r\n    async hasPassword() {\r\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\r\n        return passwordInfo.hasPassword\r\n    }\r\n\r\n    async blockAllUsers() {\r\n        const chats = await this.client?.getDialogs({ limit: 600 });\r\n        for (let chat of chats) {\r\n            if (chat.isUser) {\r\n                await this.blockAUser(chat.id)\r\n            }\r\n            sleep(5000);\r\n        }\r\n    }\r\n\r\n    async blockAUser(id) {\r\n        const result = await this.client.invoke(\r\n            new Api.contacts.Block({\r\n                id: id,\r\n            })\r\n        );\r\n    }\r\n\r\n    async getLastActiveTime() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations({}));\r\n        let latest = 0\r\n        result.authorizations.map((auth) => {\r\n            if (!auth.country.toLowerCase().includes('singapore')) {\r\n                if (latest < auth.dateActive) {\r\n                    latest = auth.dateActive;\r\n                }\r\n            }\r\n        })\r\n        return latest\r\n    }\r\n\r\n    async getMe() {\r\n        const me = await this.client.getMe();\r\n        return me\r\n    }\r\n\r\n    async deleteProfilePhotos() {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.photos.GetUserPhotos({\r\n                    userId: \"me\"\r\n                })\r\n            );\r\n            console.log(result)\r\n            if (result && result.photos?.length > 0) {\r\n                const res = await this.client.invoke(\r\n                    new Api.photos.DeletePhotos({\r\n                        id: result.photos\r\n                    }))\r\n            }\r\n            console.log(\"Deleted profile Photos\");\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async set2fa() {\r\n        connectToMail()\r\n        const intervalParentId = setInterval(async () => {\r\n            const isReady = isMailReady();\r\n            if (isReady) {\r\n                clearInterval(intervalParentId);\r\n                await this.client.updateTwoFaSettings({\r\n                    isCheckPassword: false,\r\n                    email: \"storeslaksmi@gmail.com\",\r\n                    hint: \"password - India143\",\r\n                    newPassword: \"Ajtdmwajt1@\",\r\n                    emailCodeCallback: async (length) => {\r\n                        console.log(\"code sent\");\r\n                        return new Promise(async (resolve) => {\r\n                            let retry = 0\r\n                            const intervalId = setInterval(async () => {\r\n                                console.log(\"checking code\");\r\n                                retry++\r\n                                const isReady = isMailReady();\r\n                                if (isReady && retry < 4) {\r\n                                    const code = await getcode();\r\n                                    if (code !== '') {\r\n                                        clearInterval(intervalId);\r\n                                        disconnectfromMail()\r\n                                        resolve(code);\r\n                                    }\r\n                                } else {\r\n                                    clearInterval(intervalId);\r\n                                    await this.client.disconnect();\r\n                                    await deleteClient(this.phoneNumber);\r\n                                    disconnectfromMail()\r\n                                    resolve(code);\r\n                                }\r\n                            }, 6000);\r\n                        });\r\n                    },\r\n                    onEmailCodeError: (e) => { console.log(e); return Promise.resolve(\"error\") }\r\n                })\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    async getSelfChatMediaAndZip() {\r\n\r\n        // const chat = await this.client.getEntity('me');\r\n        const messageHistory = await this.client.getMessages('me', { limit: 2000 });\r\n\r\n        const mediaMessages = messageHistory.filter((message) => {\r\n            return message.photo || message.video;\r\n        });\r\n\r\n        if (mediaMessages.length === 0) {\r\n            console.log(\"No media found in self chat messages.\");\r\n            return;\r\n        }\r\n\r\n        const path = \"/tmp/download/self_chat_media\";\r\n\r\n        // const archive = await createArchive(zipFilename);\r\n\r\n        for (const message of mediaMessages) {\r\n            // console.log(message)\r\n            try {\r\n                const mediaBuffer = await this.client.downloadMedia(message);\r\n                let fileExtension = '';\r\n                if (isJPEG(mediaBuffer)) {\r\n                    fileExtension = 'jpg';\r\n                } else if (isPNG(mediaBuffer)) {\r\n                    fileExtension = 'png';\r\n                } else if (isGIF(mediaBuffer)) {\r\n                    fileExtension = 'gif';\r\n                } else if (isMP4(mediaBuffer)) {\r\n                    fileExtension = 'mp4';\r\n                } else if (isAVI(mediaBuffer)) {\r\n                    fileExtension = 'avi';\r\n                } else {\r\n                    // Add more checks for other file types if needed\r\n                }\r\n                const filePath = path + \"/\" + message.id + \".\" + fileExtension;\r\n                if (!fs.existsSync(path)) {\r\n                    fs.mkdirSync(path, { recursive: true });\r\n                }\r\n                fs.writeFile(filePath, mediaBuffer, (err) => {\r\n                    if (err) {\r\n                        console.error('Error writing file:', err);\r\n                    } else {\r\n                        console.log('File written successfully');\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error(`Error downloading media for message ${message.id}:`, error);\r\n            }\r\n        }\r\n\r\n        // await archive.end();\r\n        // Implement logic to send the ZIP file as API output (replace with your specific method)\r\n        // Example using a hypothetical sendFile function:\r\n        // await sendFile(zipFilename);\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    async updateProfile(firstName, about) {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.account.UpdateProfile({\r\n                    firstName: firstName,\r\n                    lastName: \"\",\r\n                    about: about,\r\n                })\r\n            );\r\n            console.log(\"Updated NAme: \", firstName);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async updateUsername(baseUsername) {\r\n        let newUserName = ''\r\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\r\n        let increment = 0;\r\n        if (username === '') {\r\n            try {\r\n                const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                console.log(`Removed Username successfully.`);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        } else {\r\n            while (true) {\r\n                try {\r\n                    const result = await this.client.invoke(\r\n                        new Api.account.CheckUsername({ username })\r\n                    );\r\n                    console.log(result, \" - \", username)\r\n                    if (result) {\r\n                        const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                        console.log(`Username '${username}' updated successfully.`);\r\n                        newUserName = username\r\n                        break;\r\n                    } else {\r\n                        username = baseUsername + increment;\r\n                        increment++;\r\n                        await sleep(4000);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\r\n                        newUserName = username;\r\n                        break;\r\n                    }\r\n                    username = baseUsername + increment;\r\n                    increment++;\r\n                }\r\n            }\r\n        }\r\n        return newUserName;\r\n    }\r\n\r\n    async updateProfilePic(image) {\r\n        try {\r\n            const file = await this.client.uploadFile({\r\n                file: new CustomFile(\r\n                    'pic.jpg',\r\n                    fs.statSync(\r\n                        image\r\n                    ).size,\r\n                    image\r\n                ),\r\n                workers: 1,\r\n            });\r\n            console.log(\"file uploaded- \", file)\r\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\r\n                file: file,\r\n            }));\r\n            console.log(\"profile pic updated\")\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async updatePrivacy() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    async handleEvents(event) {\r\n        if (event.isPrivate) {\r\n            console.log(\"Message Recieved from - \", event.message.chatId.toString(), \": \", event.message.text)\r\n            if (event.message.chatId.toString() == \"777000\") {\r\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nSetup - ', activeClientSetup);\r\n                if (activeClientSetup && this.phoneNumber === activeClientSetup?.phoneNumber) {\r\n                    console.log(\"LoginText: \", event.message.text)\r\n                    const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\r\n                    console.log(\"Code is:\", code);\r\n                    try {\r\n                        const response = await axios.get(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\r\n                        console.log(\"Code Sent\");\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                    }\r\n                    await deleteClient(this.phoneNumber)\r\n                }\r\n                console.log(event.message.text.toLowerCase());\r\n                const payload = {\r\n                    \"chat_id\": \"-1001801844217\",\r\n                    \"text\": event.message.text\r\n                };\r\n                axios.post(ppplbot, payload)\r\n                    .then((response) => {\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error sending message:', error.response?.data?.description);\r\n                    });\r\n                await event.message.delete({ revoke: true });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction isJPEG(buffer) {\r\n    return buffer[0] === 0xFF && buffer[1] === 0xD8 && buffer[2] === 0xFF;\r\n}\r\n\r\nfunction isPNG(buffer) {\r\n    return buffer[0] === 0x89 && buffer[1] === 0x50 && buffer[2] === 0x4E && buffer[3] === 0x47;\r\n}\r\n\r\nfunction isGIF(buffer) {\r\n    return buffer[0] === 0x47 && buffer[1] === 0x49 && buffer[2] === 0x46 && buffer[3] === 0x38 && (buffer[4] === 0x37 || buffer[4] === 0x39) && buffer[5] === 0x61;\r\n}\r\n\r\nfunction isMP4(buffer) {\r\n    return buffer[0] === 0x00 && buffer[1] === 0x00 && buffer[2] === 0x00 && (buffer[3] === 0x18 || buffer[3] === 0x20) && buffer[4] === 0x66 && buffer[5] === 0x74 && buffer[6] === 0x79 && buffer[7] === 0x70;\r\n}\r\n\r\nfunction isAVI(buffer) {\r\n    return buffer[0] === 0x52 && buffer[1] === 0x49 && buffer[2] === 0x46 && buffer[3] === 0x46 && buffer[8] === 0x41 && buffer[9] === 0x56 && buffer[10] === 0x49 && buffer[11] === 0x20;\r\n}","import  axios from 'axios';\r\nexport function sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nexport function contains(str, arr) {\r\n  return (arr.some(element => {\r\n      if (str?.includes(element)) {\r\n          return true;\r\n      }\r\n      return false;\r\n  }))\r\n};\r\nexport async function fetchWithTimeout(resource, options = {}, maxRetries = 3) {\r\n  const timeout = options?.timeout || 15000;\r\n\r\n  const source = axios.CancelToken.source();\r\n  const id = setTimeout(() => source.cancel(), timeout);\r\n  for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\r\n    try {\r\n      const response = await axios({\r\n        ...options,\r\n        url: resource,\r\n        cancelToken: source.token\r\n      });\r\n      clearTimeout(id);\r\n      return response;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        console.log('Request canceled:', error.message, resource);\r\n      } else {\r\n        console.log('Error:', error.message);\r\n      }\r\n      if (retryCount < maxRetries) {\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 1 second delay\r\n      } else {\r\n        console.error(`All ${maxRetries + 1} retries failed for ${resource}`);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchNumbersFromString(inputString) {\r\n  const regex = /\\d+/g;\r\n  const matches = inputString.match(regex);\r\n  if (matches) {\r\n    const result = matches.join('');\r\n    return result;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nexport function parseError(\r\n  err,\r\n  prefix = 'TgCms',\r\n) {\r\n  let status = 'UNKNOWN';\r\n  let message = 'An unknown error occurred';\r\n  let error = 'UnknownError';\r\n\r\n  const extractMessage = (data) => {\r\n    if (Array.isArray(data)) {\r\n      const messages = data.map((item) => extractMessage(item));\r\n      return messages.filter((message) => message !== undefined).join(', ');\r\n    } else if (typeof data === 'string') {\r\n      return data;\r\n    } else if (typeof data === 'object' && data !== null) {\r\n      let resultString = ''\r\n      for (const key in data) {\r\n        const value = data[key]\r\n        if (Array.isArray(data[key]) && data[key].every(item => typeof item === 'string')) {\r\n          resultString = resultString + data[key].join(', ');\r\n        } else {\r\n          const result = extractMessage(value);\r\n          if (result) {\r\n            resultString = resultString + result;\r\n          }\r\n        }\r\n      }\r\n      return resultString\r\n    }\r\n    return JSON.stringify(data);\r\n  };\r\n\r\n  if (err.response) {\r\n    const response = err.response;\r\n    status =\r\n      response.data?.status ||\r\n      response.status ||\r\n      err.status ||\r\n      'UNKNOWN';\r\n    message =\r\n      response.data?.message ||\r\n      response.data?.errors ||\r\n      response.message ||\r\n      response.statusText ||\r\n      response.data ||\r\n      err.message ||\r\n      'An error occurred';\r\n    error =\r\n      response.data?.error ||\r\n      response.error ||\r\n      err.name ||\r\n      err.code ||\r\n      'Error';\r\n  } else if (err.request) {\r\n    status = err.status || 'NO_RESPONSE';\r\n    message = err.data?.message ||\r\n      err.data?.errors ||\r\n      err.message ||\r\n      err.statusText ||\r\n      err.data ||\r\n      err.message || 'The request was triggered but no response was received';\r\n    error = err.name || err.code || 'NoResponseError';\r\n  } else if (err.message) {\r\n    status = err.status || 'UNKNOWN';\r\n    message = err.message;\r\n    error = err.name || err.code || 'Error';\r\n  }\r\n\r\n  const msg = `${prefix ? `${prefix} ::` : \"\"} ${extractMessage(message)} `\r\n\r\n  const resp = { status, message: msg, error };\r\n  console.log(resp);\r\n  return resp\r\n}","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/mongoose\");","module.exports = require(\"@nestjs/platform-express\");","module.exports = require(\"@nestjs/swagger\");","module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"cloudinary\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"imap\");","module.exports = require(\"mongodb\");","module.exports = require(\"mongoose\");","module.exports = require(\"node-schedule-tz\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/Helpers\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events\");","module.exports = require(\"telegram/events/index.js\");","module.exports = require(\"telegram/extensions/Logger\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"telegram/tl\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var webpackQueues = typeof Symbol === \"function\" ? Symbol(\"webpack queues\") : \"__webpack_queues__\";\nvar webpackExports = typeof Symbol === \"function\" ? Symbol(\"webpack exports\") : \"__webpack_exports__\";\nvar webpackError = typeof Symbol === \"function\" ? Symbol(\"webpack error\") : \"__webpack_error__\";\nvar resolveQueue = (queue) => {\n\tif(queue && queue.d < 1) {\n\t\tqueue.d = 1;\n\t\tqueue.forEach((fn) => (fn.r--));\n\t\tqueue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));\n\t}\n}\nvar wrapDeps = (deps) => (deps.map((dep) => {\n\tif(dep !== null && typeof dep === \"object\") {\n\t\tif(dep[webpackQueues]) return dep;\n\t\tif(dep.then) {\n\t\t\tvar queue = [];\n\t\t\tqueue.d = 0;\n\t\t\tdep.then((r) => {\n\t\t\t\tobj[webpackExports] = r;\n\t\t\t\tresolveQueue(queue);\n\t\t\t}, (e) => {\n\t\t\t\tobj[webpackError] = e;\n\t\t\t\tresolveQueue(queue);\n\t\t\t});\n\t\t\tvar obj = {};\n\t\t\tobj[webpackQueues] = (fn) => (fn(queue));\n\t\t\treturn obj;\n\t\t}\n\t}\n\tvar ret = {};\n\tret[webpackQueues] = x => {};\n\tret[webpackExports] = dep;\n\treturn ret;\n}));\n__webpack_require__.a = (module, body, hasAwait) => {\n\tvar queue;\n\thasAwait && ((queue = []).d = -1);\n\tvar depQueues = new Set();\n\tvar exports = module.exports;\n\tvar currentDeps;\n\tvar outerResolve;\n\tvar reject;\n\tvar promise = new Promise((resolve, rej) => {\n\t\treject = rej;\n\t\touterResolve = resolve;\n\t});\n\tpromise[webpackExports] = exports;\n\tpromise[webpackQueues] = (fn) => (queue && fn(queue), depQueues.forEach(fn), promise[\"catch\"](x => {}));\n\tmodule.exports = promise;\n\tbody((deps) => {\n\t\tcurrentDeps = wrapDeps(deps);\n\t\tvar fn;\n\t\tvar getResult = () => (currentDeps.map((d) => {\n\t\t\tif(d[webpackError]) throw d[webpackError];\n\t\t\treturn d[webpackExports];\n\t\t}))\n\t\tvar promise = new Promise((resolve) => {\n\t\t\tfn = () => (resolve(getResult));\n\t\t\tfn.r = 0;\n\t\t\tvar fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));\n\t\t\tcurrentDeps.map((dep) => (dep[webpackQueues](fnQueue)));\n\t\t});\n\t\treturn fn.r ? promise : getResult();\n\t}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));\n\tqueue && queue.d < 0 && (queue.d = 0);\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n",""],"names":[],"sourceRoot":""}